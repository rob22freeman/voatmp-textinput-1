var pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./TextInput/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./TextInput/index.ts":
/*!****************************!*\
  !*** ./TextInput/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TextInput = void 0; //Import Nunjucks libraries\n\nvar Nunjucks = __webpack_require__(/*! nunjucks */ \"./node_modules/nunjucks/browser/nunjucks.js\");\n\nvar TextInput =\n/** @class */\nfunction () {\n  /**\r\n   * Empty constructor.\r\n   */\n  function TextInput() {// no-op: method not leveraged by this example custom control\n  }\n  /**\r\n   * Used to initialize the control instance. Controls can kick off remote server calls and other initialization actions here.\r\n   * Data-set values are not initialized here, use updateView.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to property names defined in the manifest, as well as utility functions.\r\n   * @param notifyOutputChanged A callback method to alert the framework that the control has new outputs ready to be retrieved asynchronously.\r\n   * @param state A piece of data that persists in one session for a single user. Can be set at any point in a controls life cycle by calling 'setControlState' in the Mode interface.\r\n   * @param container If a control is marked control-type='standard', it will receive an empty div element within which it can render its content.\r\n   */\n\n\n  TextInput.prototype.init = function (context, notifyOutputChanged, state, container) {\n    this.registerNunjucks(); // Add control initialization code\n\n    this._context = context;\n    this._notifyOutputChanged = notifyOutputChanged;\n    this._refreshData = this.refreshData.bind(this); // The unique identifier should be configured to the field logical name - required so should never be null\n\n    this._uniqueIdentifier = context.parameters.uniqueIdentifier.raw;\n    this._title = context.parameters.title.raw;\n    this._hint = context.parameters.hint.raw;\n    this._textInputId = this._uniqueIdentifier; // The unique identifier should be configured to the field logical name\n\n    this._uniqueIdentifier = context.parameters.uniqueIdentifier.raw; // Required so should never be null\n    // Concatenate the unique identifier with elements of the control to provide IDs\n\n    this._hintId = this._uniqueIdentifier + \"-hint\"; // The Portal automatically generates a container for the PCF which is the field logical name suffixed with \"_Container\"\n\n    this._containerLabel = this._uniqueIdentifier + \"_Container\"; // Configuration methods\n\n    this.fixedAndFluidWidthInputs();\n    this.disablePageHeading(this._title);\n    this.inputType();\n    this.prefixSuffix();\n    this._spellcheck = this.disableSpellcheck();\n    this.autocomplete(); //Configure and render Nunjucks templates\n\n    __webpack_require__(/*! govuk-frontend */ \"./node_modules/govuk-frontend/govuk/all.js\");\n\n    var runOnServer = \"http://127.0.0.1:8080/\";\n    var templatePath = \"node_modules/govuk-frontend/govuk/components/\";\n    var env = Nunjucks.configure(runOnServer + templatePath);\n    var renderedNunjucksTemplate = env.render('/input/template.njk', {\n      params: {\n        label: this._disablePageHeading,\n        prefix: {\n          text: this._prefix\n        },\n        suffix: {\n          text: this._suffix\n        },\n        classes: this._fixedAndFluidWidthInputsClass,\n        hint: {\n          text: this._hint\n        },\n        id: this._uniqueIdentifier,\n        name: this._uniqueIdentifier,\n        inputmode: this._inputmode,\n        pattern: this._pattern,\n        spellcheck: this._spellcheck,\n        autocomplete: this._autocomplete\n      }\n    });\n    this._container = document.createElement(\"div\");\n    this._container.innerHTML = // Override that PCF Test Environment aligns to centre\n    \"<style>.control-pane{text-align:unset;}</style>\\n\" + renderedNunjucksTemplate; // Add the entire container to the control's main container\n\n    container.appendChild(this._container);\n    this._formGroupDiv = document.getElementsByClassName(\"govuk-form-group\")[0];\n    this._titleDiv = document.getElementsByTagName(\"label\")[0];\n    this._hintDiv = document.getElementById(this._hintId);\n    this._textInputDiv = document.getElementsByClassName(\"govuk-input \" + this._fixedAndFluidWidthInputsClass)[0];\n    this._textInput = document.getElementById(this._textInputId);\n\n    this._textInput.addEventListener(\"change\", this._refreshData);\n\n    this.removeHintDiv();\n    this.registerPCFComponent(this);\n    this.pageValidation();\n  };\n\n  ;\n  /**\r\n   * Remove hint div from control if no hint text is required.\r\n   */\n\n  TextInput.prototype.removeHintDiv = function () {\n    if (this._hint === undefined) {\n      this._hintDiv.remove();\n    }\n  };\n\n  ;\n  /**\r\n   * Show error on control.\r\n   * @param errorMessageText Error message to display\r\n   */\n\n  TextInput.prototype.ShowError = function (errorMessageText) {\n    var _a; // Hide error message if one already exists\n\n\n    this.HideError();\n\n    this._formGroupDiv.classList.add(\"govuk-form-group--error\");\n\n    var errorMessageId = \"errorMessage\"; // Create and add error message span\n\n    var errorMessageSpan = document.createElement(\"span\");\n    errorMessageSpan.classList.add(\"govuk-error-message\");\n    errorMessageSpan.id = errorMessageId;\n    errorMessageSpan.innerHTML = \"<span class=\\\"govuk-visually-hidden\\\">Error:</span> \" + errorMessageText; // Show the error message in the right place on the control depending on whether a hint is included or not\n\n    if (this._hint === undefined) {\n      this._titleDiv.after(errorMessageSpan);\n    } else {\n      this._hintDiv.after(errorMessageSpan);\n    }\n\n    ; // Add error message to field set's aria-describedby attribute,\n    // if it doesn't already exist\n\n    var ariaDescribedBy = this._formGroupDiv.getAttribute(\"aria-describedby\");\n\n    var ariaDescribedByList = ariaDescribedBy === null || ariaDescribedBy === void 0 ? void 0 : ariaDescribedBy.split(\" \");\n    var hasAriaDescribedByListGotId = ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.includes(errorMessageId);\n\n    if (!hasAriaDescribedByListGotId) {\n      ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.push(errorMessageId);\n    }\n\n    this._formGroupDiv.setAttribute(\"aria-describedby\", (_a = ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.join(\" \")) !== null && _a !== void 0 ? _a : \"\"); // Apply error highlighting styling to text input field\n\n\n    this._textInput.classList.add(\"govuk-input--error\"); // Store error message for use in page level validation\n\n\n    this._errorMessage = errorMessageText;\n  };\n  /**\r\n   * Hide error on control.\r\n   */\n\n\n  TextInput.prototype.HideError = function () {\n    var _a, _b;\n\n    var errorMessageId = \"errorMessage\"; // Remove form group div error styling if it's present\n\n    this._formGroupDiv.classList.remove(\"govuk-form-group--error\"); // Delete error message div if it exists\n\n\n    var errorMessageDiv = document.getElementById(errorMessageId);\n    errorMessageDiv === null || errorMessageDiv === void 0 ? void 0 : errorMessageDiv.remove(); // Remove error message from field set's aria-describedby attribute, if it exists\n\n    var ariaDescribedBy = this._formGroupDiv.getAttribute(\"aria-describedby\");\n\n    var ariaDescribedByList = ariaDescribedBy === null || ariaDescribedBy === void 0 ? void 0 : ariaDescribedBy.split(\" \");\n    var AriaDescribedByListErrorIdIndex = (_a = ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.indexOf(errorMessageId)) !== null && _a !== void 0 ? _a : -1;\n\n    if (AriaDescribedByListErrorIdIndex !== -1) {\n      ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.splice(AriaDescribedByListErrorIdIndex, 1);\n    }\n\n    this._formGroupDiv.setAttribute(\"aria-describedby\", (_b = ariaDescribedByList === null || ariaDescribedByList === void 0 ? void 0 : ariaDescribedByList.join(\" \")) !== null && _b !== void 0 ? _b : \"\"); // Remove error styles from input field\n\n\n    this._textInput.classList.remove(\"govuk-input--error\");\n  };\n  /**\r\n   * Updates the values to the internal value variable we are storing and also updats the html label that displays the value\r\n   * @param context This \"Input Properties\" containing the parameters, component metadata and interface functions\r\n   */\n\n\n  TextInput.prototype.refreshData = function (evt) {\n    var doValidation = this._enableValidation || this._textInput.value;\n\n    if (doValidation) {\n      if (!this._enableValidation) {\n        this._enableValidation = true;\n      }\n\n      var inputIsValid = this.performInputValidation();\n\n      if (inputIsValid) {\n        this._value = this._textInput.value;\n\n        this._notifyOutputChanged();\n      }\n    }\n  };\n  /**\r\n   * Validates contents of input fields and updates UI with appropriate error messages.\r\n   * @returns {boolean} True if validation passed. Otherwise, false.\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.performInputValidation = function () {\n    var fieldIdentifier = this._fieldIdentifier = this._context.parameters.fieldIdentifierErrorMessage.raw;\n    var isInputValid = true; // Reset error state\n\n    this.HideError();\n    isInputValid && (isInputValid = this.handleIfInputIsEmpty(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputHasBothMinAndMaxLength(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsTooLong(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsTooShort(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfSpecifiedCharactersAreNotAllowed(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfOnlyStandardCharactersAreAllowed(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsNotAWholeNumber(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsNotANumber(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputMustBeBetweenTwoNumbers(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsTooLow(fieldIdentifier));\n    isInputValid && (isInputValid = this.handleIfInputIsTooHigh(fieldIdentifier));\n    return isInputValid;\n  };\n\n  TextInput.prototype.pageValidation = function () {\n    var _window = window;\n\n    if (typeof _window.Page_Validators == \"undefined\") {\n      return;\n    }\n\n    var newValidator = document.createElement('span'); //any = custom properties for val\n\n    newValidator.style.display = \"none\";\n    newValidator.id = this._uniqueIdentifier + \"Validator\";\n    newValidator.controltovalidate = this._uniqueIdentifier;\n\n    newValidator.evaluationfunction = function () {\n      var result = _window.HSL.PCFRegistrar[this.controltovalidate].performInputValidation();\n\n      this.isvalid = result;\n\n      if (!this.isvalid) {\n        var errorMessageText = _window.HSL.PCFRegistrar[this.controltovalidate]._errorMessage;\n        this.errormessage = \"<a href='#\" + _window.HSL.PCFRegistrar[this.controltovalidate]._containerLabel + \"' onclick=\\\"javascript: scrollToAndFocus('\" + _window.HSL.PCFRegistrar[this.controltovalidate]._containerLabel + \"', '\" + _window.HSL.PCFRegistrar[this.controltovalidate]._errorFocusId + \"'); return false;\\\">\" + errorMessageText + \"</a>\";\n      } else {\n        this.errormessage = null;\n      }\n    };\n\n    _window.Page_Validators.push(newValidator);\n  };\n  /**\r\n   * Capitalises first letter of error message for showError output\r\n   * @param string {string} Error message to have first letter capitalised.\r\n   * @returns {string} Error message with first letter capitalised.\r\n   */\n\n\n  TextInput.prototype.firstCharUpperCase = function (string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  /**\r\n   * Converts first letter of error message for showError output to lowercase (acting as a fail safe so the correct format is always displayed)\r\n   * @param string {string} Error message to have first letter converted to lowercase.\r\n   * @returns {string} Error message with first letter converted to lowercase.\r\n   */\n\n\n  TextInput.prototype.firstCharLowerCase = function (string) {\n    return string.charAt(0).toLowerCase() + string.slice(1);\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if input is empty. Say 'Enter [whatever it is]', for example, 'Enter your first name'.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsEmpty = function (fieldIdentifier) {\n    var inputIsEmpty = !this._textInput.value;\n\n    if (inputIsEmpty) {\n      this.ShowError('Enter ' + this.firstCharLowerCase(fieldIdentifier));\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !inputIsEmpty;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input is too long. Say '[whatever it is] must be [number] characters or fewer',\r\n   * for example, 'Address line 1 must be 35 characters or fewer'.\r\n   * Maximum input length automatically configured in Control Manifest if a fixed width option is selected, otherwise a custom\r\n   * value (optional) can be selected.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsTooLong = function (fieldIdentifier) {\n    this._characterWidth2 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"1\";\n    this._characterWidth3 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"2\";\n    this._characterWidth4 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"3\";\n    this._characterWidth5 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"4\";\n    this._characterWidth10 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"5\";\n    this._characterWidth20 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"6\";\n    this._maxInputLength = this._context.parameters.maxInputLength.raw == undefined ? undefined : this._context.parameters.maxInputLength.raw; // Set the max character length of the input field to fixed character width if selected, for example:\n    // if \"2 character width\" is chosen, set the max character length to 2, or use the value of the \n    // \"Max input length\" setting if one has been defined, otherwise return undefined.\n\n    var maxInputLengthValue = this._characterWidth2 ? 2 : this._characterWidth3 ? 3 : this._characterWidth4 ? 4 : this._characterWidth5 ? 5 : this._characterWidth10 ? 10 : this._characterWidth20 ? 20 : this._maxInputLength;\n\n    if (!maxInputLengthValue) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var isInputTooLong = maxInputLengthValue != undefined ? inputText.length > maxInputLengthValue ? true : false : false;\n\n    if (isInputTooLong) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be \" + maxInputLengthValue + \" characters or fewer\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !isInputTooLong;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input is too short. Say '[whatever it is] must be [number] characters or more',\r\n   * for example, 'Full name must be 2 characters or more'.\r\n   * Minimum input length not set by default, unless a custom value is selected via the Control Manifest.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsTooShort = function (fieldIdentifier) {\n    this._minInputLength = this._context.parameters.minInputLength.raw == undefined ? undefined : this._context.parameters.minInputLength.raw;\n    var minInputLengthValue = this._minInputLength;\n\n    if (minInputLengthValue == undefined) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var isInputTooShort = minInputLengthValue != undefined ? inputText.length < parseInt(minInputLengthValue) ? true : false : false;\n\n    if (isInputTooShort) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be \" + minInputLengthValue + \" characters or more\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !isInputTooShort;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input has both a minimum and maximum length.\r\n   * Say '[whatever it is] must be between [number] and [number] characters', for example, 'Last name must be between 2 and 35 characters'.\r\n   * If a value for both minimum and maximum length is selected via the Control Manifest this validation method applies.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputHasBothMinAndMaxLength = function (fieldIdentifier) {\n    this._characterWidth2 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"1\";\n    this._characterWidth3 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"2\";\n    this._characterWidth4 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"3\";\n    this._characterWidth5 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"4\";\n    this._characterWidth10 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"5\";\n    this._characterWidth20 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"6\";\n    this._maxInputLength = this._context.parameters.maxInputLength.raw == undefined ? undefined : this._context.parameters.maxInputLength.raw;\n    this._minInputLength = this._context.parameters.minInputLength.raw == undefined ? undefined : this._context.parameters.minInputLength.raw; // Set the max character length of the input field to fixed character width if selected, for example:\n    // if \"2 character width\" is chosen, set the max character length to 2, or use the value of the \n    // \"Max input length\" setting if one has been defined, otherwise return undefined.\n\n    var maxInputLengthValue = this._characterWidth2 ? 2 : this._characterWidth3 ? 3 : this._characterWidth4 ? 4 : this._characterWidth5 ? 5 : this._characterWidth10 ? 10 : this._characterWidth20 ? 20 : this._maxInputLength;\n    var minInputLengthValue = this._minInputLength;\n    var inputText = this._textInput.value; // If both a maximum and minimum length (either automatically or user entered) have been specified, then check\n    // that the maximum length (either specified automatically or user entered) is greater than the minimum length.\n    // Return false if there is not both a maximum and minimum, or if the maximum is not greater than the minimum, otherwise true.\n\n    var checkMaxGtMin = maxInputLengthValue != undefined && minInputLengthValue != undefined ? maxInputLengthValue > minInputLengthValue ? true : false : false;\n    var isInputBetween = checkMaxGtMin ? inputText.length >= maxInputLengthValue && inputText.length <= minInputLengthValue ? true : false : false;\n\n    if (isInputBetween) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be between \" + minInputLengthValue + \" and \" + maxInputLengthValue + \" characters\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !isInputBetween;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the the input uses characters that are not allowed and you know what the characters are, For example,\r\n   * ‘Town or city must not include è and £’. Characters allowed can be determined from selections made via the Control Manifest.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfSpecifiedCharactersAreNotAllowed = function (fieldIdentifier) {\n    var _a;\n\n    this._onlyAllowStandardChars = !this._context.parameters.specialCharacters.raw ? false : this._context.parameters.specialCharacters.raw == \"1\";\n    this._specifyCharsNotAllowed = this._context.parameters.specifyCharsNotAllowed.raw == undefined ? undefined : this._context.parameters.specifyCharsNotAllowed.raw; // Check onlyAllowStandardChars is not selected and specifyCharsNotAllowed is undefined and if neither have been entered,\n    // then return false. If this statement returns true, then check whether a value has been entered for specifyCharsNotAllowed.\n    // If that is the case, then default to validating the input based on those criteria, otherwise return true and enable this method.\n\n    var charValidationRqrd = !this._onlyAllowStandardChars && this._specifyCharsNotAllowed == undefined ? false : this._specifyCharsNotAllowed != undefined ? true : false;\n\n    if (!charValidationRqrd) {\n      return true;\n    }\n\n    var specifyCharsNotAllowedRgx = (_a = this._specifyCharsNotAllowed) === null || _a === void 0 ? void 0 : _a.replace(\", \", \"\");\n    var charsNotAllowed = new RegExp(\"[\" + specifyCharsNotAllowedRgx + \"]\");\n    var inputText = this._textInput.value;\n    var mustOnlyIncludeCharsAllowed = inputText.match(charsNotAllowed) ? true : false;\n    var specifyCharsNotAllowed = this._specifyCharsNotAllowed;\n\n    if (mustOnlyIncludeCharsAllowed) {\n      var errorMessage = this.firstCharUpperCase(fieldIdentifier) + \" must not include \";\n      var errorFieldDescriptors = [];\n      errorFieldDescriptors.push(specifyCharsNotAllowed);\n      errorMessage += errorFieldDescriptors.join(', ');\n      var lastIndexOfCommaSpace = errorMessage.lastIndexOf(', ');\n      errorMessage = errorMessage.slice(0, lastIndexOfCommaSpace) + errorMessage.slice(lastIndexOfCommaSpace).replace(', ', ' or ');\n      this.ShowError(errorMessage);\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !mustOnlyIncludeCharsAllowed;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the the input uses characters that are not allowed from a standard selection. For example,\r\n   * ‘Full name must only include letters a to z, hyphens, spaces and apostrophes’.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfOnlyStandardCharactersAreAllowed = function (fieldIdentifier) {\n    this._onlyAllowStandardChars = !this._context.parameters.specialCharacters.raw ? false : this._context.parameters.specialCharacters.raw == \"1\";\n    this._specifyCharsNotAllowed = this._context.parameters.specifyCharsNotAllowed.raw == undefined ? undefined : this._context.parameters.specifyCharsNotAllowed.raw; // Check onlyAllowStandardChars is not selected and specifyCharsNotAllowed is undefined and if neither have been entered,\n    // then return false. If this statement returns true, then check whether a value has been entered for specifyCharsNotAllowed.\n    // If that is the case, then default to validating the input based on those criteria, otherwise return true and enable this method.\n\n    var charValidationRqrd = !this._onlyAllowStandardChars && this._specifyCharsNotAllowed == undefined ? false : this._specifyCharsNotAllowed != undefined ? false : true;\n\n    if (!charValidationRqrd) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var charsAllowed = /^[a-zA-Z-' ]+$/;\n    var mustOnlyIncludeCharsAllowed = !inputText.match(charsAllowed);\n\n    if (mustOnlyIncludeCharsAllowed) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must only include letters a to z, hyphens, spaces and apostrophes\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !mustOnlyIncludeCharsAllowed;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input is not a whole number. Say '[whatever it is] must be a whole number',\r\n   * for example, 'Hours worked in a week must be a whole number'.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsNotAWholeNumber = function (fieldIdentifier) {\n    this._wholeNumber = !this._context.parameters.inputType.raw ? false : this._context.parameters.inputType.raw == \"1\";\n    this._prefix = this._context.parameters.prefix.raw = \"£\";\n\n    if (!this._wholeNumber) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var numbers = /^[0-9]+$/;\n    var mustBeAWholeNumber = !inputText.match(numbers);\n\n    if (mustBeAWholeNumber) {\n      // If a prefix is selected and it's value equals \"£\", validate input based on guidance from GOVUK Design System:\n      // \"If the input is amount of money that must not have decimals\". https://design-system.service.gov.uk/components/text-input/\n      // Otherwise, evaluate as per the guidance at the start of this method.\n      if (!this._prefix) {\n        this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be a whole number\");\n        this._errorFocusId = this._textInputId;\n      } else {\n        this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be a whole number and not include pence, like 123 or 156\");\n        this._errorFocusId = this._textInputId;\n      }\n    }\n\n    return !mustBeAWholeNumber;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input is not a number, including decimals. Say '[whatever it is] must be a number',\r\n   * for example, 'Hours worked in a week must be a number'. If the input requires a decimal, use a decimal in the example.\r\n   * If the input allows both whole numbers and decimals, use both in the example.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsNotANumber = function (fieldIdentifier) {\n    this._mustBeANumber = !this._context.parameters.inputType.raw ? false : this._context.parameters.inputType.raw == \"2\";\n    this._prefix = this._context.parameters.prefix.raw = \"£\";\n\n    if (!this._mustBeANumber) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var decimals = /^[.0-9]+$/;\n    var mustBeANumber = !inputText.match(decimals);\n\n    if (mustBeANumber) {\n      // If a prefix is selected and it's value equals \"£\", validate input based on guidance from GOVUK Design System:\n      // \"If the input is amount of money that needs decimals\". https://design-system.service.gov.uk/components/text-input/\n      // Otherwise, evaluate as per the guidance at the start of this method.\n      if (!this._prefix) {\n        this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be a number\");\n        this._errorFocusId = this._textInputId;\n      } else {\n        this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be a number and include pence, like 123.45 or 156.00\");\n        this._errorFocusId = this._textInputId;\n      }\n    }\n\n    return !mustBeANumber;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the input must be between 2 numbers. Say ‘[whatever it is] must be between [lowest] and [highest]’.\r\n   * For example, ‘Hours worked a week must be between 16 and 99’. Set the lower and higher bounds via the Control Manifest.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputMustBeBetweenTwoNumbers = function (fieldIdentifier) {\n    this._lowest = this._context.parameters.lowest.raw == undefined ? undefined : this._context.parameters.lowest.raw;\n    this._highest = this._context.parameters.highest.raw == undefined ? undefined : this._context.parameters.highest.raw;\n    var lowest = this._lowest;\n    var highest = this._highest;\n    var inputText = this._textInput.value; // Check whether a value has been provided for both the lower and higher bounds, return true otherwise false.\n\n    var useMustBeBetween = lowest != undefined && highest != undefined ? true : false; // If a value has been provided for both the lower and higher bounds, then check that input falls between those values.\n\n    var mustBeBetween = useMustBeBetween ? parseFloat(inputText) >= parseFloat(lowest) && parseFloat(inputText) <= parseFloat(highest) ? false : true : false;\n\n    if (mustBeBetween) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be between \" + lowest + \" and \" + highest);\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !mustBeBetween;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the number is too low. Say ‘[whatever it is] must be [lowest] or more’.\r\n   * For example, ‘Hours worked a week must be 16 or more’. Set the lower bound via the Control Manifest.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsTooLow = function (fieldIdentifier) {\n    this._lowest = this._context.parameters.lowest.raw == undefined ? undefined : this._context.parameters.lowest.raw;\n    this._highest = this._context.parameters.highest.raw == undefined ? undefined : this._context.parameters.highest.raw;\n    var lowest = this._lowest;\n    var highest = this._highest; // Check whether a value has been provided for both the lower and higher bounds, return true otherwise false.\n\n    var useMustBeBetween = lowest != undefined && highest != undefined ? true : false;\n\n    if (!useMustBeBetween) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var inputIsTooLow = !useMustBeBetween ? lowest != undefined ? parseFloat(inputText) <= parseFloat(lowest) : true : false;\n\n    if (inputIsTooLow) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be \" + lowest + \" or more\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !inputIsTooLow;\n  };\n  /**\r\n   * ERROR VALIDATION:\r\n   * Handle if the number is too high. Say ‘[whatever it is] must be [highest] or fewer'.\r\n   * For example, ‘Hours worked a week must be 99 or fewer'. Set the upper bound via the Control Manifest.\r\n   * @param fieldIdentifier {string} Indentify the name of the field to display in the error messages\r\n   * @returns {boolean} Return true if nothing has been entered, otherwise false;\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.handleIfInputIsTooHigh = function (fieldIdentifier) {\n    this._lowest = this._context.parameters.lowest.raw == undefined ? undefined : this._context.parameters.lowest.raw;\n    this._highest = this._context.parameters.highest.raw == undefined ? undefined : this._context.parameters.highest.raw;\n    var lowest = this._lowest;\n    var highest = this._highest; // Check whether a value has been provided for both the lower and higher bounds, return true otherwise false.\n\n    var useMustBeBetween = lowest != undefined && highest != undefined ? true : false;\n\n    if (!useMustBeBetween) {\n      return true;\n    }\n\n    var inputText = this._textInput.value;\n    var inputIsTooHigh = !useMustBeBetween ? highest != undefined ? parseFloat(inputText) >= parseFloat(highest) : true : false;\n\n    if (inputIsTooHigh) {\n      this.ShowError(this.firstCharUpperCase(fieldIdentifier) + \" must be \" + highest + \" or fewer\");\n      this._errorFocusId = this._textInputId;\n    }\n\n    return !inputIsTooHigh;\n  };\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * Following guidance from GOV UK Design System: \"if you're asking more than one question on the page, do not set the\r\n   * contents of <label> as the page heading.\" https://design-system.service.gov.uk/components/text-input/\r\n   * @param title {string} What information do you intend to capture?\r\n   * @returns {any} Returns control title only if true, or title plus page heading config if false.\r\n   * @private\r\n   */\n\n\n  TextInput.prototype.disablePageHeading = function (_title) {\n    this._disablePageHeadingIsTrue = this._context.parameters.disablePageHeading.raw == \"1\";\n\n    if (!this._disablePageHeadingIsTrue) {\n      this._disablePageHeading = {\n        text: this._title,\n        classes: \"govuk-label--l\",\n        isPageHeading: true\n      };\n    } else {\n      this._disablePageHeading = {\n        text: this._title\n      };\n    }\n  };\n\n  ;\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * Configure the size of the text input box based on the selected option for \"Fixed and fluid width inputs\".\r\n   * If no option is selected, the default configuration is \"full width\", as dictated by the GOVUK Design System:\r\n   * \"By default, the width of text inputs is fluid and will fit the full width of the container they are placed into.\"\r\n   * https://design-system.service.gov.uk/components/text-input/\r\n   */\n\n  TextInput.prototype.fixedAndFluidWidthInputs = function () {\n    // selected options for Control Manifest: \"Fixed and fluid width inputs\"\n    this._characterWidth2 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"1\";\n    this._characterWidth3 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"2\";\n    this._characterWidth4 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"3\";\n    this._characterWidth5 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"4\";\n    this._characterWidth10 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"5\";\n    this._characterWidth20 = this._context.parameters.fixedAndFluidWidthInputs.raw == \"6\";\n    this._fullWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"7\";\n    this._threeQuartersWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"8\";\n    this._twoThirdsWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"9\";\n    this._oneHalfWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"10\";\n    this._oneThirdWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"11\";\n    this._oneQuarterWidth = this._context.parameters.fixedAndFluidWidthInputs.raw == \"12\"; // 2 character width\n\n    if (this._characterWidth2) {\n      this._fixedAndFluidWidthInputsClass = \"govuk-input--width-2\";\n    } // 3 character width\n    else if (this._characterWidth3) {\n        this._fixedAndFluidWidthInputsClass = \"govuk-input--width-3\";\n      } // 4 character width\n      else if (this._characterWidth4) {\n          this._fixedAndFluidWidthInputsClass = \"govuk-input--width-4\";\n        } // 5 character width\n        else if (this._characterWidth5) {\n            this._fixedAndFluidWidthInputsClass = \"govuk-input--width-5\";\n          } // 10 character width\n          else if (this._characterWidth10) {\n              this._fixedAndFluidWidthInputsClass = \"govuk-input--width-10\";\n            } // 20 character width\n            else if (this._characterWidth20) {\n                this._fixedAndFluidWidthInputsClass = \"govuk-input--width-20\";\n              } // full width\n              else if (this._fullWidth) {\n                  this._fixedAndFluidWidthInputsClass = \"govuk-!-width-full\";\n                } // three quarters width\n                else if (this._threeQuartersWidth) {\n                    this._fixedAndFluidWidthInputsClass = \"govuk-!-width-three-quarters\";\n                  } // two thirds width\n                  else if (this._twoThirdsWidth) {\n                      this._fixedAndFluidWidthInputsClass = \"govuk-!-width-two-thirds\";\n                    } // one half width\n                    else if (this._oneHalfWidth) {\n                        this._fixedAndFluidWidthInputsClass = \"govuk-!-width-one-half\";\n                      } // one third width\n                      else if (this._oneThirdWidth) {\n                          this._fixedAndFluidWidthInputsClass = \"govuk-!-width-one-third\";\n                        } // one quarter width\n                        else if (this._oneQuarterWidth) {\n                            this._fixedAndFluidWidthInputsClass = \"govuk-!-width-one-quarter\";\n                          } // default full width: \"By default, the width of text inputs is fluid and will fit the full width \n                          // of the container they are placed into.\" https://design-system.service.gov.uk/components/text-input/\n                          else {\n                              this._fixedAndFluidWidthInputsClass = \"govuk-!-width-full\";\n                            }\n  };\n\n  ;\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * If you’re asking the user to enter a whole number and you want to bring up the numeric keypad on a mobile device,\r\n   * set the inputmode attribute to numeric and the pattern attribute to [0-9]*.\r\n   * If you’re asking the user to enter a number that might include decimal places, use input type=\"text\" without inputmode or pattern attributes.\r\n   * Do not set the inputmode attribute to decimal as it causes some devices to bring up a keypad without a key for the decimal separator.\r\n   * https://design-system.service.gov.uk/components/text-input/\r\n   *\r\n   */\n\n  TextInput.prototype.inputType = function () {\n    // selected option for Control Manifest: \"Input Type\"\n    this._wholeNumber = this._context.parameters.inputType.raw == \"1\";\n\n    if (this._wholeNumber) {\n      this._inputmode = \"numeric\", this._pattern = \"[0-9]*\";\n    } // Set the default values to \"\", unless the whole number option is selected in the configuration\t\t\t\n    else {\n        this._inputmode = \"\";\n        this._pattern = \"\";\n      }\n  };\n\n  ;\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * Following guidance from the GOVUK Design System, there are occasions where spellcheck should be disabled:\r\n   * \"If you are asking users for information which is not appropriate to spellcheck, like a reference number, name, email address\r\n   * or National Insurance number, disable the spellcheck.\"\r\n   * https://design-system.service.gov.uk/components/text-input/\r\n   * By default, the component will have spellcheck enabled.\r\n   */\n\n  TextInput.prototype.disableSpellcheck = function () {\n    this._disableSpellcheck = this._context.parameters.disableSpellcheck.raw == \"1\";\n\n    if (this._disableSpellcheck) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  ;\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * Use prefixes and suffixes to help users enter things like currencies and measurements.\r\n   * https://design-system.service.gov.uk/components/text-input/\r\n   * @returns {string} Returns the prefix or suffix entered in the form configuration and renders in the control.\r\n   */\n\n  TextInput.prototype.prefixSuffix = function () {\n    this._prefix = this._context.parameters.prefix.raw;\n    this._suffix = this._context.parameters.suffix.raw; // prefix\n\n    if (this._prefix !== undefined) {\n      return this._prefix;\n    } // suffix\n\n\n    if (this._suffix !== undefined) {\n      return this._suffix;\n    }\n  };\n\n  ;\n  /**\r\n   * COMPONENT CONFIGURATION:\r\n   * Following guidance from GOV UK Design System: \"Use the autocomplete attribute on text inputs to help users complete forms more quickly.\r\n   * This lets you specify an input’s purpose so browsers can autofill the information on a user’s behalf if they’ve entered it previously.\r\n   * For example, to enable autofill on a postcode field, set the autocomplete attribute to postal-code. https://design-system.service.gov.uk/components/text-input/\r\n   * See guidance on input purposes: https://www.w3.org/TR/WCAG21/#input-purposes\r\n   * @returns {any} Adds autocomplete attribute to control render true.\r\n   * @private\r\n   */\n\n  TextInput.prototype.autocomplete = function () {\n    this._autocompleteEnabled = this._context.parameters.autocomplete.raw == undefined ? undefined : this._context.parameters.autocomplete.raw;\n\n    if (this._autocompleteEnabled != undefined) {\n      return this._autocomplete = this._context.parameters.autocomplete.raw;\n    }\n  };\n\n  ;\n  /**\r\n   * Called when any value in the property bag has changed. This includes field values, data-sets, global values such as container height and width, offline status, control metadata values such as label, visible, etc.\r\n   * @param context The entire property bag available to control via Context Object; It contains values as set up by the customizer mapped to names defined in the manifest, as well as utility functions\r\n   */\n\n  TextInput.prototype.updateView = function (context) {\n    // storing the latest context from the control.\n    this._value = context.parameters.textInput.raw;\n    this._context = context;\n\n    if (this._value) {\n      this._textInput.value = this._value; // Field has been set, start validation following any changes\n\n      this._enableValidation = true;\n    }\n  };\n  /**\r\n   * It is called by the framework prior to a control receiving new data.\r\n   * @returns an object based on nomenclature defined in manifest, expecting object[s] for property marked as “bound” or “output”\r\n   */\n\n\n  TextInput.prototype.getOutputs = function () {\n    // Send the currently selected options back to the ComponentFramework\n    return {\n      textInput: this._value === null ? undefined : this._value\n    };\n  };\n  /**\r\n   * Called when the control is to be removed from the DOM tree. Controls should use this call for cleanup.\r\n   * i.e. cancelling any pending remote calls, removing listeners, etc.\r\n   */\n\n\n  TextInput.prototype.destroy = function () {// no-op: method not leveraged by this example custom control\n  };\n\n  TextInput.prototype.registerPCFComponent = function (currentInstance) {\n    var globalScope = window;\n\n    if (!globalScope.HSL) {\n      globalScope.HSL = {};\n    }\n\n    if (!globalScope.HSL.PCFRegistrar) {\n      globalScope.HSL.PCFRegistrar = {};\n    }\n\n    globalScope.HSL.PCFRegistrar[this._uniqueIdentifier] = currentInstance;\n  };\n\n  ;\n\n  TextInput.prototype.registerNunjucks = function () {\n    var globalScope = window;\n    globalScope.nunjucks = Nunjucks; //reconfigure template render to understand relative paths\n\n    globalScope.nunjucks.Environment.prototype.resolveTemplate = function resolveTemplate(loader, parentName, filename) {\n      var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;\n      return isRelative && loader.resolve ? filename.replace('..', '').replace('./', parentName.substring(0, parentName.lastIndexOf(\"/\")) + '/') : filename;\n    };\n  };\n\n  return TextInput;\n}();\n\nexports.TextInput = TextInput;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./TextInput/index.ts?");

/***/ }),

/***/ "./node_modules/govuk-frontend/govuk/all.js":
/*!**************************************************!*\
  !*** ./node_modules/govuk-frontend/govuk/all.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {\n   true ? factory(exports) : undefined;\n})(this, function (exports) {\n  'use strict';\n  /**\n   * TODO: Ideally this would be a NodeList.prototype.forEach polyfill\n   * This seems to fail in IE8, requires more investigation.\n   * See: https://github.com/imagitama/nodelist-foreach-polyfill\n   */\n\n  function nodeListForEach(nodes, callback) {\n    if (window.NodeList.prototype.forEach) {\n      return nodes.forEach(callback);\n    }\n\n    for (var i = 0; i < nodes.length; i++) {\n      callback.call(window, nodes[i], i, nodes);\n    }\n  } // Used to generate a unique string, allows multiple instances of the component without\n  // Them conflicting with each other.\n  // https://stackoverflow.com/a/8809472\n\n\n  function generateUniqueID() {\n    var d = new Date().getTime();\n\n    if (typeof window.performance !== 'undefined' && typeof window.performance.now === 'function') {\n      d += window.performance.now(); // use high-precision timer if available\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  }\n\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Object/defineProperty/detect.js\n    var detect = // In IE8, defineProperty could only act on DOM elements, so full support\n    // for the feature requires the ability to set a property on an arbitrary object\n    'defineProperty' in Object && function () {\n      try {\n        var a = {};\n        Object.defineProperty(a, 'test', {\n          value: 42\n        });\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }();\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Object.defineProperty&flags=always\n\n    (function (nativeDefineProperty) {\n      var supportsAccessors = Object.prototype.hasOwnProperty('__defineGetter__');\n      var ERR_ACCESSORS_NOT_SUPPORTED = 'Getters & setters cannot be defined on this javascript engine';\n      var ERR_VALUE_ACCESSORS = 'A property cannot both have accessors and be writable or have a value';\n\n      Object.defineProperty = function defineProperty(object, property, descriptor) {\n        // Where native support exists, assume it\n        if (nativeDefineProperty && (object === window || object === document || object === Element.prototype || object instanceof Element)) {\n          return nativeDefineProperty(object, property, descriptor);\n        }\n\n        if (object === null || !(object instanceof Object || typeof object === 'object')) {\n          throw new TypeError('Object.defineProperty called on non-object');\n        }\n\n        if (!(descriptor instanceof Object)) {\n          throw new TypeError('Property description must be an object');\n        }\n\n        var propertyString = String(property);\n        var hasValueOrWritable = 'value' in descriptor || 'writable' in descriptor;\n        var getterType = 'get' in descriptor && typeof descriptor.get;\n        var setterType = 'set' in descriptor && typeof descriptor.set; // handle descriptor.get\n\n        if (getterType) {\n          if (getterType !== 'function') {\n            throw new TypeError('Getter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineGetter__.call(object, propertyString, descriptor.get);\n        } else {\n          object[propertyString] = descriptor.value;\n        } // handle descriptor.set\n\n\n        if (setterType) {\n          if (setterType !== 'function') {\n            throw new TypeError('Setter must be a function');\n          }\n\n          if (!supportsAccessors) {\n            throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\n          }\n\n          if (hasValueOrWritable) {\n            throw new TypeError(ERR_VALUE_ACCESSORS);\n          }\n\n          Object.__defineSetter__.call(object, propertyString, descriptor.set);\n        } // OK to define value unconditionally - if a getter has been specified as well, an error would be thrown above\n\n\n        if ('value' in descriptor) {\n          object[propertyString] = descriptor.value;\n        }\n\n        return object;\n      };\n    })(Object.defineProperty);\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Function/prototype/bind/detect.js\n    var detect = ('bind' in Function.prototype);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Function.prototype.bind&flags=always\n\n    Object.defineProperty(Function.prototype, 'bind', {\n      value: function bind(that) {\n        // .length is 1\n        // add necessary es5-shim utilities\n        var $Array = Array;\n        var $Object = Object;\n        var ObjectPrototype = $Object.prototype;\n        var ArrayPrototype = $Array.prototype;\n\n        var Empty = function Empty() {};\n\n        var to_string = ObjectPrototype.toString;\n        var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n        var isCallable;\n        /* inlined from https://npmjs.com/is-callable */\n\n        var fnToStr = Function.prototype.toString,\n            tryFunctionObject = function tryFunctionObject(value) {\n          try {\n            fnToStr.call(value);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        },\n            fnClass = '[object Function]',\n            genClass = '[object GeneratorFunction]';\n\n        isCallable = function isCallable(value) {\n          if (typeof value !== 'function') {\n            return false;\n          }\n\n          if (hasToStringTag) {\n            return tryFunctionObject(value);\n          }\n\n          var strClass = to_string.call(value);\n          return strClass === fnClass || strClass === genClass;\n        };\n\n        var array_slice = ArrayPrototype.slice;\n        var array_concat = ArrayPrototype.concat;\n        var array_push = ArrayPrototype.push;\n        var max = Math.max; // /add necessary es5-shim utilities\n        // 1. Let Target be the this value.\n\n        var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.\n\n        if (!isCallable(target)) {\n          throw new TypeError('Function.prototype.bind called on incompatible ' + target);\n        } // 3. Let A be a new (possibly empty) internal list of all of the\n        //   argument values provided after thisArg (arg1, arg2 etc), in order.\n        // XXX slicedArgs will stand in for \"A\" if used\n\n\n        var args = array_slice.call(arguments, 1); // for normal call\n        // 4. Let F be a new native ECMAScript object.\n        // 11. Set the [[Prototype]] internal property of F to the standard\n        //   built-in Function prototype object as specified in 15.3.3.1.\n        // 12. Set the [[Call]] internal property of F as described in\n        //   15.3.4.5.1.\n        // 13. Set the [[Construct]] internal property of F as described in\n        //   15.3.4.5.2.\n        // 14. Set the [[HasInstance]] internal property of F as described in\n        //   15.3.4.5.3.\n\n        var bound;\n\n        var binder = function binder() {\n          if (this instanceof bound) {\n            // 15.3.4.5.2 [[Construct]]\n            // When the [[Construct]] internal method of a function object,\n            // F that was created using the bind function is called with a\n            // list of arguments ExtraArgs, the following steps are taken:\n            // 1. Let target be the value of F's [[TargetFunction]]\n            //   internal property.\n            // 2. If target has no [[Construct]] internal method, a\n            //   TypeError exception is thrown.\n            // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Construct]] internal\n            //   method of target providing args as the arguments.\n            var result = target.apply(this, array_concat.call(args, array_slice.call(arguments)));\n\n            if ($Object(result) === result) {\n              return result;\n            }\n\n            return this;\n          } else {\n            // 15.3.4.5.1 [[Call]]\n            // When the [[Call]] internal method of a function object, F,\n            // which was created using the bind function is called with a\n            // this value and a list of arguments ExtraArgs, the following\n            // steps are taken:\n            // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\n            //   property.\n            // 2. Let boundThis be the value of F's [[BoundThis]] internal\n            //   property.\n            // 3. Let target be the value of F's [[TargetFunction]] internal\n            //   property.\n            // 4. Let args be a new list containing the same values as the\n            //   list boundArgs in the same order followed by the same\n            //   values as the list ExtraArgs in the same order.\n            // 5. Return the result of calling the [[Call]] internal method\n            //   of target providing boundThis as the this value and\n            //   providing args as the arguments.\n            // equiv: target.call(this, ...boundArgs, ...args)\n            return target.apply(that, array_concat.call(args, array_slice.call(arguments)));\n          }\n        }; // 15. If the [[Class]] internal property of Target is \"Function\", then\n        //     a. Let L be the length property of Target minus the length of A.\n        //     b. Set the length own property of F to either 0 or L, whichever is\n        //       larger.\n        // 16. Else set the length own property of F to 0.\n\n\n        var boundLength = max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values\n        //   specified in 15.3.5.1.\n\n        var boundArgs = [];\n\n        for (var i = 0; i < boundLength; i++) {\n          array_push.call(boundArgs, '$' + i);\n        } // XXX Build a dynamic function with desired amount of arguments is the only\n        // way to set the length property of a function.\n        // In environments where Content Security Policies enabled (Chrome extensions,\n        // for ex.) all use of eval or Function costructor throws an exception.\n        // However in all of these environments Function.prototype.bind exists\n        // and so this code will never be executed.\n\n\n        bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\n\n        if (target.prototype) {\n          Empty.prototype = target.prototype;\n          bound.prototype = new Empty(); // Clean up dangling references.\n\n          Empty.prototype = null;\n        } // TODO\n        // 18. Set the [[Extensible]] internal property of F to true.\n        // TODO\n        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\n        // 20. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\n        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\n        //   false.\n        // 21. Call the [[DefineOwnProperty]] internal method of F with\n        //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\n        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\n        //   and false.\n        // TODO\n        // NOTE Function objects created using Function.prototype.bind do not\n        // have a prototype property or the [[Code]], [[FormalParameters]], and\n        // [[Scope]] internal properties.\n        // XXX can't delete prototype in pure-js.\n        // 22. Return F.\n\n\n        return bound;\n      }\n    });\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/detect.js\n    var detect = 'DOMTokenList' in this && function (x) {\n      return 'classList' in x ? !x.classList.toggle('x', false) && !x.className : true;\n    }(document.createElement('x'));\n\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/polyfill.js\n\n    (function (global) {\n      var nativeImpl = \"DOMTokenList\" in global && global.DOMTokenList;\n\n      if (!nativeImpl || !!document.createElementNS && !!document.createElementNS('http://www.w3.org/2000/svg', 'svg') && !(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").classList instanceof DOMTokenList)) {\n        global.DOMTokenList = function () {\n          // eslint-disable-line no-unused-vars\n          var dpSupport = true;\n\n          var defineGetter = function defineGetter(object, name, fn, configurable) {\n            if (Object.defineProperty) Object.defineProperty(object, name, {\n              configurable: false === dpSupport ? true : !!configurable,\n              get: fn\n            });else object.__defineGetter__(name, fn);\n          };\n          /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\n\n\n          try {\n            defineGetter({}, \"support\");\n          } catch (e) {\n            dpSupport = false;\n          }\n\n          var _DOMTokenList = function _DOMTokenList(el, prop) {\n            var that = this;\n            var tokens = [];\n            var tokenMap = {};\n            var length = 0;\n            var maxLength = 0;\n\n            var addIndexGetter = function addIndexGetter(i) {\n              defineGetter(that, i, function () {\n                preop();\n                return tokens[i];\n              }, false);\n            };\n\n            var reindex = function reindex() {\n              /** Define getter functions for array-like access to the tokenList's contents. */\n              if (length >= maxLength) for (; maxLength < length; ++maxLength) {\n                addIndexGetter(maxLength);\n              }\n            };\n            /** Helper function called at the start of each class method. Internal use only. */\n\n\n            var preop = function preop() {\n              var error;\n              var i;\n              var args = arguments;\n              var rSpace = /\\s+/;\n              /** Validate the token/s passed to an instance method, if any. */\n\n              if (args.length) for (i = 0; i < args.length; ++i) if (rSpace.test(args[i])) {\n                error = new SyntaxError('String \"' + args[i] + '\" ' + \"contains\" + ' an invalid character');\n                error.code = 5;\n                error.name = \"InvalidCharacterError\";\n                throw error;\n              }\n              /** Split the new value apart by whitespace*/\n\n              if (typeof el[prop] === \"object\") {\n                tokens = (\"\" + el[prop].baseVal).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\n              } else {\n                tokens = (\"\" + el[prop]).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\n              }\n              /** Avoid treating blank strings as single-item token lists */\n\n\n              if (\"\" === tokens[0]) tokens = [];\n              /** Repopulate the internal token lists */\n\n              tokenMap = {};\n\n              for (i = 0; i < tokens.length; ++i) tokenMap[tokens[i]] = true;\n\n              length = tokens.length;\n              reindex();\n            };\n            /** Populate our internal token list if the targeted attribute of the subject element isn't empty. */\n\n\n            preop();\n            /** Return the number of tokens in the underlying string. Read-only. */\n\n            defineGetter(that, \"length\", function () {\n              preop();\n              return length;\n            });\n            /** Override the default toString/toLocaleString methods to return a space-delimited list of tokens when typecast. */\n\n            that.toLocaleString = that.toString = function () {\n              preop();\n              return tokens.join(\" \");\n            };\n\n            that.item = function (idx) {\n              preop();\n              return tokens[idx];\n            };\n\n            that.contains = function (token) {\n              preop();\n              return !!tokenMap[token];\n            };\n\n            that.add = function () {\n              preop.apply(that, args = arguments);\n\n              for (var args, token, i = 0, l = args.length; i < l; ++i) {\n                token = args[i];\n\n                if (!tokenMap[token]) {\n                  tokens.push(token);\n                  tokenMap[token] = true;\n                }\n              }\n              /** Update the targeted attribute of the attached element if the token list's changed. */\n\n\n              if (length !== tokens.length) {\n                length = tokens.length >>> 0;\n\n                if (typeof el[prop] === \"object\") {\n                  el[prop].baseVal = tokens.join(\" \");\n                } else {\n                  el[prop] = tokens.join(\" \");\n                }\n\n                reindex();\n              }\n            };\n\n            that.remove = function () {\n              preop.apply(that, args = arguments);\n              /** Build a hash of token names to compare against when recollecting our token list. */\n\n              for (var args, ignore = {}, i = 0, t = []; i < args.length; ++i) {\n                ignore[args[i]] = true;\n                delete tokenMap[args[i]];\n              }\n              /** Run through our tokens list and reassign only those that aren't defined in the hash declared above. */\n\n\n              for (i = 0; i < tokens.length; ++i) if (!ignore[tokens[i]]) t.push(tokens[i]);\n\n              tokens = t;\n              length = t.length >>> 0;\n              /** Update the targeted attribute of the attached element. */\n\n              if (typeof el[prop] === \"object\") {\n                el[prop].baseVal = tokens.join(\" \");\n              } else {\n                el[prop] = tokens.join(\" \");\n              }\n\n              reindex();\n            };\n\n            that.toggle = function (token, force) {\n              preop.apply(that, [token]);\n              /** Token state's being forced. */\n\n              if (undefined !== force) {\n                if (force) {\n                  that.add(token);\n                  return true;\n                } else {\n                  that.remove(token);\n                  return false;\n                }\n              }\n              /** Token already exists in tokenList. Remove it, and return FALSE. */\n\n\n              if (tokenMap[token]) {\n                that.remove(token);\n                return false;\n              }\n              /** Otherwise, add the token and return TRUE. */\n\n\n              that.add(token);\n              return true;\n            };\n\n            return that;\n          };\n\n          return _DOMTokenList;\n        }();\n      } // Add second argument to native DOMTokenList.toggle() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.toggle('x', false);\n        if (!e.classList.contains('x')) return;\n\n        e.classList.constructor.prototype.toggle = function toggle(token\n        /*, force*/\n        ) {\n          var force = arguments[1];\n\n          if (force === undefined) {\n            var add = !this.contains(token);\n            this[add ? 'add' : 'remove'](token);\n            return add;\n          }\n\n          force = !!force;\n          this[force ? 'add' : 'remove'](token);\n          return force;\n        };\n      })(); // Add multiple arguments to native DOMTokenList.add() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.add('a', 'b');\n        if (e.classList.contains('b')) return;\n        var native = e.classList.constructor.prototype.add;\n\n        e.classList.constructor.prototype.add = function () {\n          var args = arguments;\n          var l = arguments.length;\n\n          for (var i = 0; i < l; i++) {\n            native.call(this, args[i]);\n          }\n        };\n      })(); // Add multiple arguments to native DOMTokenList.remove() if necessary\n\n\n      (function () {\n        var e = document.createElement('span');\n        if (!('classList' in e)) return;\n        e.classList.add('a');\n        e.classList.add('b');\n        e.classList.remove('a', 'b');\n        if (!e.classList.contains('b')) return;\n        var native = e.classList.constructor.prototype.remove;\n\n        e.classList.constructor.prototype.remove = function () {\n          var args = arguments;\n          var l = arguments.length;\n\n          for (var i = 0; i < l; i++) {\n            native.call(this, args[i]);\n          }\n        };\n      })();\n    })(this);\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Document/detect.js\n    var detect = (\"Document\" in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Document&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      if (this.HTMLDocument) {\n        // IE8\n        // HTMLDocument is an extension of Document.  If the browser has HTMLDocument but not Document, the former will suffice as an alias for the latter.\n        this.Document = this.HTMLDocument;\n      } else {\n        // Create an empty function to act as the missing constructor for the document object, attach the document object as its prototype.  The function needs to be anonymous else it is hoisted and causes the feature detect to prematurely pass, preventing the assignments below being made.\n        this.Document = this.HTMLDocument = document.constructor = new Function('return function Document() {}')();\n        this.Document.prototype = document;\n      }\n    }\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Element/detect.js\n    var detect = 'Element' in this && 'HTMLElement' in this;\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element&flags=always\n\n    (function () {\n      // IE8\n      if (window.Element && !window.HTMLElement) {\n        window.HTMLElement = window.Element;\n        return;\n      } // create Element constructor\n\n\n      window.Element = window.HTMLElement = new Function('return function Element() {}')(); // generate sandboxed iframe\n\n      var vbody = document.appendChild(document.createElement('body'));\n      var frame = vbody.appendChild(document.createElement('iframe')); // use sandboxed iframe to replicate Element functionality\n\n      var frameDocument = frame.contentWindow.document;\n      var prototype = Element.prototype = frameDocument.appendChild(frameDocument.createElement('*'));\n      var cache = {}; // polyfill Element.prototype on an element\n\n      var shiv = function shiv(element, deep) {\n        var childNodes = element.childNodes || [],\n            index = -1,\n            key,\n            value,\n            childNode;\n\n        if (element.nodeType === 1 && element.constructor !== Element) {\n          element.constructor = Element;\n\n          for (key in cache) {\n            value = cache[key];\n            element[key] = value;\n          }\n        }\n\n        while (childNode = deep && childNodes[++index]) {\n          shiv(childNode, deep);\n        }\n\n        return element;\n      };\n\n      var elements = document.getElementsByTagName('*');\n      var nativeCreateElement = document.createElement;\n      var interval;\n      var loopLimit = 100;\n      prototype.attachEvent('onpropertychange', function (event) {\n        var propertyName = event.propertyName,\n            nonValue = !cache.hasOwnProperty(propertyName),\n            newValue = prototype[propertyName],\n            oldValue = cache[propertyName],\n            index = -1,\n            element;\n\n        while (element = elements[++index]) {\n          if (element.nodeType === 1) {\n            if (nonValue || element[propertyName] === oldValue) {\n              element[propertyName] = newValue;\n            }\n          }\n        }\n\n        cache[propertyName] = newValue;\n      });\n      prototype.constructor = Element;\n\n      if (!prototype.hasAttribute) {\n        // <Element>.hasAttribute\n        prototype.hasAttribute = function hasAttribute(name) {\n          return this.getAttribute(name) !== null;\n        };\n      } // Apply Element prototype to the pre-existing DOM as soon as the body element appears.\n\n\n      function bodyCheck() {\n        if (!loopLimit--) clearTimeout(interval);\n\n        if (document.body && !document.body.prototype && /(complete|interactive)/.test(document.readyState)) {\n          shiv(document, true);\n          if (interval && document.body.prototype) clearTimeout(interval);\n          return !!document.body.prototype;\n        }\n\n        return false;\n      }\n\n      if (!bodyCheck()) {\n        document.onreadystatechange = bodyCheck;\n        interval = setInterval(bodyCheck, 25);\n      } // Apply to any new elements created after load\n\n\n      document.createElement = function createElement(nodeName) {\n        var element = nativeCreateElement(String(nodeName).toLowerCase());\n        return shiv(element);\n      }; // remove sandboxed iframe\n\n\n      document.removeChild(vbody);\n    })();\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/8717a9e04ac7aff99b4980fbedead98036b0929a/packages/polyfill-library/polyfills/Element/prototype/classList/detect.js\n    var detect = 'document' in this && \"classList\" in document.documentElement && 'Element' in this && 'classList' in Element.prototype && function () {\n      var e = document.createElement('span');\n      e.classList.add('a', 'b');\n      return e.classList.contains('b');\n    }();\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element.prototype.classList&flags=always\n\n    (function (global) {\n      var dpSupport = true;\n\n      var defineGetter = function defineGetter(object, name, fn, configurable) {\n        if (Object.defineProperty) Object.defineProperty(object, name, {\n          configurable: false === dpSupport ? true : !!configurable,\n          get: fn\n        });else object.__defineGetter__(name, fn);\n      };\n      /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\n\n\n      try {\n        defineGetter({}, \"support\");\n      } catch (e) {\n        dpSupport = false;\n      }\n      /** Polyfills a property with a DOMTokenList */\n\n\n      var addProp = function addProp(o, name, attr) {\n        defineGetter(o.prototype, name, function () {\n          var tokenList;\n          var THIS = this,\n\n          /** Prevent this from firing twice for some reason. What the hell, IE. */\n          gibberishProperty = \"__defineGetter__\" + \"DEFINE_PROPERTY\" + name;\n          if (THIS[gibberishProperty]) return tokenList;\n          THIS[gibberishProperty] = true;\n          /**\n           * IE8 can't define properties on native JavaScript objects, so we'll use a dumb hack instead.\n           *\n           * What this is doing is creating a dummy element (\"reflection\") inside a detached phantom node (\"mirror\")\n           * that serves as the target of Object.defineProperty instead. While we could simply use the subject HTML\n           * element instead, this would conflict with element types which use indexed properties (such as forms and\n           * select lists).\n           */\n\n          if (false === dpSupport) {\n            var visage;\n            var mirror = addProp.mirror || document.createElement(\"div\");\n            var reflections = mirror.childNodes;\n            var l = reflections.length;\n\n            for (var i = 0; i < l; ++i) if (reflections[i]._R === THIS) {\n              visage = reflections[i];\n              break;\n            }\n            /** Couldn't find an element's reflection inside the mirror. Materialise one. */\n\n\n            visage || (visage = mirror.appendChild(document.createElement(\"div\")));\n            tokenList = DOMTokenList.call(visage, THIS, attr);\n          } else tokenList = new DOMTokenList(THIS, attr);\n\n          defineGetter(THIS, name, function () {\n            return tokenList;\n          });\n          delete THIS[gibberishProperty];\n          return tokenList;\n        }, true);\n      };\n\n      addProp(global.Element, \"classList\", \"className\");\n      addProp(global.HTMLElement, \"classList\", \"className\");\n      addProp(global.HTMLLinkElement, \"relList\", \"rel\");\n      addProp(global.HTMLAnchorElement, \"relList\", \"rel\");\n      addProp(global.HTMLAreaElement, \"relList\", \"rel\");\n    })(this);\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n\n  function Accordion($module) {\n    this.$module = $module;\n    this.moduleId = $module.getAttribute('id');\n    this.$sections = $module.querySelectorAll('.govuk-accordion__section');\n    this.$openAllButton = '';\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage();\n    this.controlsClass = 'govuk-accordion__controls';\n    this.openAllClass = 'govuk-accordion__open-all';\n    this.iconClass = 'govuk-accordion__icon';\n    this.sectionHeaderClass = 'govuk-accordion__section-header';\n    this.sectionHeaderFocusedClass = 'govuk-accordion__section-header--focused';\n    this.sectionHeadingClass = 'govuk-accordion__section-heading';\n    this.sectionSummaryClass = 'govuk-accordion__section-summary';\n    this.sectionButtonClass = 'govuk-accordion__section-button';\n    this.sectionExpandedClass = 'govuk-accordion__section--expanded';\n  } // Initialize component\n\n\n  Accordion.prototype.init = function () {\n    // Check for module\n    if (!this.$module) {\n      return;\n    }\n\n    this.initControls();\n    this.initSectionHeaders(); // See if \"Open all\" button text should be updated\n\n    var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n    this.updateOpenAllButton(areAllSectionsOpen);\n  }; // Initialise controls and set attributes\n\n\n  Accordion.prototype.initControls = function () {\n    // Create \"Open all\" button and set attributes\n    this.$openAllButton = document.createElement('button');\n    this.$openAllButton.setAttribute('type', 'button');\n    this.$openAllButton.innerHTML = 'Open all <span class=\"govuk-visually-hidden\">sections</span>';\n    this.$openAllButton.setAttribute('class', this.openAllClass);\n    this.$openAllButton.setAttribute('aria-expanded', 'false');\n    this.$openAllButton.setAttribute('type', 'button'); // Create control wrapper and add controls to it\n\n    var accordionControls = document.createElement('div');\n    accordionControls.setAttribute('class', this.controlsClass);\n    accordionControls.appendChild(this.$openAllButton);\n    this.$module.insertBefore(accordionControls, this.$module.firstChild); // Handle events for the controls\n\n    this.$openAllButton.addEventListener('click', this.onOpenOrCloseAllToggle.bind(this));\n  }; // Initialise section headers\n\n\n  Accordion.prototype.initSectionHeaders = function () {\n    // Loop through section headers\n    nodeListForEach(this.$sections, function ($section, i) {\n      // Set header attributes\n      var header = $section.querySelector('.' + this.sectionHeaderClass);\n      this.initHeaderAttributes(header, i);\n      this.setExpanded(this.isExpanded($section), $section); // Handle events\n\n      header.addEventListener('click', this.onSectionToggle.bind(this, $section)); // See if there is any state stored in sessionStorage and set the sections to\n      // open or closed.\n\n      this.setInitialState($section);\n    }.bind(this));\n  }; // Set individual header attributes\n\n\n  Accordion.prototype.initHeaderAttributes = function ($headerWrapper, index) {\n    var $module = this;\n    var $span = $headerWrapper.querySelector('.' + this.sectionButtonClass);\n    var $heading = $headerWrapper.querySelector('.' + this.sectionHeadingClass);\n    var $summary = $headerWrapper.querySelector('.' + this.sectionSummaryClass); // Copy existing span element to an actual button element, for improved accessibility.\n\n    var $button = document.createElement('button');\n    $button.setAttribute('type', 'button');\n    $button.setAttribute('id', this.moduleId + '-heading-' + (index + 1));\n    $button.setAttribute('aria-controls', this.moduleId + '-content-' + (index + 1)); // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\n\n    for (var i = 0; i < $span.attributes.length; i++) {\n      var attr = $span.attributes.item(i);\n      $button.setAttribute(attr.nodeName, attr.nodeValue);\n    }\n\n    $button.addEventListener('focusin', function (e) {\n      if (!$headerWrapper.classList.contains($module.sectionHeaderFocusedClass)) {\n        $headerWrapper.className += ' ' + $module.sectionHeaderFocusedClass;\n      }\n    });\n    $button.addEventListener('blur', function (e) {\n      $headerWrapper.classList.remove($module.sectionHeaderFocusedClass);\n    });\n\n    if (typeof $summary !== 'undefined' && $summary !== null) {\n      $button.setAttribute('aria-describedby', this.moduleId + '-summary-' + (index + 1));\n    } // $span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n\n\n    $button.innerHTML = $span.innerHTML;\n    $heading.removeChild($span);\n    $heading.appendChild($button); // Add \"+/-\" icon\n\n    var icon = document.createElement('span');\n    icon.className = this.iconClass;\n    icon.setAttribute('aria-hidden', 'true');\n    $button.appendChild(icon);\n  }; // When section toggled, set and store state\n\n\n  Accordion.prototype.onSectionToggle = function ($section) {\n    var expanded = this.isExpanded($section);\n    this.setExpanded(!expanded, $section); // Store the state in sessionStorage when a change is triggered\n\n    this.storeState($section);\n  }; // When Open/Close All toggled, set and store state\n\n\n  Accordion.prototype.onOpenOrCloseAllToggle = function () {\n    var $module = this;\n    var $sections = this.$sections;\n    var nowExpanded = !this.checkIfAllSectionsOpen();\n    nodeListForEach($sections, function ($section) {\n      $module.setExpanded(nowExpanded, $section); // Store the state in sessionStorage when a change is triggered\n\n      $module.storeState($section);\n    });\n    $module.updateOpenAllButton(nowExpanded);\n  }; // Set section attributes when opened/closed\n\n\n  Accordion.prototype.setExpanded = function (expanded, $section) {\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\n    $button.setAttribute('aria-expanded', expanded);\n\n    if (expanded) {\n      $section.classList.add(this.sectionExpandedClass);\n    } else {\n      $section.classList.remove(this.sectionExpandedClass);\n    } // See if \"Open all\" button text should be updated\n\n\n    var areAllSectionsOpen = this.checkIfAllSectionsOpen();\n    this.updateOpenAllButton(areAllSectionsOpen);\n  }; // Get state of section\n\n\n  Accordion.prototype.isExpanded = function ($section) {\n    return $section.classList.contains(this.sectionExpandedClass);\n  }; // Check if all sections are open\n\n\n  Accordion.prototype.checkIfAllSectionsOpen = function () {\n    // Get a count of all the Accordion sections\n    var sectionsCount = this.$sections.length; // Get a count of all Accordion sections that are expanded\n\n    var expandedSectionCount = this.$module.querySelectorAll('.' + this.sectionExpandedClass).length;\n    var areAllSectionsOpen = sectionsCount === expandedSectionCount;\n    return areAllSectionsOpen;\n  }; // Update \"Open all\" button\n\n\n  Accordion.prototype.updateOpenAllButton = function (expanded) {\n    var newButtonText = expanded ? 'Close all' : 'Open all';\n    newButtonText += '<span class=\"govuk-visually-hidden\"> sections</span>';\n    this.$openAllButton.setAttribute('aria-expanded', expanded);\n    this.$openAllButton.innerHTML = newButtonText;\n  }; // Check for `window.sessionStorage`, and that it actually works.\n\n\n  var helper = {\n    checkForSessionStorage: function checkForSessionStorage() {\n      var testString = 'this is the test string';\n      var result;\n\n      try {\n        window.sessionStorage.setItem(testString, testString);\n        result = window.sessionStorage.getItem(testString) === testString.toString();\n        window.sessionStorage.removeItem(testString);\n        return result;\n      } catch (exception) {\n        if (typeof console === 'undefined' || typeof console.log === 'undefined') {\n          console.log('Notice: sessionStorage not available.');\n        }\n      }\n    }\n  }; // Set the state of the accordions in sessionStorage\n\n  Accordion.prototype.storeState = function ($section) {\n    if (this.browserSupportsSessionStorage) {\n      // We need a unique way of identifying each content in the accordion. Since\n      // an `#id` should be unique and an `id` is required for `aria-` attributes\n      // `id` can be safely used.\n      var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n      if ($button) {\n        var contentId = $button.getAttribute('aria-controls');\n        var contentState = $button.getAttribute('aria-expanded');\n\n        if (typeof contentId === 'undefined' && (typeof console === 'undefined' || typeof console.log === 'undefined')) {\n          console.error(new Error('No aria controls present in accordion section heading.'));\n        }\n\n        if (typeof contentState === 'undefined' && (typeof console === 'undefined' || typeof console.log === 'undefined')) {\n          console.error(new Error('No aria expanded present in accordion section heading.'));\n        } // Only set the state when both `contentId` and `contentState` are taken from the DOM.\n\n\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState);\n        }\n      }\n    }\n  }; // Read the state of the accordions from sessionStorage\n\n\n  Accordion.prototype.setInitialState = function ($section) {\n    if (this.browserSupportsSessionStorage) {\n      var $button = $section.querySelector('.' + this.sectionButtonClass);\n\n      if ($button) {\n        var contentId = $button.getAttribute('aria-controls');\n        var contentState = contentId ? window.sessionStorage.getItem(contentId) : null;\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section);\n        }\n      }\n    }\n  };\n\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Window/detect.js\n    var detect = ('Window' in this);\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Window&flags=always\n\n    if (typeof WorkerGlobalScope === \"undefined\" && typeof importScripts !== \"function\") {\n      (function (global) {\n        if (global.constructor) {\n          global.Window = global.constructor;\n        } else {\n          (global.Window = global.constructor = new Function('return function Window() {}')()).prototype = this;\n        }\n      })(this);\n    }\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Event/detect.js\n    var detect = function (global) {\n      if (!('Event' in global)) return false;\n      if (typeof global.Event === 'function') return true;\n\n      try {\n        // In IE 9-11, the Event object exists but cannot be instantiated\n        new Event('click');\n        return true;\n      } catch (e) {\n        return false;\n      }\n    }(this);\n\n    if (detect) return; // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Event&flags=always\n\n    (function () {\n      var unlistenableWindowEvents = {\n        click: 1,\n        dblclick: 1,\n        keyup: 1,\n        keypress: 1,\n        keydown: 1,\n        mousedown: 1,\n        mouseup: 1,\n        mousemove: 1,\n        mouseover: 1,\n        mouseenter: 1,\n        mouseleave: 1,\n        mouseout: 1,\n        storage: 1,\n        storagecommit: 1,\n        textinput: 1\n      }; // This polyfill depends on availability of `document` so will not run in a worker\n      // However, we asssume there are no browsers with worker support that lack proper\n      // support for `Event` within the worker\n\n      if (typeof document === 'undefined' || typeof window === 'undefined') return;\n\n      function indexOf(array, element) {\n        var index = -1,\n            length = array.length;\n\n        while (++index < length) {\n          if (index in array && array[index] === element) {\n            return index;\n          }\n        }\n\n        return -1;\n      }\n\n      var existingProto = window.Event && window.Event.prototype || null;\n\n      window.Event = Window.prototype.Event = function Event(type, eventInitDict) {\n        if (!type) {\n          throw new Error('Not enough arguments');\n        }\n\n        var event; // Shortcut if browser supports createEvent\n\n        if ('createEvent' in document) {\n          event = document.createEvent('Event');\n          var bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n          var cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n          event.initEvent(type, bubbles, cancelable);\n          return event;\n        }\n\n        event = document.createEventObject();\n        event.type = type;\n        event.bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\n        event.cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\n        return event;\n      };\n\n      if (existingProto) {\n        Object.defineProperty(window.Event, 'prototype', {\n          configurable: false,\n          enumerable: false,\n          writable: true,\n          value: existingProto\n        });\n      }\n\n      if (!('createEvent' in document)) {\n        window.addEventListener = Window.prototype.addEventListener = Document.prototype.addEventListener = Element.prototype.addEventListener = function addEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1];\n\n          if (element === window && type in unlistenableWindowEvents) {\n            throw new Error('In IE8 the event: ' + type + ' is not available on the window object. Please see https://github.com/Financial-Times/polyfill-service/issues/317 for more information.');\n          }\n\n          if (!element._events) {\n            element._events = {};\n          }\n\n          if (!element._events[type]) {\n            element._events[type] = function (event) {\n              var list = element._events[event.type].list,\n                  events = list.slice(),\n                  index = -1,\n                  length = events.length,\n                  eventElement;\n\n              event.preventDefault = function preventDefault() {\n                if (event.cancelable !== false) {\n                  event.returnValue = false;\n                }\n              };\n\n              event.stopPropagation = function stopPropagation() {\n                event.cancelBubble = true;\n              };\n\n              event.stopImmediatePropagation = function stopImmediatePropagation() {\n                event.cancelBubble = true;\n                event.cancelImmediate = true;\n              };\n\n              event.currentTarget = element;\n              event.relatedTarget = event.fromElement || null;\n              event.target = event.target || event.srcElement || element;\n              event.timeStamp = new Date().getTime();\n\n              if (event.clientX) {\n                event.pageX = event.clientX + document.documentElement.scrollLeft;\n                event.pageY = event.clientY + document.documentElement.scrollTop;\n              }\n\n              while (++index < length && !event.cancelImmediate) {\n                if (index in events) {\n                  eventElement = events[index];\n\n                  if (indexOf(list, eventElement) !== -1 && typeof eventElement === 'function') {\n                    eventElement.call(element, event);\n                  }\n                }\n              }\n            };\n\n            element._events[type].list = [];\n\n            if (element.attachEvent) {\n              element.attachEvent('on' + type, element._events[type]);\n            }\n          }\n\n          element._events[type].list.push(listener);\n        };\n\n        window.removeEventListener = Window.prototype.removeEventListener = Document.prototype.removeEventListener = Element.prototype.removeEventListener = function removeEventListener() {\n          var element = this,\n              type = arguments[0],\n              listener = arguments[1],\n              index;\n\n          if (element._events && element._events[type] && element._events[type].list) {\n            index = indexOf(element._events[type].list, listener);\n\n            if (index !== -1) {\n              element._events[type].list.splice(index, 1);\n\n              if (!element._events[type].list.length) {\n                if (element.detachEvent) {\n                  element.detachEvent('on' + type, element._events[type]);\n                }\n\n                delete element._events[type];\n              }\n            }\n          }\n        };\n\n        window.dispatchEvent = Window.prototype.dispatchEvent = Document.prototype.dispatchEvent = Element.prototype.dispatchEvent = function dispatchEvent(event) {\n          if (!arguments.length) {\n            throw new Error('Not enough arguments');\n          }\n\n          if (!event || typeof event.type !== 'string') {\n            throw new Error('DOM Events Exception 0');\n          }\n\n          var element = this,\n              type = event.type;\n\n          try {\n            if (!event.bubbles) {\n              event.cancelBubble = true;\n\n              var cancelBubbleEvent = function cancelBubbleEvent(event) {\n                event.cancelBubble = true;\n                (element || window).detachEvent('on' + type, cancelBubbleEvent);\n              };\n\n              this.attachEvent('on' + type, cancelBubbleEvent);\n            }\n\n            this.fireEvent('on' + type, event);\n          } catch (error) {\n            event.target = element;\n\n            do {\n              event.currentTarget = element;\n\n              if ('_events' in element && typeof element._events[type] === 'function') {\n                element._events[type].call(element, event);\n              }\n\n              if (typeof element['on' + type] === 'function') {\n                element['on' + type].call(element, event);\n              }\n\n              element = element.nodeType === 9 ? element.parentWindow : element.parentNode;\n            } while (element && !event.cancelBubble);\n          }\n\n          return true;\n        }; // Add the DOMContentLoaded Event\n\n\n        document.attachEvent('onreadystatechange', function () {\n          if (document.readyState === 'complete') {\n            document.dispatchEvent(new Event('DOMContentLoaded', {\n              bubbles: true\n            }));\n          }\n        });\n      }\n    })();\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  var KEY_SPACE = 32;\n  var DEBOUNCE_TIMEOUT_IN_SECONDS = 1;\n\n  function Button($module) {\n    this.$module = $module;\n    this.debounceFormSubmitTimer = null;\n  }\n  /**\n  * JavaScript 'shim' to trigger the click event of element(s) when the space key is pressed.\n  *\n  * Created since some Assistive Technologies (for example some Screenreaders)\n  * will tell a user to press space on a 'button', so this functionality needs to be shimmed\n  * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n  *\n  * @param {object} event event\n  */\n\n\n  Button.prototype.handleKeyDown = function (event) {\n    // get the target element\n    var target = event.target; // if the element has a role='button' and the pressed key is a space, we'll simulate a click\n\n    if (target.getAttribute('role') === 'button' && event.keyCode === KEY_SPACE) {\n      event.preventDefault(); // trigger the target's click event\n\n      target.click();\n    }\n  };\n  /**\n  * If the click quickly succeeds a previous click then nothing will happen.\n  * This stops people accidentally causing multiple form submissions by\n  * double clicking buttons.\n  */\n\n\n  Button.prototype.debounce = function (event) {\n    var target = event.target; // Check the button that is clicked on has the preventDoubleClick feature enabled\n\n    if (target.getAttribute('data-prevent-double-click') !== 'true') {\n      return;\n    } // If the timer is still running then we want to prevent the click from submitting the form\n\n\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault();\n      return false;\n    }\n\n    this.debounceFormSubmitTimer = setTimeout(function () {\n      this.debounceFormSubmitTimer = null;\n    }.bind(this), DEBOUNCE_TIMEOUT_IN_SECONDS * 1000);\n  };\n  /**\n  * Initialise an event listener for keydown at document level\n  * this will help listening for later inserted elements with a role=\"button\"\n  */\n\n\n  Button.prototype.init = function () {\n    this.$module.addEventListener('keydown', this.handleKeyDown);\n    this.$module.addEventListener('click', this.debounce);\n  };\n  /**\n   * JavaScript 'polyfill' for HTML5's <details> and <summary> elements\n   * and 'shim' to add accessiblity enhancements for all browsers\n   *\n   * http://caniuse.com/#feat=details\n   */\n\n\n  var KEY_ENTER = 13;\n  var KEY_SPACE$1 = 32;\n\n  function Details($module) {\n    this.$module = $module;\n  }\n\n  Details.prototype.init = function () {\n    if (!this.$module) {\n      return;\n    } // If there is native details support, we want to avoid running code to polyfill native behaviour.\n\n\n    var hasNativeDetails = typeof this.$module.open === 'boolean';\n\n    if (hasNativeDetails) {\n      return;\n    }\n\n    this.polyfillDetails();\n  };\n\n  Details.prototype.polyfillDetails = function () {\n    var $module = this.$module; // Save shortcuts to the inner summary and content elements\n\n    var $summary = this.$summary = $module.getElementsByTagName('summary').item(0);\n    var $content = this.$content = $module.getElementsByTagName('div').item(0); // If <details> doesn't have a <summary> and a <div> representing the content\n    // it means the required HTML structure is not met so the script will stop\n\n    if (!$summary || !$content) {\n      return;\n    } // If the content doesn't have an ID, assign it one now\n    // which we'll need for the summary's aria-controls assignment\n\n\n    if (!$content.id) {\n      $content.id = 'details-content-' + generateUniqueID();\n    } // Add ARIA role=\"group\" to details\n\n\n    $module.setAttribute('role', 'group'); // Add role=button to summary\n\n    $summary.setAttribute('role', 'button'); // Add aria-controls\n\n    $summary.setAttribute('aria-controls', $content.id); // Set tabIndex so the summary is keyboard accessible for non-native elements\n    //\n    // We have to use the camelcase `tabIndex` property as there is a bug in IE6/IE7 when we set the correct attribute lowercase:\n    // See http://web.archive.org/web/20170120194036/http://www.saliences.com/browserBugs/tabIndex.html for more information.\n\n    $summary.tabIndex = 0; // Detect initial open state\n\n    var openAttr = $module.getAttribute('open') !== null;\n\n    if (openAttr === true) {\n      $summary.setAttribute('aria-expanded', 'true');\n      $content.setAttribute('aria-hidden', 'false');\n    } else {\n      $summary.setAttribute('aria-expanded', 'false');\n      $content.setAttribute('aria-hidden', 'true');\n      $content.style.display = 'none';\n    } // Bind an event to handle summary elements\n\n\n    this.polyfillHandleInputs($summary, this.polyfillSetAttributes.bind(this));\n  };\n  /**\n  * Define a statechange function that updates aria-expanded and style.display\n  * @param {object} summary element\n  */\n\n\n  Details.prototype.polyfillSetAttributes = function () {\n    var $module = this.$module;\n    var $summary = this.$summary;\n    var $content = this.$content;\n    var expanded = $summary.getAttribute('aria-expanded') === 'true';\n    var hidden = $content.getAttribute('aria-hidden') === 'true';\n    $summary.setAttribute('aria-expanded', expanded ? 'false' : 'true');\n    $content.setAttribute('aria-hidden', hidden ? 'false' : 'true');\n    $content.style.display = expanded ? 'none' : '';\n    var hasOpenAttr = $module.getAttribute('open') !== null;\n\n    if (!hasOpenAttr) {\n      $module.setAttribute('open', 'open');\n    } else {\n      $module.removeAttribute('open');\n    }\n\n    return true;\n  };\n  /**\n  * Handle cross-modal click events\n  * @param {object} node element\n  * @param {function} callback function\n  */\n\n\n  Details.prototype.polyfillHandleInputs = function (node, callback) {\n    node.addEventListener('keypress', function (event) {\n      var target = event.target; // When the key gets pressed - check if it is enter or space\n\n      if (event.keyCode === KEY_ENTER || event.keyCode === KEY_SPACE$1) {\n        if (target.nodeName.toLowerCase() === 'summary') {\n          // Prevent space from scrolling the page\n          // and enter from submitting a form\n          event.preventDefault(); // Click to let the click event do all the necessary action\n\n          if (target.click) {\n            target.click();\n          } else {\n            // except Safari 5.1 and under don't support .click() here\n            callback(event);\n          }\n        }\n      }\n    }); // Prevent keyup to prevent clicking twice in Firefox when using space key\n\n    node.addEventListener('keyup', function (event) {\n      var target = event.target;\n\n      if (event.keyCode === KEY_SPACE$1) {\n        if (target.nodeName.toLowerCase() === 'summary') {\n          event.preventDefault();\n        }\n      }\n    });\n    node.addEventListener('click', callback);\n  };\n\n  function CharacterCount($module) {\n    this.$module = $module;\n    this.$textarea = $module.querySelector('.govuk-js-character-count');\n\n    if (this.$textarea) {\n      this.$countMessage = $module.querySelector('[id=\"' + this.$textarea.id + '-info\"]');\n    }\n  }\n\n  CharacterCount.prototype.defaults = {\n    characterCountAttribute: 'data-maxlength',\n    wordCountAttribute: 'data-maxwords'\n  }; // Initialize component\n\n  CharacterCount.prototype.init = function () {\n    // Check for module\n    var $module = this.$module;\n    var $textarea = this.$textarea;\n    var $countMessage = this.$countMessage;\n\n    if (!$textarea || !$countMessage) {\n      return;\n    } // We move count message right after the field\n    // Kept for backwards compatibility\n\n\n    $textarea.insertAdjacentElement('afterend', $countMessage); // Read options set using dataset ('data-' values)\n\n    this.options = this.getDataset($module); // Determine the limit attribute (characters or words)\n\n    var countAttribute = this.defaults.characterCountAttribute;\n\n    if (this.options.maxwords) {\n      countAttribute = this.defaults.wordCountAttribute;\n    } // Save the element limit\n\n\n    this.maxLength = $module.getAttribute(countAttribute); // Check for limit\n\n    if (!this.maxLength) {\n      return;\n    } // Remove hard limit if set\n\n\n    $module.removeAttribute('maxlength'); // When the page is restored after navigating 'back' in some browsers the\n    // state of the character count is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', this.sync.bind(this));\n    } else {\n      window.addEventListener('DOMContentLoaded', this.sync.bind(this));\n    }\n\n    this.sync();\n  };\n\n  CharacterCount.prototype.sync = function () {\n    this.bindChangeEvents();\n    this.updateCountMessage();\n  }; // Read data attributes\n\n\n  CharacterCount.prototype.getDataset = function (element) {\n    var dataset = {};\n    var attributes = element.attributes;\n\n    if (attributes) {\n      for (var i = 0; i < attributes.length; i++) {\n        var attribute = attributes[i];\n        var match = attribute.name.match(/^data-(.+)/);\n\n        if (match) {\n          dataset[match[1]] = attribute.value;\n        }\n      }\n    }\n\n    return dataset;\n  }; // Counts characters or words in text\n\n\n  CharacterCount.prototype.count = function (text) {\n    var length;\n\n    if (this.options.maxwords) {\n      var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\n\n      length = tokens.length;\n    } else {\n      length = text.length;\n    }\n\n    return length;\n  }; // Bind input propertychange to the elements and update based on the change\n\n\n  CharacterCount.prototype.bindChangeEvents = function () {\n    var $textarea = this.$textarea;\n    $textarea.addEventListener('keyup', this.checkIfValueChanged.bind(this)); // Bind focus/blur events to start/stop polling\n\n    $textarea.addEventListener('focus', this.handleFocus.bind(this));\n    $textarea.addEventListener('blur', this.handleBlur.bind(this));\n  }; // Speech recognition software such as Dragon NaturallySpeaking will modify the\n  // fields by directly changing its `value`. These changes don't trigger events\n  // in JavaScript, so we need to poll to handle when and if they occur.\n\n\n  CharacterCount.prototype.checkIfValueChanged = function () {\n    if (!this.$textarea.oldValue) this.$textarea.oldValue = '';\n\n    if (this.$textarea.value !== this.$textarea.oldValue) {\n      this.$textarea.oldValue = this.$textarea.value;\n      this.updateCountMessage();\n    }\n  }; // Update message box\n\n\n  CharacterCount.prototype.updateCountMessage = function () {\n    var countElement = this.$textarea;\n    var options = this.options;\n    var countMessage = this.$countMessage; // Determine the remaining number of characters/words\n\n    var currentLength = this.count(countElement.value);\n    var maxLength = this.maxLength;\n    var remainingNumber = maxLength - currentLength; // Set threshold if presented in options\n\n    var thresholdPercent = options.threshold ? options.threshold : 0;\n    var thresholdValue = maxLength * thresholdPercent / 100;\n\n    if (thresholdValue > currentLength) {\n      countMessage.classList.add('govuk-character-count__message--disabled'); // Ensure threshold is hidden for users of assistive technologies\n\n      countMessage.setAttribute('aria-hidden', true);\n    } else {\n      countMessage.classList.remove('govuk-character-count__message--disabled'); // Ensure threshold is visible for users of assistive technologies\n\n      countMessage.removeAttribute('aria-hidden');\n    } // Update styles\n\n\n    if (remainingNumber < 0) {\n      countElement.classList.add('govuk-textarea--error');\n      countMessage.classList.remove('govuk-hint');\n      countMessage.classList.add('govuk-error-message');\n    } else {\n      countElement.classList.remove('govuk-textarea--error');\n      countMessage.classList.remove('govuk-error-message');\n      countMessage.classList.add('govuk-hint');\n    } // Update message\n\n\n    var charVerb = 'remaining';\n    var charNoun = 'character';\n    var displayNumber = remainingNumber;\n\n    if (options.maxwords) {\n      charNoun = 'word';\n    }\n\n    charNoun = charNoun + (remainingNumber === -1 || remainingNumber === 1 ? '' : 's');\n    charVerb = remainingNumber < 0 ? 'too many' : 'remaining';\n    displayNumber = Math.abs(remainingNumber);\n    countMessage.innerHTML = 'You have ' + displayNumber + ' ' + charNoun + ' ' + charVerb;\n  };\n\n  CharacterCount.prototype.handleFocus = function () {\n    // Check if value changed on focus\n    this.valueChecker = setInterval(this.checkIfValueChanged.bind(this), 1000);\n  };\n\n  CharacterCount.prototype.handleBlur = function () {\n    // Cancel value checking on blur\n    clearInterval(this.valueChecker);\n  };\n\n  function Checkboxes($module) {\n    this.$module = $module;\n    this.$inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\n  }\n  /**\n   * Initialise Checkboxes\n   *\n   * Checkboxes can be associated with a 'conditionally revealed' content block –\n   * for example, a checkbox for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the checkbox state.\n   */\n\n\n  Checkboxes.prototype.init = function () {\n    var $module = this.$module;\n    var $inputs = this.$inputs;\n    nodeListForEach($inputs, function ($input) {\n      var target = $input.getAttribute('data-aria-controls'); // Skip checkboxes without data-aria-controls attributes, or where the\n      // target element does not exist.\n\n      if (!target || !$module.querySelector('#' + target)) {\n        return;\n      } // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n\n\n      $input.setAttribute('aria-controls', target);\n      $input.removeAttribute('data-aria-controls');\n    }); // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', this.syncAllConditionalReveals.bind(this));\n    } else {\n      window.addEventListener('DOMContentLoaded', this.syncAllConditionalReveals.bind(this));\n    } // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n\n\n    this.syncAllConditionalReveals();\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n   * Sync the conditional reveal states for all inputs in this $module.\n   */\n\n\n  Checkboxes.prototype.syncAllConditionalReveals = function () {\n    nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\n  };\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input Checkbox input\n   */\n\n\n  Checkboxes.prototype.syncConditionalRevealWithInputState = function ($input) {\n    var $target = this.$module.querySelector('#' + $input.getAttribute('aria-controls'));\n\n    if ($target && $target.classList.contains('govuk-checkboxes__conditional')) {\n      var inputIsChecked = $input.checked;\n      $input.setAttribute('aria-expanded', inputIsChecked);\n      $target.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\n    }\n  };\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a “None of these\" checkbox is checked.\n   */\n\n\n  Checkboxes.prototype.unCheckAllInputsExcept = function ($input) {\n    var allInputsWithSameName = document.querySelectorAll('input[type=\"checkbox\"][name=\"' + $input.name + '\"]');\n    nodeListForEach(allInputsWithSameName, function ($inputWithSameName) {\n      var hasSameFormOwner = $input.form === $inputWithSameName.form;\n\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false;\n      }\n    });\n    this.syncAllConditionalReveals();\n  };\n  /**\n   * Uncheck exclusive inputs\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\n   * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n   * \"None of these\" checkbox in the same fieldset.\n   */\n\n\n  Checkboxes.prototype.unCheckExclusiveInputs = function ($input) {\n    var allInputsWithSameNameAndExclusiveBehaviour = document.querySelectorAll('input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"' + $input.name + '\"]');\n    nodeListForEach(allInputsWithSameNameAndExclusiveBehaviour, function ($exclusiveInput) {\n      var hasSameFormOwner = $input.form === $exclusiveInput.form;\n\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false;\n      }\n    });\n    this.syncAllConditionalReveals();\n  };\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module – if the click occurred on a checkbox, sync\n   * the state of any associated conditional reveal with the checkbox state.\n   *\n   * @param {MouseEvent} event Click event\n   */\n\n\n  Checkboxes.prototype.handleClick = function (event) {\n    var $target = event.target; // Ignore clicks on things that aren't checkbox inputs\n\n    if ($target.type !== 'checkbox') {\n      return;\n    } // If the checkbox conditionally-reveals some content, sync the state\n\n\n    var hasAriaControls = $target.getAttribute('aria-controls');\n\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($target);\n    } // No further behaviour needed for unchecking\n\n\n    if (!$target.checked) {\n      return;\n    } // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n\n\n    var hasBehaviourExclusive = $target.getAttribute('data-behaviour') === 'exclusive';\n\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($target);\n    } else {\n      this.unCheckExclusiveInputs($target);\n    }\n  };\n\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/detect.js\n    var detect = 'document' in this && \"matches\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/polyfill.js\n\n    Element.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.mozMatchesSelector || function matches(selector) {\n      var element = this;\n      var elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n      var index = 0;\n\n      while (elements[index] && elements[index] !== element) {\n        ++index;\n      }\n\n      return !!elements[index];\n    };\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/detect.js\n    var detect = 'document' in this && \"closest\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/polyfill.js\n\n    Element.prototype.closest = function closest(selector) {\n      var node = this;\n\n      while (node) {\n        if (node.matches(selector)) return node;else node = 'SVGElement' in window && node instanceof SVGElement ? node.parentNode : node.parentElement;\n      }\n\n      return null;\n    };\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n\n  function ErrorSummary($module) {\n    this.$module = $module;\n  }\n\n  ErrorSummary.prototype.init = function () {\n    var $module = this.$module;\n\n    if (!$module) {\n      return;\n    }\n\n    $module.focus();\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n  * Click event handler\n  *\n  * @param {MouseEvent} event - Click event\n  */\n\n\n  ErrorSummary.prototype.handleClick = function (event) {\n    var target = event.target;\n\n    if (this.focusTarget(target)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our labels\n   * or legends appear above the input, this means the user will be presented with\n   * an input without any context, as the label or legend will be off the top of\n   * the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and then\n   * focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is announced\n   * (e.g. \"Edit, has autocomplete\").\n   *\n   * @param {HTMLElement} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n\n\n  ErrorSummary.prototype.focusTarget = function ($target) {\n    // If the element that was clicked was not a link, return early\n    if ($target.tagName !== 'A' || $target.href === false) {\n      return false;\n    }\n\n    var inputId = this.getFragmentFromUrl($target.href);\n    var $input = document.getElementById(inputId);\n\n    if (!$input) {\n      return false;\n    }\n\n    var $legendOrLabel = this.getAssociatedLegendOrLabel($input);\n\n    if (!$legendOrLabel) {\n      return false;\n    } // Scroll the legend or label into view *before* calling focus on the input to\n    // avoid extra scrolling in browsers that don't support `preventScroll` (which\n    // at time of writing is most of them...)\n\n\n    $legendOrLabel.scrollIntoView();\n    $input.focus({\n      preventScroll: true\n    });\n    return true;\n  };\n  /**\n   * Get fragment from URL\n   *\n   * Extract the fragment (everything after the hash) from a URL, but not including\n   * the hash.\n   *\n   * @param {string} url - URL\n   * @returns {string} Fragment from URL, without the hash\n   */\n\n\n  ErrorSummary.prototype.getFragmentFromUrl = function (url) {\n    if (url.indexOf('#') === -1) {\n      return false;\n    }\n\n    return url.split('#').pop();\n  };\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @param {HTMLElement} $input - The input\n   * @returns {HTMLElement} Associated legend or label, or null if no associated\n   *                        legend or label can be found\n   */\n\n\n  ErrorSummary.prototype.getAssociatedLegendOrLabel = function ($input) {\n    var $fieldset = $input.closest('fieldset');\n\n    if ($fieldset) {\n      var legends = $fieldset.getElementsByTagName('legend');\n\n      if (legends.length) {\n        var $candidateLegend = legends[0]; // If the input type is radio or checkbox, always use the legend if there\n        // is one.\n\n        if ($input.type === 'checkbox' || $input.type === 'radio') {\n          return $candidateLegend;\n        } // For other input types, only scroll to the fieldset’s legend (instead of\n        // the label associated with the input) if the input would end up in the\n        // top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n\n\n        var legendTop = $candidateLegend.getBoundingClientRect().top;\n        var inputRect = $input.getBoundingClientRect(); // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n\n        if (inputRect.height && window.innerHeight) {\n          var inputBottom = inputRect.top + inputRect.height;\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend;\n          }\n        }\n      }\n    }\n\n    return document.querySelector(\"label[for='\" + $input.getAttribute('id') + \"']\") || $input.closest('label');\n  };\n\n  function NotificationBanner($module) {\n    this.$module = $module;\n  }\n  /**\n   * Initialise the component\n   */\n\n\n  NotificationBanner.prototype.init = function () {\n    var $module = this.$module; // Check for module\n\n    if (!$module) {\n      return;\n    }\n\n    this.setFocus();\n  };\n  /**\n   * Focus the element\n   *\n   * If `role=\"alert\"` is set, focus the element to help some assistive technologies\n   * prioritise announcing it.\n   *\n   * You can turn off the auto-focus functionality by setting `data-disable-auto-focus=\"true\"` in the\n   * component HTML. You might wish to do this based on user research findings, or to avoid a clash\n   * with another element which should be focused when the page loads.\n   */\n\n\n  NotificationBanner.prototype.setFocus = function () {\n    var $module = this.$module;\n\n    if ($module.getAttribute('data-disable-auto-focus') === 'true') {\n      return;\n    }\n\n    if ($module.getAttribute('role') !== 'alert') {\n      return;\n    } // Set tabindex to -1 to make the element focusable with JavaScript.\n    // Remove the tabindex on blur as the component doesn't need to be focusable after the page has\n    // loaded.\n\n\n    if (!$module.getAttribute('tabindex')) {\n      $module.setAttribute('tabindex', '-1');\n      $module.addEventListener('blur', function () {\n        $module.removeAttribute('tabindex');\n      });\n    }\n\n    $module.focus();\n  };\n\n  function Header($module) {\n    this.$module = $module;\n    this.$menuButton = $module && $module.querySelector('.govuk-js-header-toggle');\n    this.$menu = this.$menuButton && $module.querySelector('#' + this.$menuButton.getAttribute('aria-controls'));\n  }\n  /**\n   * Initialise header\n   *\n   * Check for the presence of the header, menu and menu button – if any are\n   * missing then there's nothing to do so return early.\n   */\n\n\n  Header.prototype.init = function () {\n    if (!this.$module || !this.$menuButton || !this.$menu) {\n      return;\n    }\n\n    this.syncState(this.$menu.classList.contains('govuk-header__navigation--open'));\n    this.$menuButton.addEventListener('click', this.handleMenuButtonClick.bind(this));\n  };\n  /**\n   * Sync menu state\n   *\n   * Sync the menu button class and the accessible state of the menu and the menu\n   * button with the visible state of the menu\n   *\n   * @param {boolean} isVisible Whether the menu is currently visible\n   */\n\n\n  Header.prototype.syncState = function (isVisible) {\n    this.$menuButton.classList.toggle('govuk-header__menu-button--open', isVisible);\n    this.$menuButton.setAttribute('aria-expanded', isVisible);\n  };\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   */\n\n\n  Header.prototype.handleMenuButtonClick = function () {\n    var isVisible = this.$menu.classList.toggle('govuk-header__navigation--open');\n    this.syncState(isVisible);\n  };\n\n  function Radios($module) {\n    this.$module = $module;\n    this.$inputs = $module.querySelectorAll('input[type=\"radio\"]');\n  }\n  /**\n   * Initialise Radios\n   *\n   * Radios can be associated with a 'conditionally revealed' content block – for\n   * example, a radio for 'Phone' could reveal an additional form field for the\n   * user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which is\n   * promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page (for\n   * example if the user has navigated back), and set up event handlers to keep\n   * the reveal in sync with the radio state.\n   */\n\n\n  Radios.prototype.init = function () {\n    var $module = this.$module;\n    var $inputs = this.$inputs;\n    nodeListForEach($inputs, function ($input) {\n      var target = $input.getAttribute('data-aria-controls'); // Skip radios without data-aria-controls attributes, or where the\n      // target element does not exist.\n\n      if (!target || !$module.querySelector('#' + target)) {\n        return;\n      } // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n\n\n      $input.setAttribute('aria-controls', target);\n      $input.removeAttribute('data-aria-controls');\n    }); // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event in browsers\n    // that support it.\n\n    if ('onpageshow' in window) {\n      window.addEventListener('pageshow', this.syncAllConditionalReveals.bind(this));\n    } else {\n      window.addEventListener('DOMContentLoaded', this.syncAllConditionalReveals.bind(this));\n    } // Although we've set up handlers to sync state on the pageshow or\n    // DOMContentLoaded event, init could be called after those events have fired,\n    // for example if they are added to the page dynamically, so sync now too.\n\n\n    this.syncAllConditionalReveals(); // Handle events\n\n    $module.addEventListener('click', this.handleClick.bind(this));\n  };\n  /**\n   * Sync the conditional reveal states for all inputs in this $module.\n   */\n\n\n  Radios.prototype.syncAllConditionalReveals = function () {\n    nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\n  };\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @param {HTMLInputElement} $input Radio input\n   */\n\n\n  Radios.prototype.syncConditionalRevealWithInputState = function ($input) {\n    var $target = document.querySelector('#' + $input.getAttribute('aria-controls'));\n\n    if ($target && $target.classList.contains('govuk-radios__conditional')) {\n      var inputIsChecked = $input.checked;\n      $input.setAttribute('aria-expanded', inputIsChecked);\n      $target.classList.toggle('govuk-radios__conditional--hidden', !inputIsChecked);\n    }\n  };\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module – if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a radio\n   * in another $module)\n   *\n   * @param {MouseEvent} event Click event\n   */\n\n\n  Radios.prototype.handleClick = function (event) {\n    var $clickedInput = event.target; // Ignore clicks on things that aren't radio buttons\n\n    if ($clickedInput.type !== 'radio') {\n      return;\n    } // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n\n\n    var $allInputs = document.querySelectorAll('input[type=\"radio\"][aria-controls]');\n    nodeListForEach($allInputs, function ($input) {\n      var hasSameFormOwner = $input.form === $clickedInput.form;\n      var hasSameName = $input.name === $clickedInput.name;\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input);\n      }\n    }.bind(this));\n  };\n\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/nextElementSibling/detect.js\n    var detect = 'document' in this && \"nextElementSibling\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/nextElementSibling/polyfill.js\n\n    Object.defineProperty(Element.prototype, \"nextElementSibling\", {\n      get: function get() {\n        var el = this.nextSibling;\n\n        while (el && el.nodeType !== 1) {\n          el = el.nextSibling;\n        }\n\n        return el;\n      }\n    });\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n  (function (undefined) {\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/previousElementSibling/detect.js\n    var detect = 'document' in this && \"previousElementSibling\" in document.documentElement;\n    if (detect) return; // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/previousElementSibling/polyfill.js\n\n    Object.defineProperty(Element.prototype, 'previousElementSibling', {\n      get: function get() {\n        var el = this.previousSibling;\n\n        while (el && el.nodeType !== 1) {\n          el = el.previousSibling;\n        }\n\n        return el;\n      }\n    });\n  }).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\n\n  function Tabs($module) {\n    this.$module = $module;\n    this.$tabs = $module.querySelectorAll('.govuk-tabs__tab');\n    this.keys = {\n      left: 37,\n      right: 39,\n      up: 38,\n      down: 40\n    };\n    this.jsHiddenClass = 'govuk-tabs__panel--hidden';\n  }\n\n  Tabs.prototype.init = function () {\n    if (typeof window.matchMedia === 'function') {\n      this.setupResponsiveChecks();\n    } else {\n      this.setup();\n    }\n  };\n\n  Tabs.prototype.setupResponsiveChecks = function () {\n    this.mql = window.matchMedia('(min-width: 40.0625em)');\n    this.mql.addListener(this.checkMode.bind(this));\n    this.checkMode();\n  };\n\n  Tabs.prototype.checkMode = function () {\n    if (this.mql.matches) {\n      this.setup();\n    } else {\n      this.teardown();\n    }\n  };\n\n  Tabs.prototype.setup = function () {\n    var $module = this.$module;\n    var $tabs = this.$tabs;\n    var $tabList = $module.querySelector('.govuk-tabs__list');\n    var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\n\n    if (!$tabs || !$tabList || !$tabListItems) {\n      return;\n    }\n\n    $tabList.setAttribute('role', 'tablist');\n    nodeListForEach($tabListItems, function ($item) {\n      $item.setAttribute('role', 'presentation');\n    });\n    nodeListForEach($tabs, function ($tab) {\n      // Set HTML attributes\n      this.setAttributes($tab); // Save bounded functions to use when removing event listeners during teardown\n\n      $tab.boundTabClick = this.onTabClick.bind(this);\n      $tab.boundTabKeydown = this.onTabKeydown.bind(this); // Handle events\n\n      $tab.addEventListener('click', $tab.boundTabClick, true);\n      $tab.addEventListener('keydown', $tab.boundTabKeydown, true); // Remove old active panels\n\n      this.hideTab($tab);\n    }.bind(this)); // Show either the active tab according to the URL's hash or the first tab\n\n    var $activeTab = this.getTab(window.location.hash) || this.$tabs[0];\n    this.showTab($activeTab); // Handle hashchange events\n\n    $module.boundOnHashChange = this.onHashChange.bind(this);\n    window.addEventListener('hashchange', $module.boundOnHashChange, true);\n  };\n\n  Tabs.prototype.teardown = function () {\n    var $module = this.$module;\n    var $tabs = this.$tabs;\n    var $tabList = $module.querySelector('.govuk-tabs__list');\n    var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\n\n    if (!$tabs || !$tabList || !$tabListItems) {\n      return;\n    }\n\n    $tabList.removeAttribute('role');\n    nodeListForEach($tabListItems, function ($item) {\n      $item.removeAttribute('role', 'presentation');\n    });\n    nodeListForEach($tabs, function ($tab) {\n      // Remove events\n      $tab.removeEventListener('click', $tab.boundTabClick, true);\n      $tab.removeEventListener('keydown', $tab.boundTabKeydown, true); // Unset HTML attributes\n\n      this.unsetAttributes($tab);\n    }.bind(this)); // Remove hashchange event handler\n\n    window.removeEventListener('hashchange', $module.boundOnHashChange, true);\n  };\n\n  Tabs.prototype.onHashChange = function (e) {\n    var hash = window.location.hash;\n    var $tabWithHash = this.getTab(hash);\n\n    if (!$tabWithHash) {\n      return;\n    } // Prevent changing the hash\n\n\n    if (this.changingHash) {\n      this.changingHash = false;\n      return;\n    } // Show either the active tab according to the URL's hash or the first tab\n\n\n    var $previousTab = this.getCurrentTab();\n    this.hideTab($previousTab);\n    this.showTab($tabWithHash);\n    $tabWithHash.focus();\n  };\n\n  Tabs.prototype.hideTab = function ($tab) {\n    this.unhighlightTab($tab);\n    this.hidePanel($tab);\n  };\n\n  Tabs.prototype.showTab = function ($tab) {\n    this.highlightTab($tab);\n    this.showPanel($tab);\n  };\n\n  Tabs.prototype.getTab = function (hash) {\n    return this.$module.querySelector('.govuk-tabs__tab[href=\"' + hash + '\"]');\n  };\n\n  Tabs.prototype.setAttributes = function ($tab) {\n    // set tab attributes\n    var panelId = this.getHref($tab).slice(1);\n    $tab.setAttribute('id', 'tab_' + panelId);\n    $tab.setAttribute('role', 'tab');\n    $tab.setAttribute('aria-controls', panelId);\n    $tab.setAttribute('aria-selected', 'false');\n    $tab.setAttribute('tabindex', '-1'); // set panel attributes\n\n    var $panel = this.getPanel($tab);\n    $panel.setAttribute('role', 'tabpanel');\n    $panel.setAttribute('aria-labelledby', $tab.id);\n    $panel.classList.add(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.unsetAttributes = function ($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id');\n    $tab.removeAttribute('role');\n    $tab.removeAttribute('aria-controls');\n    $tab.removeAttribute('aria-selected');\n    $tab.removeAttribute('tabindex'); // unset panel attributes\n\n    var $panel = this.getPanel($tab);\n    $panel.removeAttribute('role');\n    $panel.removeAttribute('aria-labelledby');\n    $panel.classList.remove(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.onTabClick = function (e) {\n    if (!e.target.classList.contains('govuk-tabs__tab')) {\n      // Allow events on child DOM elements to bubble up to tab parent\n      return false;\n    }\n\n    e.preventDefault();\n    var $newTab = e.target;\n    var $currentTab = this.getCurrentTab();\n    this.hideTab($currentTab);\n    this.showTab($newTab);\n    this.createHistoryEntry($newTab);\n  };\n\n  Tabs.prototype.createHistoryEntry = function ($tab) {\n    var $panel = this.getPanel($tab); // Save and restore the id\n    // so the page doesn't jump when a user clicks a tab (which changes the hash)\n\n    var id = $panel.id;\n    $panel.id = '';\n    this.changingHash = true;\n    window.location.hash = this.getHref($tab).slice(1);\n    $panel.id = id;\n  };\n\n  Tabs.prototype.onTabKeydown = function (e) {\n    switch (e.keyCode) {\n      case this.keys.left:\n      case this.keys.up:\n        this.activatePreviousTab();\n        e.preventDefault();\n        break;\n\n      case this.keys.right:\n      case this.keys.down:\n        this.activateNextTab();\n        e.preventDefault();\n        break;\n    }\n  };\n\n  Tabs.prototype.activateNextTab = function () {\n    var currentTab = this.getCurrentTab();\n    var nextTabListItem = currentTab.parentNode.nextElementSibling;\n\n    if (nextTabListItem) {\n      var nextTab = nextTabListItem.querySelector('.govuk-tabs__tab');\n    }\n\n    if (nextTab) {\n      this.hideTab(currentTab);\n      this.showTab(nextTab);\n      nextTab.focus();\n      this.createHistoryEntry(nextTab);\n    }\n  };\n\n  Tabs.prototype.activatePreviousTab = function () {\n    var currentTab = this.getCurrentTab();\n    var previousTabListItem = currentTab.parentNode.previousElementSibling;\n\n    if (previousTabListItem) {\n      var previousTab = previousTabListItem.querySelector('.govuk-tabs__tab');\n    }\n\n    if (previousTab) {\n      this.hideTab(currentTab);\n      this.showTab(previousTab);\n      previousTab.focus();\n      this.createHistoryEntry(previousTab);\n    }\n  };\n\n  Tabs.prototype.getPanel = function ($tab) {\n    var $panel = this.$module.querySelector(this.getHref($tab));\n    return $panel;\n  };\n\n  Tabs.prototype.showPanel = function ($tab) {\n    var $panel = this.getPanel($tab);\n    $panel.classList.remove(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.hidePanel = function (tab) {\n    var $panel = this.getPanel(tab);\n    $panel.classList.add(this.jsHiddenClass);\n  };\n\n  Tabs.prototype.unhighlightTab = function ($tab) {\n    $tab.setAttribute('aria-selected', 'false');\n    $tab.parentNode.classList.remove('govuk-tabs__list-item--selected');\n    $tab.setAttribute('tabindex', '-1');\n  };\n\n  Tabs.prototype.highlightTab = function ($tab) {\n    $tab.setAttribute('aria-selected', 'true');\n    $tab.parentNode.classList.add('govuk-tabs__list-item--selected');\n    $tab.setAttribute('tabindex', '0');\n  };\n\n  Tabs.prototype.getCurrentTab = function () {\n    return this.$module.querySelector('.govuk-tabs__list-item--selected .govuk-tabs__tab');\n  }; // this is because IE doesn't always return the actual value but a relative full path\n  // should be a utility function most prob\n  // http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/\n\n\n  Tabs.prototype.getHref = function ($tab) {\n    var href = $tab.getAttribute('href');\n    var hash = href.slice(href.indexOf('#'), href.length);\n    return hash;\n  };\n\n  function initAll(options) {\n    // Set the options to an empty object by default if no options are passed.\n    options = typeof options !== 'undefined' ? options : {}; // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n    // Defaults to the entire document if nothing is set.\n\n    var scope = typeof options.scope !== 'undefined' ? options.scope : document;\n    var $buttons = scope.querySelectorAll('[data-module=\"govuk-button\"]');\n    nodeListForEach($buttons, function ($button) {\n      new Button($button).init();\n    });\n    var $accordions = scope.querySelectorAll('[data-module=\"govuk-accordion\"]');\n    nodeListForEach($accordions, function ($accordion) {\n      new Accordion($accordion).init();\n    });\n    var $details = scope.querySelectorAll('[data-module=\"govuk-details\"]');\n    nodeListForEach($details, function ($detail) {\n      new Details($detail).init();\n    });\n    var $characterCounts = scope.querySelectorAll('[data-module=\"govuk-character-count\"]');\n    nodeListForEach($characterCounts, function ($characterCount) {\n      new CharacterCount($characterCount).init();\n    });\n    var $checkboxes = scope.querySelectorAll('[data-module=\"govuk-checkboxes\"]');\n    nodeListForEach($checkboxes, function ($checkbox) {\n      new Checkboxes($checkbox).init();\n    }); // Find first error summary module to enhance.\n\n    var $errorSummary = scope.querySelector('[data-module=\"govuk-error-summary\"]');\n    new ErrorSummary($errorSummary).init(); // Find first header module to enhance.\n\n    var $toggleButton = scope.querySelector('[data-module=\"govuk-header\"]');\n    new Header($toggleButton).init();\n    var $notificationBanners = scope.querySelectorAll('[data-module=\"govuk-notification-banner\"]');\n    nodeListForEach($notificationBanners, function ($notificationBanner) {\n      new NotificationBanner($notificationBanner).init();\n    });\n    var $radios = scope.querySelectorAll('[data-module=\"govuk-radios\"]');\n    nodeListForEach($radios, function ($radio) {\n      new Radios($radio).init();\n    });\n    var $tabs = scope.querySelectorAll('[data-module=\"govuk-tabs\"]');\n    nodeListForEach($tabs, function ($tabs) {\n      new Tabs($tabs).init();\n    });\n  }\n\n  exports.initAll = initAll;\n  exports.Accordion = Accordion;\n  exports.Button = Button;\n  exports.Details = Details;\n  exports.CharacterCount = CharacterCount;\n  exports.Checkboxes = Checkboxes;\n  exports.ErrorSummary = ErrorSummary;\n  exports.Header = Header;\n  exports.Radios = Radios;\n  exports.Tabs = Tabs;\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./node_modules/govuk-frontend/govuk/all.js?");

/***/ }),

/***/ "./node_modules/nunjucks/browser/nunjucks.js":
/*!***************************************************!*\
  !*** ./node_modules/nunjucks/browser/nunjucks.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate) {/*! Browser bundle of nunjucks 3.2.3  */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (true) module.exports = factory();else {}\n})(typeof self !== 'undefined' ? self : this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            /******/\n            configurable: false,\n\n            /******/\n            enumerable: true,\n\n            /******/\n            get: getter\n            /******/\n\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 11);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var ArrayProto = Array.prototype;\n      var ObjProto = Object.prototype;\n      var escapeMap = {\n        '&': '&amp;',\n        '\"': '&quot;',\n        '\\'': '&#39;',\n        '<': '&lt;',\n        '>': '&gt;'\n      };\n      var escapeRegex = /[&\"'<>]/g;\n      var exports = module.exports = {};\n\n      function hasOwnProp(obj, k) {\n        return ObjProto.hasOwnProperty.call(obj, k);\n      }\n\n      exports.hasOwnProp = hasOwnProp;\n\n      function lookupEscape(ch) {\n        return escapeMap[ch];\n      }\n\n      function _prettifyError(path, withInternals, err) {\n        if (!err.Update) {\n          // not one of ours, cast it\n          err = new exports.TemplateError(err);\n        }\n\n        err.Update(path); // Unless they marked the dev flag, show them a trace from here\n\n        if (!withInternals) {\n          var old = err;\n          err = new Error(old.message);\n          err.name = old.name;\n        }\n\n        return err;\n      }\n\n      exports._prettifyError = _prettifyError;\n\n      function TemplateError(message, lineno, colno) {\n        var err;\n        var cause;\n\n        if (message instanceof Error) {\n          cause = message;\n          message = cause.name + \": \" + cause.message;\n        }\n\n        if (Object.setPrototypeOf) {\n          err = new Error(message);\n          Object.setPrototypeOf(err, TemplateError.prototype);\n        } else {\n          err = this;\n          Object.defineProperty(err, 'message', {\n            enumerable: false,\n            writable: true,\n            value: message\n          });\n        }\n\n        Object.defineProperty(err, 'name', {\n          value: 'Template render error'\n        });\n\n        if (Error.captureStackTrace) {\n          Error.captureStackTrace(err, this.constructor);\n        }\n\n        var getStack;\n\n        if (cause) {\n          var stackDescriptor = Object.getOwnPropertyDescriptor(cause, 'stack');\n\n          getStack = stackDescriptor && (stackDescriptor.get || function () {\n            return stackDescriptor.value;\n          });\n\n          if (!getStack) {\n            getStack = function getStack() {\n              return cause.stack;\n            };\n          }\n        } else {\n          var stack = new Error(message).stack;\n\n          getStack = function getStack() {\n            return stack;\n          };\n        }\n\n        Object.defineProperty(err, 'stack', {\n          get: function get() {\n            return getStack.call(err);\n          }\n        });\n        Object.defineProperty(err, 'cause', {\n          value: cause\n        });\n        err.lineno = lineno;\n        err.colno = colno;\n        err.firstUpdate = true;\n\n        err.Update = function Update(path) {\n          var msg = '(' + (path || 'unknown path') + ')'; // only show lineno + colno next to path of template\n          // where error occurred\n\n          if (this.firstUpdate) {\n            if (this.lineno && this.colno) {\n              msg += \" [Line \" + this.lineno + \", Column \" + this.colno + \"]\";\n            } else if (this.lineno) {\n              msg += \" [Line \" + this.lineno + \"]\";\n            }\n          }\n\n          msg += '\\n ';\n\n          if (this.firstUpdate) {\n            msg += ' ';\n          }\n\n          this.message = msg + (this.message || '');\n          this.firstUpdate = false;\n          return this;\n        };\n\n        return err;\n      }\n\n      if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(TemplateError.prototype, Error.prototype);\n      } else {\n        TemplateError.prototype = Object.create(Error.prototype, {\n          constructor: {\n            value: TemplateError\n          }\n        });\n      }\n\n      exports.TemplateError = TemplateError;\n\n      function escape(val) {\n        return val.replace(escapeRegex, lookupEscape);\n      }\n\n      exports.escape = escape;\n\n      function isFunction(obj) {\n        return ObjProto.toString.call(obj) === '[object Function]';\n      }\n\n      exports.isFunction = isFunction;\n\n      function isArray(obj) {\n        return ObjProto.toString.call(obj) === '[object Array]';\n      }\n\n      exports.isArray = isArray;\n\n      function isString(obj) {\n        return ObjProto.toString.call(obj) === '[object String]';\n      }\n\n      exports.isString = isString;\n\n      function isObject(obj) {\n        return ObjProto.toString.call(obj) === '[object Object]';\n      }\n\n      exports.isObject = isObject;\n      /**\n       * @param {string|number} attr\n       * @returns {(string|number)[]}\n       * @private\n       */\n\n      function _prepareAttributeParts(attr) {\n        if (!attr) {\n          return [];\n        }\n\n        if (typeof attr === 'string') {\n          return attr.split('.');\n        }\n\n        return [attr];\n      }\n      /**\n       * @param {string}   attribute      Attribute value. Dots allowed.\n       * @returns {function(Object): *}\n       */\n\n\n      function getAttrGetter(attribute) {\n        var parts = _prepareAttributeParts(attribute);\n\n        return function attrGetter(item) {\n          var _item = item;\n\n          for (var i = 0; i < parts.length; i++) {\n            var part = parts[i]; // If item is not an object, and we still got parts to handle, it means\n            // that something goes wrong. Just roll out to undefined in that case.\n\n            if (hasOwnProp(_item, part)) {\n              _item = _item[part];\n            } else {\n              return undefined;\n            }\n          }\n\n          return _item;\n        };\n      }\n\n      exports.getAttrGetter = getAttrGetter;\n\n      function groupBy(obj, val, throwOnUndefined) {\n        var result = {};\n        var iterator = isFunction(val) ? val : getAttrGetter(val);\n\n        for (var i = 0; i < obj.length; i++) {\n          var value = obj[i];\n          var key = iterator(value, i);\n\n          if (key === undefined && throwOnUndefined === true) {\n            throw new TypeError(\"groupby: attribute \\\"\" + val + \"\\\" resolved to undefined\");\n          }\n\n          (result[key] || (result[key] = [])).push(value);\n        }\n\n        return result;\n      }\n\n      exports.groupBy = groupBy;\n\n      function toArray(obj) {\n        return Array.prototype.slice.call(obj);\n      }\n\n      exports.toArray = toArray;\n\n      function without(array) {\n        var result = [];\n\n        if (!array) {\n          return result;\n        }\n\n        var length = array.length;\n        var contains = toArray(arguments).slice(1);\n        var index = -1;\n\n        while (++index < length) {\n          if (indexOf(contains, array[index]) === -1) {\n            result.push(array[index]);\n          }\n        }\n\n        return result;\n      }\n\n      exports.without = without;\n\n      function repeat(char_, n) {\n        var str = '';\n\n        for (var i = 0; i < n; i++) {\n          str += char_;\n        }\n\n        return str;\n      }\n\n      exports.repeat = repeat;\n\n      function each(obj, func, context) {\n        if (obj == null) {\n          return;\n        }\n\n        if (ArrayProto.forEach && obj.forEach === ArrayProto.forEach) {\n          obj.forEach(func, context);\n        } else if (obj.length === +obj.length) {\n          for (var i = 0, l = obj.length; i < l; i++) {\n            func.call(context, obj[i], i, obj);\n          }\n        }\n      }\n\n      exports.each = each;\n\n      function map(obj, func) {\n        var results = [];\n\n        if (obj == null) {\n          return results;\n        }\n\n        if (ArrayProto.map && obj.map === ArrayProto.map) {\n          return obj.map(func);\n        }\n\n        for (var i = 0; i < obj.length; i++) {\n          results[results.length] = func(obj[i], i);\n        }\n\n        if (obj.length === +obj.length) {\n          results.length = obj.length;\n        }\n\n        return results;\n      }\n\n      exports.map = map;\n\n      function asyncIter(arr, iter, cb) {\n        var i = -1;\n\n        function next() {\n          i++;\n\n          if (i < arr.length) {\n            iter(arr[i], i, next, cb);\n          } else {\n            cb();\n          }\n        }\n\n        next();\n      }\n\n      exports.asyncIter = asyncIter;\n\n      function asyncFor(obj, iter, cb) {\n        var keys = keys_(obj || {});\n        var len = keys.length;\n        var i = -1;\n\n        function next() {\n          i++;\n          var k = keys[i];\n\n          if (i < len) {\n            iter(k, obj[k], i, len, next);\n          } else {\n            cb();\n          }\n        }\n\n        next();\n      }\n\n      exports.asyncFor = asyncFor;\n\n      function indexOf(arr, searchElement, fromIndex) {\n        return Array.prototype.indexOf.call(arr || [], searchElement, fromIndex);\n      }\n\n      exports.indexOf = indexOf;\n\n      function keys_(obj) {\n        /* eslint-disable no-restricted-syntax */\n        var arr = [];\n\n        for (var k in obj) {\n          if (hasOwnProp(obj, k)) {\n            arr.push(k);\n          }\n        }\n\n        return arr;\n      }\n\n      exports.keys = keys_;\n\n      function _entries(obj) {\n        return keys_(obj).map(function (k) {\n          return [k, obj[k]];\n        });\n      }\n\n      exports._entries = _entries;\n\n      function _values(obj) {\n        return keys_(obj).map(function (k) {\n          return obj[k];\n        });\n      }\n\n      exports._values = _values;\n\n      function extend(obj1, obj2) {\n        obj1 = obj1 || {};\n        keys_(obj2).forEach(function (k) {\n          obj1[k] = obj2[k];\n        });\n        return obj1;\n      }\n\n      exports._assign = exports.extend = extend;\n\n      function inOperator(key, val) {\n        if (isArray(val) || isString(val)) {\n          return val.indexOf(key) !== -1;\n        } else if (isObject(val)) {\n          return key in val;\n        }\n\n        throw new Error('Cannot use \"in\" operator to search for \"' + key + '\" in unexpected types.');\n      }\n\n      exports.inOperator = inOperator;\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\"; // A simple class system, more documentation to come\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var EventEmitter = __webpack_require__(16);\n\n      var lib = __webpack_require__(0);\n\n      function parentWrap(parent, prop) {\n        if (typeof parent !== 'function' || typeof prop !== 'function') {\n          return prop;\n        }\n\n        return function wrap() {\n          // Save the current parent method\n          var tmp = this.parent; // Set parent to the previous method, call, and restore\n\n          this.parent = parent;\n          var res = prop.apply(this, arguments);\n          this.parent = tmp;\n          return res;\n        };\n      }\n\n      function extendClass(cls, name, props) {\n        props = props || {};\n        lib.keys(props).forEach(function (k) {\n          props[k] = parentWrap(cls.prototype[k], props[k]);\n        });\n\n        var subclass = /*#__PURE__*/function (_cls) {\n          _inheritsLoose(subclass, _cls);\n\n          function subclass() {\n            return _cls.apply(this, arguments) || this;\n          }\n\n          _createClass(subclass, [{\n            key: \"typename\",\n            get: function get() {\n              return name;\n            }\n          }]);\n\n          return subclass;\n        }(cls);\n\n        lib._assign(subclass.prototype, props);\n\n        return subclass;\n      }\n\n      var Obj = /*#__PURE__*/function () {\n        function Obj() {\n          // Unfortunately necessary for backwards compatibility\n          this.init.apply(this, arguments);\n        }\n\n        var _proto = Obj.prototype;\n\n        _proto.init = function init() {};\n\n        Obj.extend = function extend(name, props) {\n          if (typeof name === 'object') {\n            props = name;\n            name = 'anonymous';\n          }\n\n          return extendClass(this, name, props);\n        };\n\n        _createClass(Obj, [{\n          key: \"typename\",\n          get: function get() {\n            return this.constructor.name;\n          }\n        }]);\n\n        return Obj;\n      }();\n\n      var EmitterObj = /*#__PURE__*/function (_EventEmitter) {\n        _inheritsLoose(EmitterObj, _EventEmitter);\n\n        function EmitterObj() {\n          var _this2;\n\n          var _this;\n\n          _this = _EventEmitter.call(this) || this; // Unfortunately necessary for backwards compatibility\n\n          (_this2 = _this).init.apply(_this2, arguments);\n\n          return _this;\n        }\n\n        var _proto2 = EmitterObj.prototype;\n\n        _proto2.init = function init() {};\n\n        EmitterObj.extend = function extend(name, props) {\n          if (typeof name === 'object') {\n            props = name;\n            name = 'anonymous';\n          }\n\n          return extendClass(this, name, props);\n        };\n\n        _createClass(EmitterObj, [{\n          key: \"typename\",\n          get: function get() {\n            return this.constructor.name;\n          }\n        }]);\n\n        return EmitterObj;\n      }(EventEmitter);\n\n      module.exports = {\n        Obj: Obj,\n        EmitterObj: EmitterObj\n      };\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var lib = __webpack_require__(0);\n\n      var arrayFrom = Array.from;\n      var supportsIterators = typeof Symbol === 'function' && Symbol.iterator && typeof arrayFrom === 'function'; // Frames keep track of scoping both at compile-time and run-time so\n      // we know how to access variables. Block tags can introduce special\n      // variables, for example.\n\n      var Frame = /*#__PURE__*/function () {\n        function Frame(parent, isolateWrites) {\n          this.variables = Object.create(null);\n          this.parent = parent;\n          this.topLevel = false; // if this is true, writes (set) should never propagate upwards past\n          // this frame to its parent (though reads may).\n\n          this.isolateWrites = isolateWrites;\n        }\n\n        var _proto = Frame.prototype;\n\n        _proto.set = function set(name, val, resolveUp) {\n          // Allow variables with dots by automatically creating the\n          // nested structure\n          var parts = name.split('.');\n          var obj = this.variables;\n          var frame = this;\n\n          if (resolveUp) {\n            if (frame = this.resolve(parts[0], true)) {\n              frame.set(name, val);\n              return;\n            }\n          }\n\n          for (var i = 0; i < parts.length - 1; i++) {\n            var id = parts[i];\n\n            if (!obj[id]) {\n              obj[id] = {};\n            }\n\n            obj = obj[id];\n          }\n\n          obj[parts[parts.length - 1]] = val;\n        };\n\n        _proto.get = function get(name) {\n          var val = this.variables[name];\n\n          if (val !== undefined) {\n            return val;\n          }\n\n          return null;\n        };\n\n        _proto.lookup = function lookup(name) {\n          var p = this.parent;\n          var val = this.variables[name];\n\n          if (val !== undefined) {\n            return val;\n          }\n\n          return p && p.lookup(name);\n        };\n\n        _proto.resolve = function resolve(name, forWrite) {\n          var p = forWrite && this.isolateWrites ? undefined : this.parent;\n          var val = this.variables[name];\n\n          if (val !== undefined) {\n            return this;\n          }\n\n          return p && p.resolve(name);\n        };\n\n        _proto.push = function push(isolateWrites) {\n          return new Frame(this, isolateWrites);\n        };\n\n        _proto.pop = function pop() {\n          return this.parent;\n        };\n\n        return Frame;\n      }();\n\n      function makeMacro(argNames, kwargNames, func) {\n        return function macro() {\n          for (var _len = arguments.length, macroArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n            macroArgs[_key] = arguments[_key];\n          }\n\n          var argCount = numArgs(macroArgs);\n          var args;\n          var kwargs = getKeywordArgs(macroArgs);\n\n          if (argCount > argNames.length) {\n            args = macroArgs.slice(0, argNames.length); // Positional arguments that should be passed in as\n            // keyword arguments (essentially default values)\n\n            macroArgs.slice(args.length, argCount).forEach(function (val, i) {\n              if (i < kwargNames.length) {\n                kwargs[kwargNames[i]] = val;\n              }\n            });\n            args.push(kwargs);\n          } else if (argCount < argNames.length) {\n            args = macroArgs.slice(0, argCount);\n\n            for (var i = argCount; i < argNames.length; i++) {\n              var arg = argNames[i]; // Keyword arguments that should be passed as\n              // positional arguments, i.e. the caller explicitly\n              // used the name of a positional arg\n\n              args.push(kwargs[arg]);\n              delete kwargs[arg];\n            }\n\n            args.push(kwargs);\n          } else {\n            args = macroArgs;\n          }\n\n          return func.apply(this, args);\n        };\n      }\n\n      function makeKeywordArgs(obj) {\n        obj.__keywords = true;\n        return obj;\n      }\n\n      function isKeywordArgs(obj) {\n        return obj && Object.prototype.hasOwnProperty.call(obj, '__keywords');\n      }\n\n      function getKeywordArgs(args) {\n        var len = args.length;\n\n        if (len) {\n          var lastArg = args[len - 1];\n\n          if (isKeywordArgs(lastArg)) {\n            return lastArg;\n          }\n        }\n\n        return {};\n      }\n\n      function numArgs(args) {\n        var len = args.length;\n\n        if (len === 0) {\n          return 0;\n        }\n\n        var lastArg = args[len - 1];\n\n        if (isKeywordArgs(lastArg)) {\n          return len - 1;\n        } else {\n          return len;\n        }\n      } // A SafeString object indicates that the string should not be\n      // autoescaped. This happens magically because autoescaping only\n      // occurs on primitive string objects.\n\n\n      function SafeString(val) {\n        if (typeof val !== 'string') {\n          return val;\n        }\n\n        this.val = val;\n        this.length = val.length;\n      }\n\n      SafeString.prototype = Object.create(String.prototype, {\n        length: {\n          writable: true,\n          configurable: true,\n          value: 0\n        }\n      });\n\n      SafeString.prototype.valueOf = function valueOf() {\n        return this.val;\n      };\n\n      SafeString.prototype.toString = function toString() {\n        return this.val;\n      };\n\n      function copySafeness(dest, target) {\n        if (dest instanceof SafeString) {\n          return new SafeString(target);\n        }\n\n        return target.toString();\n      }\n\n      function markSafe(val) {\n        var type = typeof val;\n\n        if (type === 'string') {\n          return new SafeString(val);\n        } else if (type !== 'function') {\n          return val;\n        } else {\n          return function wrapSafe(args) {\n            var ret = val.apply(this, arguments);\n\n            if (typeof ret === 'string') {\n              return new SafeString(ret);\n            }\n\n            return ret;\n          };\n        }\n      }\n\n      function suppressValue(val, autoescape) {\n        val = val !== undefined && val !== null ? val : '';\n\n        if (autoescape && !(val instanceof SafeString)) {\n          val = lib.escape(val.toString());\n        }\n\n        return val;\n      }\n\n      function ensureDefined(val, lineno, colno) {\n        if (val === null || val === undefined) {\n          throw new lib.TemplateError('attempted to output null or undefined value', lineno + 1, colno + 1);\n        }\n\n        return val;\n      }\n\n      function memberLookup(obj, val) {\n        if (obj === undefined || obj === null) {\n          return undefined;\n        }\n\n        if (typeof obj[val] === 'function') {\n          return function () {\n            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              args[_key2] = arguments[_key2];\n            }\n\n            return obj[val].apply(obj, args);\n          };\n        }\n\n        return obj[val];\n      }\n\n      function callWrap(obj, name, context, args) {\n        if (!obj) {\n          throw new Error('Unable to call `' + name + '`, which is undefined or falsey');\n        } else if (typeof obj !== 'function') {\n          throw new Error('Unable to call `' + name + '`, which is not a function');\n        }\n\n        return obj.apply(context, args);\n      }\n\n      function contextOrFrameLookup(context, frame, name) {\n        var val = frame.lookup(name);\n        return val !== undefined ? val : context.lookup(name);\n      }\n\n      function handleError(error, lineno, colno) {\n        if (error.lineno) {\n          return error;\n        } else {\n          return new lib.TemplateError(error, lineno, colno);\n        }\n      }\n\n      function asyncEach(arr, dimen, iter, cb) {\n        if (lib.isArray(arr)) {\n          var len = arr.length;\n          lib.asyncIter(arr, function iterCallback(item, i, next) {\n            switch (dimen) {\n              case 1:\n                iter(item, i, len, next);\n                break;\n\n              case 2:\n                iter(item[0], item[1], i, len, next);\n                break;\n\n              case 3:\n                iter(item[0], item[1], item[2], i, len, next);\n                break;\n\n              default:\n                item.push(i, len, next);\n                iter.apply(this, item);\n            }\n          }, cb);\n        } else {\n          lib.asyncFor(arr, function iterCallback(key, val, i, len, next) {\n            iter(key, val, i, len, next);\n          }, cb);\n        }\n      }\n\n      function asyncAll(arr, dimen, func, cb) {\n        var finished = 0;\n        var len;\n        var outputArr;\n\n        function done(i, output) {\n          finished++;\n          outputArr[i] = output;\n\n          if (finished === len) {\n            cb(null, outputArr.join(''));\n          }\n        }\n\n        if (lib.isArray(arr)) {\n          len = arr.length;\n          outputArr = new Array(len);\n\n          if (len === 0) {\n            cb(null, '');\n          } else {\n            for (var i = 0; i < arr.length; i++) {\n              var item = arr[i];\n\n              switch (dimen) {\n                case 1:\n                  func(item, i, len, done);\n                  break;\n\n                case 2:\n                  func(item[0], item[1], i, len, done);\n                  break;\n\n                case 3:\n                  func(item[0], item[1], item[2], i, len, done);\n                  break;\n\n                default:\n                  item.push(i, len, done);\n                  func.apply(this, item);\n              }\n            }\n          }\n        } else {\n          var keys = lib.keys(arr || {});\n          len = keys.length;\n          outputArr = new Array(len);\n\n          if (len === 0) {\n            cb(null, '');\n          } else {\n            for (var _i = 0; _i < keys.length; _i++) {\n              var k = keys[_i];\n              func(k, arr[k], _i, len, done);\n            }\n          }\n        }\n      }\n\n      function fromIterator(arr) {\n        if (typeof arr !== 'object' || arr === null || lib.isArray(arr)) {\n          return arr;\n        } else if (supportsIterators && Symbol.iterator in arr) {\n          return arrayFrom(arr);\n        } else {\n          return arr;\n        }\n      }\n\n      module.exports = {\n        Frame: Frame,\n        makeMacro: makeMacro,\n        makeKeywordArgs: makeKeywordArgs,\n        numArgs: numArgs,\n        suppressValue: suppressValue,\n        ensureDefined: ensureDefined,\n        memberLookup: memberLookup,\n        contextOrFrameLookup: contextOrFrameLookup,\n        callWrap: callWrap,\n        handleError: handleError,\n        isArray: lib.isArray,\n        keys: lib.keys,\n        SafeString: SafeString,\n        copySafeness: copySafeness,\n        markSafe: markSafe,\n        asyncEach: asyncEach,\n        asyncAll: asyncAll,\n        inOperator: lib.inOperator,\n        fromIterator: fromIterator\n      };\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _defineProperties(target, props) {\n        for (var i = 0; i < props.length; i++) {\n          var descriptor = props[i];\n          descriptor.enumerable = descriptor.enumerable || false;\n          descriptor.configurable = true;\n          if (\"value\" in descriptor) descriptor.writable = true;\n          Object.defineProperty(target, descriptor.key, descriptor);\n        }\n      }\n\n      function _createClass(Constructor, protoProps, staticProps) {\n        if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n        if (staticProps) _defineProperties(Constructor, staticProps);\n        return Constructor;\n      }\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var _require = __webpack_require__(1),\n          Obj = _require.Obj;\n\n      function traverseAndCheck(obj, type, results) {\n        if (obj instanceof type) {\n          results.push(obj);\n        }\n\n        if (obj instanceof Node) {\n          obj.findAll(type, results);\n        }\n      }\n\n      var Node = /*#__PURE__*/function (_Obj) {\n        _inheritsLoose(Node, _Obj);\n\n        function Node() {\n          return _Obj.apply(this, arguments) || this;\n        }\n\n        var _proto = Node.prototype;\n\n        _proto.init = function init(lineno, colno) {\n          var _arguments = arguments,\n              _this = this;\n\n          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n            args[_key - 2] = arguments[_key];\n          }\n\n          this.lineno = lineno;\n          this.colno = colno;\n          this.fields.forEach(function (field, i) {\n            // The first two args are line/col numbers, so offset by 2\n            var val = _arguments[i + 2]; // Fields should never be undefined, but null. It makes\n            // testing easier to normalize values.\n\n            if (val === undefined) {\n              val = null;\n            }\n\n            _this[field] = val;\n          });\n        };\n\n        _proto.findAll = function findAll(type, results) {\n          var _this2 = this;\n\n          results = results || [];\n\n          if (this instanceof NodeList) {\n            this.children.forEach(function (child) {\n              return traverseAndCheck(child, type, results);\n            });\n          } else {\n            this.fields.forEach(function (field) {\n              return traverseAndCheck(_this2[field], type, results);\n            });\n          }\n\n          return results;\n        };\n\n        _proto.iterFields = function iterFields(func) {\n          var _this3 = this;\n\n          this.fields.forEach(function (field) {\n            func(_this3[field], field);\n          });\n        };\n\n        return Node;\n      }(Obj); // Abstract nodes\n\n\n      var Value = /*#__PURE__*/function (_Node) {\n        _inheritsLoose(Value, _Node);\n\n        function Value() {\n          return _Node.apply(this, arguments) || this;\n        }\n\n        _createClass(Value, [{\n          key: \"typename\",\n          get: function get() {\n            return 'Value';\n          }\n        }, {\n          key: \"fields\",\n          get: function get() {\n            return ['value'];\n          }\n        }]);\n\n        return Value;\n      }(Node); // Concrete nodes\n\n\n      var NodeList = /*#__PURE__*/function (_Node2) {\n        _inheritsLoose(NodeList, _Node2);\n\n        function NodeList() {\n          return _Node2.apply(this, arguments) || this;\n        }\n\n        var _proto2 = NodeList.prototype;\n\n        _proto2.init = function init(lineno, colno, nodes) {\n          _Node2.prototype.init.call(this, lineno, colno, nodes || []);\n        };\n\n        _proto2.addChild = function addChild(node) {\n          this.children.push(node);\n        };\n\n        _createClass(NodeList, [{\n          key: \"typename\",\n          get: function get() {\n            return 'NodeList';\n          }\n        }, {\n          key: \"fields\",\n          get: function get() {\n            return ['children'];\n          }\n        }]);\n\n        return NodeList;\n      }(Node);\n\n      var Root = NodeList.extend('Root');\n      var Literal = Value.extend('Literal');\n      var Symbol = Value.extend('Symbol');\n      var Group = NodeList.extend('Group');\n      var ArrayNode = NodeList.extend('Array');\n      var Pair = Node.extend('Pair', {\n        fields: ['key', 'value']\n      });\n      var Dict = NodeList.extend('Dict');\n      var LookupVal = Node.extend('LookupVal', {\n        fields: ['target', 'val']\n      });\n      var If = Node.extend('If', {\n        fields: ['cond', 'body', 'else_']\n      });\n      var IfAsync = If.extend('IfAsync');\n      var InlineIf = Node.extend('InlineIf', {\n        fields: ['cond', 'body', 'else_']\n      });\n      var For = Node.extend('For', {\n        fields: ['arr', 'name', 'body', 'else_']\n      });\n      var AsyncEach = For.extend('AsyncEach');\n      var AsyncAll = For.extend('AsyncAll');\n      var Macro = Node.extend('Macro', {\n        fields: ['name', 'args', 'body']\n      });\n      var Caller = Macro.extend('Caller');\n      var Import = Node.extend('Import', {\n        fields: ['template', 'target', 'withContext']\n      });\n\n      var FromImport = /*#__PURE__*/function (_Node3) {\n        _inheritsLoose(FromImport, _Node3);\n\n        function FromImport() {\n          return _Node3.apply(this, arguments) || this;\n        }\n\n        var _proto3 = FromImport.prototype;\n\n        _proto3.init = function init(lineno, colno, template, names, withContext) {\n          _Node3.prototype.init.call(this, lineno, colno, template, names || new NodeList(), withContext);\n        };\n\n        _createClass(FromImport, [{\n          key: \"typename\",\n          get: function get() {\n            return 'FromImport';\n          }\n        }, {\n          key: \"fields\",\n          get: function get() {\n            return ['template', 'names', 'withContext'];\n          }\n        }]);\n\n        return FromImport;\n      }(Node);\n\n      var FunCall = Node.extend('FunCall', {\n        fields: ['name', 'args']\n      });\n      var Filter = FunCall.extend('Filter');\n      var FilterAsync = Filter.extend('FilterAsync', {\n        fields: ['name', 'args', 'symbol']\n      });\n      var KeywordArgs = Dict.extend('KeywordArgs');\n      var Block = Node.extend('Block', {\n        fields: ['name', 'body']\n      });\n      var Super = Node.extend('Super', {\n        fields: ['blockName', 'symbol']\n      });\n      var TemplateRef = Node.extend('TemplateRef', {\n        fields: ['template']\n      });\n      var Extends = TemplateRef.extend('Extends');\n      var Include = Node.extend('Include', {\n        fields: ['template', 'ignoreMissing']\n      });\n      var Set = Node.extend('Set', {\n        fields: ['targets', 'value']\n      });\n      var Switch = Node.extend('Switch', {\n        fields: ['expr', 'cases', 'default']\n      });\n      var Case = Node.extend('Case', {\n        fields: ['cond', 'body']\n      });\n      var Output = NodeList.extend('Output');\n      var Capture = Node.extend('Capture', {\n        fields: ['body']\n      });\n      var TemplateData = Literal.extend('TemplateData');\n      var UnaryOp = Node.extend('UnaryOp', {\n        fields: ['target']\n      });\n      var BinOp = Node.extend('BinOp', {\n        fields: ['left', 'right']\n      });\n      var In = BinOp.extend('In');\n      var Is = BinOp.extend('Is');\n      var Or = BinOp.extend('Or');\n      var And = BinOp.extend('And');\n      var Not = UnaryOp.extend('Not');\n      var Add = BinOp.extend('Add');\n      var Concat = BinOp.extend('Concat');\n      var Sub = BinOp.extend('Sub');\n      var Mul = BinOp.extend('Mul');\n      var Div = BinOp.extend('Div');\n      var FloorDiv = BinOp.extend('FloorDiv');\n      var Mod = BinOp.extend('Mod');\n      var Pow = BinOp.extend('Pow');\n      var Neg = UnaryOp.extend('Neg');\n      var Pos = UnaryOp.extend('Pos');\n      var Compare = Node.extend('Compare', {\n        fields: ['expr', 'ops']\n      });\n      var CompareOperand = Node.extend('CompareOperand', {\n        fields: ['expr', 'type']\n      });\n      var CallExtension = Node.extend('CallExtension', {\n        init: function init(ext, prop, args, contentArgs) {\n          this.parent();\n          this.extName = ext.__name || ext;\n          this.prop = prop;\n          this.args = args || new NodeList();\n          this.contentArgs = contentArgs || [];\n          this.autoescape = ext.autoescape;\n        },\n        fields: ['extName', 'prop', 'args', 'contentArgs']\n      });\n      var CallExtensionAsync = CallExtension.extend('CallExtensionAsync'); // This is hacky, but this is just a debugging function anyway\n\n      function print(str, indent, inline) {\n        var lines = str.split('\\n');\n        lines.forEach(function (line, i) {\n          if (line && (inline && i > 0 || !inline)) {\n            process.stdout.write(' '.repeat(indent));\n          }\n\n          var nl = i === lines.length - 1 ? '' : '\\n';\n          process.stdout.write(\"\" + line + nl);\n        });\n      } // Print the AST in a nicely formatted tree format for debuggin\n\n\n      function printNodes(node, indent) {\n        indent = indent || 0;\n        print(node.typename + ': ', indent);\n\n        if (node instanceof NodeList) {\n          print('\\n');\n          node.children.forEach(function (n) {\n            printNodes(n, indent + 2);\n          });\n        } else if (node instanceof CallExtension) {\n          print(node.extName + \".\" + node.prop + \"\\n\");\n\n          if (node.args) {\n            printNodes(node.args, indent + 2);\n          }\n\n          if (node.contentArgs) {\n            node.contentArgs.forEach(function (n) {\n              printNodes(n, indent + 2);\n            });\n          }\n        } else {\n          var nodes = [];\n          var props = null;\n          node.iterFields(function (val, fieldName) {\n            if (val instanceof Node) {\n              nodes.push([fieldName, val]);\n            } else {\n              props = props || {};\n              props[fieldName] = val;\n            }\n          });\n\n          if (props) {\n            print(JSON.stringify(props, null, 2) + '\\n', null, true);\n          } else {\n            print('\\n');\n          }\n\n          nodes.forEach(function (_ref) {\n            var fieldName = _ref[0],\n                n = _ref[1];\n            print(\"[\" + fieldName + \"] =>\", indent + 2);\n            printNodes(n, indent + 4);\n          });\n        }\n      }\n\n      module.exports = {\n        Node: Node,\n        Root: Root,\n        NodeList: NodeList,\n        Value: Value,\n        Literal: Literal,\n        Symbol: Symbol,\n        Group: Group,\n        Array: ArrayNode,\n        Pair: Pair,\n        Dict: Dict,\n        Output: Output,\n        Capture: Capture,\n        TemplateData: TemplateData,\n        If: If,\n        IfAsync: IfAsync,\n        InlineIf: InlineIf,\n        For: For,\n        AsyncEach: AsyncEach,\n        AsyncAll: AsyncAll,\n        Macro: Macro,\n        Caller: Caller,\n        Import: Import,\n        FromImport: FromImport,\n        FunCall: FunCall,\n        Filter: Filter,\n        FilterAsync: FilterAsync,\n        KeywordArgs: KeywordArgs,\n        Block: Block,\n        Super: Super,\n        Extends: Extends,\n        Include: Include,\n        Set: Set,\n        Switch: Switch,\n        Case: Case,\n        LookupVal: LookupVal,\n        BinOp: BinOp,\n        In: In,\n        Is: Is,\n        Or: Or,\n        And: And,\n        Not: Not,\n        Add: Add,\n        Concat: Concat,\n        Sub: Sub,\n        Mul: Mul,\n        Div: Div,\n        FloorDiv: FloorDiv,\n        Mod: Mod,\n        Pow: Pow,\n        Neg: Neg,\n        Pos: Pos,\n        Compare: Compare,\n        CompareOperand: CompareOperand,\n        CallExtension: CallExtension,\n        CallExtensionAsync: CallExtensionAsync,\n        printNodes: printNodes\n      };\n      /***/\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports) {\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var parser = __webpack_require__(8);\n\n      var transformer = __webpack_require__(17);\n\n      var nodes = __webpack_require__(3);\n\n      var _require = __webpack_require__(0),\n          TemplateError = _require.TemplateError;\n\n      var _require2 = __webpack_require__(2),\n          Frame = _require2.Frame;\n\n      var _require3 = __webpack_require__(1),\n          Obj = _require3.Obj; // These are all the same for now, but shouldn't be passed straight\n      // through\n\n\n      var compareOps = {\n        '==': '==',\n        '===': '===',\n        '!=': '!=',\n        '!==': '!==',\n        '<': '<',\n        '>': '>',\n        '<=': '<=',\n        '>=': '>='\n      };\n\n      var Compiler = /*#__PURE__*/function (_Obj) {\n        _inheritsLoose(Compiler, _Obj);\n\n        function Compiler() {\n          return _Obj.apply(this, arguments) || this;\n        }\n\n        var _proto = Compiler.prototype;\n\n        _proto.init = function init(templateName, throwOnUndefined) {\n          this.templateName = templateName;\n          this.codebuf = [];\n          this.lastId = 0;\n          this.buffer = null;\n          this.bufferStack = [];\n          this._scopeClosers = '';\n          this.inBlock = false;\n          this.throwOnUndefined = throwOnUndefined;\n        };\n\n        _proto.fail = function fail(msg, lineno, colno) {\n          if (lineno !== undefined) {\n            lineno += 1;\n          }\n\n          if (colno !== undefined) {\n            colno += 1;\n          }\n\n          throw new TemplateError(msg, lineno, colno);\n        };\n\n        _proto._pushBuffer = function _pushBuffer() {\n          var id = this._tmpid();\n\n          this.bufferStack.push(this.buffer);\n          this.buffer = id;\n\n          this._emit(\"var \" + this.buffer + \" = \\\"\\\";\");\n\n          return id;\n        };\n\n        _proto._popBuffer = function _popBuffer() {\n          this.buffer = this.bufferStack.pop();\n        };\n\n        _proto._emit = function _emit(code) {\n          this.codebuf.push(code);\n        };\n\n        _proto._emitLine = function _emitLine(code) {\n          this._emit(code + '\\n');\n        };\n\n        _proto._emitLines = function _emitLines() {\n          var _this = this;\n\n          for (var _len = arguments.length, lines = new Array(_len), _key = 0; _key < _len; _key++) {\n            lines[_key] = arguments[_key];\n          }\n\n          lines.forEach(function (line) {\n            return _this._emitLine(line);\n          });\n        };\n\n        _proto._emitFuncBegin = function _emitFuncBegin(node, name) {\n          this.buffer = 'output';\n          this._scopeClosers = '';\n\n          this._emitLine(\"function \" + name + \"(env, context, frame, runtime, cb) {\");\n\n          this._emitLine(\"var lineno = \" + node.lineno + \";\");\n\n          this._emitLine(\"var colno = \" + node.colno + \";\");\n\n          this._emitLine(\"var \" + this.buffer + \" = \\\"\\\";\");\n\n          this._emitLine('try {');\n        };\n\n        _proto._emitFuncEnd = function _emitFuncEnd(noReturn) {\n          if (!noReturn) {\n            this._emitLine('cb(null, ' + this.buffer + ');');\n          }\n\n          this._closeScopeLevels();\n\n          this._emitLine('} catch (e) {');\n\n          this._emitLine('  cb(runtime.handleError(e, lineno, colno));');\n\n          this._emitLine('}');\n\n          this._emitLine('}');\n\n          this.buffer = null;\n        };\n\n        _proto._addScopeLevel = function _addScopeLevel() {\n          this._scopeClosers += '})';\n        };\n\n        _proto._closeScopeLevels = function _closeScopeLevels() {\n          this._emitLine(this._scopeClosers + ';');\n\n          this._scopeClosers = '';\n        };\n\n        _proto._withScopedSyntax = function _withScopedSyntax(func) {\n          var _scopeClosers = this._scopeClosers;\n          this._scopeClosers = '';\n          func.call(this);\n\n          this._closeScopeLevels();\n\n          this._scopeClosers = _scopeClosers;\n        };\n\n        _proto._makeCallback = function _makeCallback(res) {\n          var err = this._tmpid();\n\n          return 'function(' + err + (res ? ',' + res : '') + ') {\\n' + 'if(' + err + ') { cb(' + err + '); return; }';\n        };\n\n        _proto._tmpid = function _tmpid() {\n          this.lastId++;\n          return 't_' + this.lastId;\n        };\n\n        _proto._templateName = function _templateName() {\n          return this.templateName == null ? 'undefined' : JSON.stringify(this.templateName);\n        };\n\n        _proto._compileChildren = function _compileChildren(node, frame) {\n          var _this2 = this;\n\n          node.children.forEach(function (child) {\n            _this2.compile(child, frame);\n          });\n        };\n\n        _proto._compileAggregate = function _compileAggregate(node, frame, startChar, endChar) {\n          var _this3 = this;\n\n          if (startChar) {\n            this._emit(startChar);\n          }\n\n          node.children.forEach(function (child, i) {\n            if (i > 0) {\n              _this3._emit(',');\n            }\n\n            _this3.compile(child, frame);\n          });\n\n          if (endChar) {\n            this._emit(endChar);\n          }\n        };\n\n        _proto._compileExpression = function _compileExpression(node, frame) {\n          // TODO: I'm not really sure if this type check is worth it or\n          // not.\n          this.assertType(node, nodes.Literal, nodes.Symbol, nodes.Group, nodes.Array, nodes.Dict, nodes.FunCall, nodes.Caller, nodes.Filter, nodes.LookupVal, nodes.Compare, nodes.InlineIf, nodes.In, nodes.Is, nodes.And, nodes.Or, nodes.Not, nodes.Add, nodes.Concat, nodes.Sub, nodes.Mul, nodes.Div, nodes.FloorDiv, nodes.Mod, nodes.Pow, nodes.Neg, nodes.Pos, nodes.Compare, nodes.NodeList);\n          this.compile(node, frame);\n        };\n\n        _proto.assertType = function assertType(node) {\n          for (var _len2 = arguments.length, types = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            types[_key2 - 1] = arguments[_key2];\n          }\n\n          if (!types.some(function (t) {\n            return node instanceof t;\n          })) {\n            this.fail(\"assertType: invalid type: \" + node.typename, node.lineno, node.colno);\n          }\n        };\n\n        _proto.compileCallExtension = function compileCallExtension(node, frame, async) {\n          var _this4 = this;\n\n          var args = node.args;\n          var contentArgs = node.contentArgs;\n          var autoescape = typeof node.autoescape === 'boolean' ? node.autoescape : true;\n\n          if (!async) {\n            this._emit(this.buffer + \" += runtime.suppressValue(\");\n          }\n\n          this._emit(\"env.getExtension(\\\"\" + node.extName + \"\\\")[\\\"\" + node.prop + \"\\\"](\");\n\n          this._emit('context');\n\n          if (args || contentArgs) {\n            this._emit(',');\n          }\n\n          if (args) {\n            if (!(args instanceof nodes.NodeList)) {\n              this.fail('compileCallExtension: arguments must be a NodeList, ' + 'use `parser.parseSignature`');\n            }\n\n            args.children.forEach(function (arg, i) {\n              // Tag arguments are passed normally to the call. Note\n              // that keyword arguments are turned into a single js\n              // object as the last argument, if they exist.\n              _this4._compileExpression(arg, frame);\n\n              if (i !== args.children.length - 1 || contentArgs.length) {\n                _this4._emit(',');\n              }\n            });\n          }\n\n          if (contentArgs.length) {\n            contentArgs.forEach(function (arg, i) {\n              if (i > 0) {\n                _this4._emit(',');\n              }\n\n              if (arg) {\n                _this4._emitLine('function(cb) {');\n\n                _this4._emitLine('if(!cb) { cb = function(err) { if(err) { throw err; }}}');\n\n                var id = _this4._pushBuffer();\n\n                _this4._withScopedSyntax(function () {\n                  _this4.compile(arg, frame);\n\n                  _this4._emitLine(\"cb(null, \" + id + \");\");\n                });\n\n                _this4._popBuffer();\n\n                _this4._emitLine(\"return \" + id + \";\");\n\n                _this4._emitLine('}');\n              } else {\n                _this4._emit('null');\n              }\n            });\n          }\n\n          if (async) {\n            var res = this._tmpid();\n\n            this._emitLine(', ' + this._makeCallback(res));\n\n            this._emitLine(this.buffer + \" += runtime.suppressValue(\" + res + \", \" + autoescape + \" && env.opts.autoescape);\");\n\n            this._addScopeLevel();\n          } else {\n            this._emit(')');\n\n            this._emit(\", \" + autoescape + \" && env.opts.autoescape);\\n\");\n          }\n        };\n\n        _proto.compileCallExtensionAsync = function compileCallExtensionAsync(node, frame) {\n          this.compileCallExtension(node, frame, true);\n        };\n\n        _proto.compileNodeList = function compileNodeList(node, frame) {\n          this._compileChildren(node, frame);\n        };\n\n        _proto.compileLiteral = function compileLiteral(node) {\n          if (typeof node.value === 'string') {\n            var val = node.value.replace(/\\\\/g, '\\\\\\\\');\n            val = val.replace(/\"/g, '\\\\\"');\n            val = val.replace(/\\n/g, '\\\\n');\n            val = val.replace(/\\r/g, '\\\\r');\n            val = val.replace(/\\t/g, '\\\\t');\n            val = val.replace(/\\u2028/g, \"\\\\u2028\");\n\n            this._emit(\"\\\"\" + val + \"\\\"\");\n          } else if (node.value === null) {\n            this._emit('null');\n          } else {\n            this._emit(node.value.toString());\n          }\n        };\n\n        _proto.compileSymbol = function compileSymbol(node, frame) {\n          var name = node.value;\n          var v = frame.lookup(name);\n\n          if (v) {\n            this._emit(v);\n          } else {\n            this._emit('runtime.contextOrFrameLookup(' + 'context, frame, \"' + name + '\")');\n          }\n        };\n\n        _proto.compileGroup = function compileGroup(node, frame) {\n          this._compileAggregate(node, frame, '(', ')');\n        };\n\n        _proto.compileArray = function compileArray(node, frame) {\n          this._compileAggregate(node, frame, '[', ']');\n        };\n\n        _proto.compileDict = function compileDict(node, frame) {\n          this._compileAggregate(node, frame, '{', '}');\n        };\n\n        _proto.compilePair = function compilePair(node, frame) {\n          var key = node.key;\n          var val = node.value;\n\n          if (key instanceof nodes.Symbol) {\n            key = new nodes.Literal(key.lineno, key.colno, key.value);\n          } else if (!(key instanceof nodes.Literal && typeof key.value === 'string')) {\n            this.fail('compilePair: Dict keys must be strings or names', key.lineno, key.colno);\n          }\n\n          this.compile(key, frame);\n\n          this._emit(': ');\n\n          this._compileExpression(val, frame);\n        };\n\n        _proto.compileInlineIf = function compileInlineIf(node, frame) {\n          this._emit('(');\n\n          this.compile(node.cond, frame);\n\n          this._emit('?');\n\n          this.compile(node.body, frame);\n\n          this._emit(':');\n\n          if (node.else_ !== null) {\n            this.compile(node.else_, frame);\n          } else {\n            this._emit('\"\"');\n          }\n\n          this._emit(')');\n        };\n\n        _proto.compileIn = function compileIn(node, frame) {\n          this._emit('runtime.inOperator(');\n\n          this.compile(node.left, frame);\n\n          this._emit(',');\n\n          this.compile(node.right, frame);\n\n          this._emit(')');\n        };\n\n        _proto.compileIs = function compileIs(node, frame) {\n          // first, we need to try to get the name of the test function, if it's a\n          // callable (i.e., has args) and not a symbol.\n          var right = node.right.name ? node.right.name.value // otherwise go with the symbol value\n          : node.right.value;\n\n          this._emit('env.getTest(\"' + right + '\").call(context, ');\n\n          this.compile(node.left, frame); // compile the arguments for the callable if they exist\n\n          if (node.right.args) {\n            this._emit(',');\n\n            this.compile(node.right.args, frame);\n          }\n\n          this._emit(') === true');\n        };\n\n        _proto._binOpEmitter = function _binOpEmitter(node, frame, str) {\n          this.compile(node.left, frame);\n\n          this._emit(str);\n\n          this.compile(node.right, frame);\n        } // ensure concatenation instead of addition\n        // by adding empty string in between\n        ;\n\n        _proto.compileOr = function compileOr(node, frame) {\n          return this._binOpEmitter(node, frame, ' || ');\n        };\n\n        _proto.compileAnd = function compileAnd(node, frame) {\n          return this._binOpEmitter(node, frame, ' && ');\n        };\n\n        _proto.compileAdd = function compileAdd(node, frame) {\n          return this._binOpEmitter(node, frame, ' + ');\n        };\n\n        _proto.compileConcat = function compileConcat(node, frame) {\n          return this._binOpEmitter(node, frame, ' + \"\" + ');\n        };\n\n        _proto.compileSub = function compileSub(node, frame) {\n          return this._binOpEmitter(node, frame, ' - ');\n        };\n\n        _proto.compileMul = function compileMul(node, frame) {\n          return this._binOpEmitter(node, frame, ' * ');\n        };\n\n        _proto.compileDiv = function compileDiv(node, frame) {\n          return this._binOpEmitter(node, frame, ' / ');\n        };\n\n        _proto.compileMod = function compileMod(node, frame) {\n          return this._binOpEmitter(node, frame, ' % ');\n        };\n\n        _proto.compileNot = function compileNot(node, frame) {\n          this._emit('!');\n\n          this.compile(node.target, frame);\n        };\n\n        _proto.compileFloorDiv = function compileFloorDiv(node, frame) {\n          this._emit('Math.floor(');\n\n          this.compile(node.left, frame);\n\n          this._emit(' / ');\n\n          this.compile(node.right, frame);\n\n          this._emit(')');\n        };\n\n        _proto.compilePow = function compilePow(node, frame) {\n          this._emit('Math.pow(');\n\n          this.compile(node.left, frame);\n\n          this._emit(', ');\n\n          this.compile(node.right, frame);\n\n          this._emit(')');\n        };\n\n        _proto.compileNeg = function compileNeg(node, frame) {\n          this._emit('-');\n\n          this.compile(node.target, frame);\n        };\n\n        _proto.compilePos = function compilePos(node, frame) {\n          this._emit('+');\n\n          this.compile(node.target, frame);\n        };\n\n        _proto.compileCompare = function compileCompare(node, frame) {\n          var _this5 = this;\n\n          this.compile(node.expr, frame);\n          node.ops.forEach(function (op) {\n            _this5._emit(\" \" + compareOps[op.type] + \" \");\n\n            _this5.compile(op.expr, frame);\n          });\n        };\n\n        _proto.compileLookupVal = function compileLookupVal(node, frame) {\n          this._emit('runtime.memberLookup((');\n\n          this._compileExpression(node.target, frame);\n\n          this._emit('),');\n\n          this._compileExpression(node.val, frame);\n\n          this._emit(')');\n        };\n\n        _proto._getNodeName = function _getNodeName(node) {\n          switch (node.typename) {\n            case 'Symbol':\n              return node.value;\n\n            case 'FunCall':\n              return 'the return value of (' + this._getNodeName(node.name) + ')';\n\n            case 'LookupVal':\n              return this._getNodeName(node.target) + '[\"' + this._getNodeName(node.val) + '\"]';\n\n            case 'Literal':\n              return node.value.toString();\n\n            default:\n              return '--expression--';\n          }\n        };\n\n        _proto.compileFunCall = function compileFunCall(node, frame) {\n          // Keep track of line/col info at runtime by settings\n          // variables within an expression. An expression in javascript\n          // like (x, y, z) returns the last value, and x and y can be\n          // anything\n          this._emit('(lineno = ' + node.lineno + ', colno = ' + node.colno + ', ');\n\n          this._emit('runtime.callWrap('); // Compile it as normal.\n\n\n          this._compileExpression(node.name, frame); // Output the name of what we're calling so we can get friendly errors\n          // if the lookup fails.\n\n\n          this._emit(', \"' + this._getNodeName(node.name).replace(/\"/g, '\\\\\"') + '\", context, ');\n\n          this._compileAggregate(node.args, frame, '[', '])');\n\n          this._emit(')');\n        };\n\n        _proto.compileFilter = function compileFilter(node, frame) {\n          var name = node.name;\n          this.assertType(name, nodes.Symbol);\n\n          this._emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\n          this._compileAggregate(node.args, frame);\n\n          this._emit(')');\n        };\n\n        _proto.compileFilterAsync = function compileFilterAsync(node, frame) {\n          var name = node.name;\n          var symbol = node.symbol.value;\n          this.assertType(name, nodes.Symbol);\n          frame.set(symbol, symbol);\n\n          this._emit('env.getFilter(\"' + name.value + '\").call(context, ');\n\n          this._compileAggregate(node.args, frame);\n\n          this._emitLine(', ' + this._makeCallback(symbol));\n\n          this._addScopeLevel();\n        };\n\n        _proto.compileKeywordArgs = function compileKeywordArgs(node, frame) {\n          this._emit('runtime.makeKeywordArgs(');\n\n          this.compileDict(node, frame);\n\n          this._emit(')');\n        };\n\n        _proto.compileSet = function compileSet(node, frame) {\n          var _this6 = this;\n\n          var ids = []; // Lookup the variable names for each identifier and create\n          // new ones if necessary\n\n          node.targets.forEach(function (target) {\n            var name = target.value;\n            var id = frame.lookup(name);\n\n            if (id === null || id === undefined) {\n              id = _this6._tmpid(); // Note: This relies on js allowing scope across\n              // blocks, in case this is created inside an `if`\n\n              _this6._emitLine('var ' + id + ';');\n            }\n\n            ids.push(id);\n          });\n\n          if (node.value) {\n            this._emit(ids.join(' = ') + ' = ');\n\n            this._compileExpression(node.value, frame);\n\n            this._emitLine(';');\n          } else {\n            this._emit(ids.join(' = ') + ' = ');\n\n            this.compile(node.body, frame);\n\n            this._emitLine(';');\n          }\n\n          node.targets.forEach(function (target, i) {\n            var id = ids[i];\n            var name = target.value; // We are running this for every var, but it's very\n            // uncommon to assign to multiple vars anyway\n\n            _this6._emitLine(\"frame.set(\\\"\" + name + \"\\\", \" + id + \", true);\");\n\n            _this6._emitLine('if(frame.topLevel) {');\n\n            _this6._emitLine(\"context.setVariable(\\\"\" + name + \"\\\", \" + id + \");\");\n\n            _this6._emitLine('}');\n\n            if (name.charAt(0) !== '_') {\n              _this6._emitLine('if(frame.topLevel) {');\n\n              _this6._emitLine(\"context.addExport(\\\"\" + name + \"\\\", \" + id + \");\");\n\n              _this6._emitLine('}');\n            }\n          });\n        };\n\n        _proto.compileSwitch = function compileSwitch(node, frame) {\n          var _this7 = this;\n\n          this._emit('switch (');\n\n          this.compile(node.expr, frame);\n\n          this._emit(') {');\n\n          node.cases.forEach(function (c, i) {\n            _this7._emit('case ');\n\n            _this7.compile(c.cond, frame);\n\n            _this7._emit(': ');\n\n            _this7.compile(c.body, frame); // preserve fall-throughs\n\n\n            if (c.body.children.length) {\n              _this7._emitLine('break;');\n            }\n          });\n\n          if (node.default) {\n            this._emit('default:');\n\n            this.compile(node.default, frame);\n          }\n\n          this._emit('}');\n        };\n\n        _proto.compileIf = function compileIf(node, frame, async) {\n          var _this8 = this;\n\n          this._emit('if(');\n\n          this._compileExpression(node.cond, frame);\n\n          this._emitLine(') {');\n\n          this._withScopedSyntax(function () {\n            _this8.compile(node.body, frame);\n\n            if (async) {\n              _this8._emit('cb()');\n            }\n          });\n\n          if (node.else_) {\n            this._emitLine('}\\nelse {');\n\n            this._withScopedSyntax(function () {\n              _this8.compile(node.else_, frame);\n\n              if (async) {\n                _this8._emit('cb()');\n              }\n            });\n          } else if (async) {\n            this._emitLine('}\\nelse {');\n\n            this._emit('cb()');\n          }\n\n          this._emitLine('}');\n        };\n\n        _proto.compileIfAsync = function compileIfAsync(node, frame) {\n          this._emit('(function(cb) {');\n\n          this.compileIf(node, frame, true);\n\n          this._emit('})(' + this._makeCallback());\n\n          this._addScopeLevel();\n        };\n\n        _proto._emitLoopBindings = function _emitLoopBindings(node, arr, i, len) {\n          var _this9 = this;\n\n          var bindings = [{\n            name: 'index',\n            val: i + \" + 1\"\n          }, {\n            name: 'index0',\n            val: i\n          }, {\n            name: 'revindex',\n            val: len + \" - \" + i\n          }, {\n            name: 'revindex0',\n            val: len + \" - \" + i + \" - 1\"\n          }, {\n            name: 'first',\n            val: i + \" === 0\"\n          }, {\n            name: 'last',\n            val: i + \" === \" + len + \" - 1\"\n          }, {\n            name: 'length',\n            val: len\n          }];\n          bindings.forEach(function (b) {\n            _this9._emitLine(\"frame.set(\\\"loop.\" + b.name + \"\\\", \" + b.val + \");\");\n          });\n        };\n\n        _proto.compileFor = function compileFor(node, frame) {\n          var _this10 = this; // Some of this code is ugly, but it keeps the generated code\n          // as fast as possible. ForAsync also shares some of this, but\n          // not much.\n\n\n          var i = this._tmpid();\n\n          var len = this._tmpid();\n\n          var arr = this._tmpid();\n\n          frame = frame.push();\n\n          this._emitLine('frame = frame.push();');\n\n          this._emit(\"var \" + arr + \" = \");\n\n          this._compileExpression(node.arr, frame);\n\n          this._emitLine(';');\n\n          this._emit(\"if(\" + arr + \") {\");\n\n          this._emitLine(arr + ' = runtime.fromIterator(' + arr + ');'); // If multiple names are passed, we need to bind them\n          // appropriately\n\n\n          if (node.name instanceof nodes.Array) {\n            this._emitLine(\"var \" + i + \";\"); // The object could be an arroy or object. Note that the\n            // body of the loop is duplicated for each condition, but\n            // we are optimizing for speed over size.\n\n\n            this._emitLine(\"if(runtime.isArray(\" + arr + \")) {\");\n\n            this._emitLine(\"var \" + len + \" = \" + arr + \".length;\");\n\n            this._emitLine(\"for(\" + i + \"=0; \" + i + \" < \" + arr + \".length; \" + i + \"++) {\"); // Bind each declared var\n\n\n            node.name.children.forEach(function (child, u) {\n              var tid = _this10._tmpid();\n\n              _this10._emitLine(\"var \" + tid + \" = \" + arr + \"[\" + i + \"][\" + u + \"];\");\n\n              _this10._emitLine(\"frame.set(\\\"\" + child + \"\\\", \" + arr + \"[\" + i + \"][\" + u + \"]);\");\n\n              frame.set(node.name.children[u].value, tid);\n            });\n\n            this._emitLoopBindings(node, arr, i, len);\n\n            this._withScopedSyntax(function () {\n              _this10.compile(node.body, frame);\n            });\n\n            this._emitLine('}');\n\n            this._emitLine('} else {'); // Iterate over the key/values of an object\n\n\n            var _node$name$children = node.name.children,\n                key = _node$name$children[0],\n                val = _node$name$children[1];\n\n            var k = this._tmpid();\n\n            var v = this._tmpid();\n\n            frame.set(key.value, k);\n            frame.set(val.value, v);\n\n            this._emitLine(i + \" = -1;\");\n\n            this._emitLine(\"var \" + len + \" = runtime.keys(\" + arr + \").length;\");\n\n            this._emitLine(\"for(var \" + k + \" in \" + arr + \") {\");\n\n            this._emitLine(i + \"++;\");\n\n            this._emitLine(\"var \" + v + \" = \" + arr + \"[\" + k + \"];\");\n\n            this._emitLine(\"frame.set(\\\"\" + key.value + \"\\\", \" + k + \");\");\n\n            this._emitLine(\"frame.set(\\\"\" + val.value + \"\\\", \" + v + \");\");\n\n            this._emitLoopBindings(node, arr, i, len);\n\n            this._withScopedSyntax(function () {\n              _this10.compile(node.body, frame);\n            });\n\n            this._emitLine('}');\n\n            this._emitLine('}');\n          } else {\n            // Generate a typical array iteration\n            var _v = this._tmpid();\n\n            frame.set(node.name.value, _v);\n\n            this._emitLine(\"var \" + len + \" = \" + arr + \".length;\");\n\n            this._emitLine(\"for(var \" + i + \"=0; \" + i + \" < \" + arr + \".length; \" + i + \"++) {\");\n\n            this._emitLine(\"var \" + _v + \" = \" + arr + \"[\" + i + \"];\");\n\n            this._emitLine(\"frame.set(\\\"\" + node.name.value + \"\\\", \" + _v + \");\");\n\n            this._emitLoopBindings(node, arr, i, len);\n\n            this._withScopedSyntax(function () {\n              _this10.compile(node.body, frame);\n            });\n\n            this._emitLine('}');\n          }\n\n          this._emitLine('}');\n\n          if (node.else_) {\n            this._emitLine('if (!' + len + ') {');\n\n            this.compile(node.else_, frame);\n\n            this._emitLine('}');\n          }\n\n          this._emitLine('frame = frame.pop();');\n        };\n\n        _proto._compileAsyncLoop = function _compileAsyncLoop(node, frame, parallel) {\n          var _this11 = this; // This shares some code with the For tag, but not enough to\n          // worry about. This iterates across an object asynchronously,\n          // but not in parallel.\n\n\n          var i = this._tmpid();\n\n          var len = this._tmpid();\n\n          var arr = this._tmpid();\n\n          var asyncMethod = parallel ? 'asyncAll' : 'asyncEach';\n          frame = frame.push();\n\n          this._emitLine('frame = frame.push();');\n\n          this._emit('var ' + arr + ' = runtime.fromIterator(');\n\n          this._compileExpression(node.arr, frame);\n\n          this._emitLine(');');\n\n          if (node.name instanceof nodes.Array) {\n            var arrayLen = node.name.children.length;\n\n            this._emit(\"runtime.\" + asyncMethod + \"(\" + arr + \", \" + arrayLen + \", function(\");\n\n            node.name.children.forEach(function (name) {\n              _this11._emit(name.value + \",\");\n            });\n\n            this._emit(i + ',' + len + ',next) {');\n\n            node.name.children.forEach(function (name) {\n              var id = name.value;\n              frame.set(id, id);\n\n              _this11._emitLine(\"frame.set(\\\"\" + id + \"\\\", \" + id + \");\");\n            });\n          } else {\n            var id = node.name.value;\n\n            this._emitLine(\"runtime.\" + asyncMethod + \"(\" + arr + \", 1, function(\" + id + \", \" + i + \", \" + len + \",next) {\");\n\n            this._emitLine('frame.set(\"' + id + '\", ' + id + ');');\n\n            frame.set(id, id);\n          }\n\n          this._emitLoopBindings(node, arr, i, len);\n\n          this._withScopedSyntax(function () {\n            var buf;\n\n            if (parallel) {\n              buf = _this11._pushBuffer();\n            }\n\n            _this11.compile(node.body, frame);\n\n            _this11._emitLine('next(' + i + (buf ? ',' + buf : '') + ');');\n\n            if (parallel) {\n              _this11._popBuffer();\n            }\n          });\n\n          var output = this._tmpid();\n\n          this._emitLine('}, ' + this._makeCallback(output));\n\n          this._addScopeLevel();\n\n          if (parallel) {\n            this._emitLine(this.buffer + ' += ' + output + ';');\n          }\n\n          if (node.else_) {\n            this._emitLine('if (!' + arr + '.length) {');\n\n            this.compile(node.else_, frame);\n\n            this._emitLine('}');\n          }\n\n          this._emitLine('frame = frame.pop();');\n        };\n\n        _proto.compileAsyncEach = function compileAsyncEach(node, frame) {\n          this._compileAsyncLoop(node, frame);\n        };\n\n        _proto.compileAsyncAll = function compileAsyncAll(node, frame) {\n          this._compileAsyncLoop(node, frame, true);\n        };\n\n        _proto._compileMacro = function _compileMacro(node, frame) {\n          var _this12 = this;\n\n          var args = [];\n          var kwargs = null;\n\n          var funcId = 'macro_' + this._tmpid();\n\n          var keepFrame = frame !== undefined; // Type check the definition of the args\n\n          node.args.children.forEach(function (arg, i) {\n            if (i === node.args.children.length - 1 && arg instanceof nodes.Dict) {\n              kwargs = arg;\n            } else {\n              _this12.assertType(arg, nodes.Symbol);\n\n              args.push(arg);\n            }\n          });\n          var realNames = [].concat(args.map(function (n) {\n            return \"l_\" + n.value;\n          }), ['kwargs']); // Quoted argument names\n\n          var argNames = args.map(function (n) {\n            return \"\\\"\" + n.value + \"\\\"\";\n          });\n          var kwargNames = (kwargs && kwargs.children || []).map(function (n) {\n            return \"\\\"\" + n.key.value + \"\\\"\";\n          }); // We pass a function to makeMacro which destructures the\n          // arguments so support setting positional args with keywords\n          // args and passing keyword args as positional args\n          // (essentially default values). See runtime.js.\n\n          var currFrame;\n\n          if (keepFrame) {\n            currFrame = frame.push(true);\n          } else {\n            currFrame = new Frame();\n          }\n\n          this._emitLines(\"var \" + funcId + \" = runtime.makeMacro(\", \"[\" + argNames.join(', ') + \"], \", \"[\" + kwargNames.join(', ') + \"], \", \"function (\" + realNames.join(', ') + \") {\", 'var callerFrame = frame;', 'frame = ' + (keepFrame ? 'frame.push(true);' : 'new runtime.Frame();'), 'kwargs = kwargs || {};', 'if (Object.prototype.hasOwnProperty.call(kwargs, \"caller\")) {', 'frame.set(\"caller\", kwargs.caller); }'); // Expose the arguments to the template. Don't need to use\n          // random names because the function\n          // will create a new run-time scope for us\n\n\n          args.forEach(function (arg) {\n            _this12._emitLine(\"frame.set(\\\"\" + arg.value + \"\\\", l_\" + arg.value + \");\");\n\n            currFrame.set(arg.value, \"l_\" + arg.value);\n          }); // Expose the keyword arguments\n\n          if (kwargs) {\n            kwargs.children.forEach(function (pair) {\n              var name = pair.key.value;\n\n              _this12._emit(\"frame.set(\\\"\" + name + \"\\\", \");\n\n              _this12._emit(\"Object.prototype.hasOwnProperty.call(kwargs, \\\"\" + name + \"\\\")\");\n\n              _this12._emit(\" ? kwargs[\\\"\" + name + \"\\\"] : \");\n\n              _this12._compileExpression(pair.value, currFrame);\n\n              _this12._emit(');');\n            });\n          }\n\n          var bufferId = this._pushBuffer();\n\n          this._withScopedSyntax(function () {\n            _this12.compile(node.body, currFrame);\n          });\n\n          this._emitLine('frame = ' + (keepFrame ? 'frame.pop();' : 'callerFrame;'));\n\n          this._emitLine(\"return new runtime.SafeString(\" + bufferId + \");\");\n\n          this._emitLine('});');\n\n          this._popBuffer();\n\n          return funcId;\n        };\n\n        _proto.compileMacro = function compileMacro(node, frame) {\n          var funcId = this._compileMacro(node); // Expose the macro to the templates\n\n\n          var name = node.name.value;\n          frame.set(name, funcId);\n\n          if (frame.parent) {\n            this._emitLine(\"frame.set(\\\"\" + name + \"\\\", \" + funcId + \");\");\n          } else {\n            if (node.name.value.charAt(0) !== '_') {\n              this._emitLine(\"context.addExport(\\\"\" + name + \"\\\");\");\n            }\n\n            this._emitLine(\"context.setVariable(\\\"\" + name + \"\\\", \" + funcId + \");\");\n          }\n        };\n\n        _proto.compileCaller = function compileCaller(node, frame) {\n          // basically an anonymous \"macro expression\"\n          this._emit('(function (){');\n\n          var funcId = this._compileMacro(node, frame);\n\n          this._emit(\"return \" + funcId + \";})()\");\n        };\n\n        _proto._compileGetTemplate = function _compileGetTemplate(node, frame, eagerCompile, ignoreMissing) {\n          var parentTemplateId = this._tmpid();\n\n          var parentName = this._templateName();\n\n          var cb = this._makeCallback(parentTemplateId);\n\n          var eagerCompileArg = eagerCompile ? 'true' : 'false';\n          var ignoreMissingArg = ignoreMissing ? 'true' : 'false';\n\n          this._emit('env.getTemplate(');\n\n          this._compileExpression(node.template, frame);\n\n          this._emitLine(\", \" + eagerCompileArg + \", \" + parentName + \", \" + ignoreMissingArg + \", \" + cb);\n\n          return parentTemplateId;\n        };\n\n        _proto.compileImport = function compileImport(node, frame) {\n          var target = node.target.value;\n\n          var id = this._compileGetTemplate(node, frame, false, false);\n\n          this._addScopeLevel();\n\n          this._emitLine(id + '.getExported(' + (node.withContext ? 'context.getVariables(), frame, ' : '') + this._makeCallback(id));\n\n          this._addScopeLevel();\n\n          frame.set(target, id);\n\n          if (frame.parent) {\n            this._emitLine(\"frame.set(\\\"\" + target + \"\\\", \" + id + \");\");\n          } else {\n            this._emitLine(\"context.setVariable(\\\"\" + target + \"\\\", \" + id + \");\");\n          }\n        };\n\n        _proto.compileFromImport = function compileFromImport(node, frame) {\n          var _this13 = this;\n\n          var importedId = this._compileGetTemplate(node, frame, false, false);\n\n          this._addScopeLevel();\n\n          this._emitLine(importedId + '.getExported(' + (node.withContext ? 'context.getVariables(), frame, ' : '') + this._makeCallback(importedId));\n\n          this._addScopeLevel();\n\n          node.names.children.forEach(function (nameNode) {\n            var name;\n            var alias;\n\n            var id = _this13._tmpid();\n\n            if (nameNode instanceof nodes.Pair) {\n              name = nameNode.key.value;\n              alias = nameNode.value.value;\n            } else {\n              name = nameNode.value;\n              alias = name;\n            }\n\n            _this13._emitLine(\"if(Object.prototype.hasOwnProperty.call(\" + importedId + \", \\\"\" + name + \"\\\")) {\");\n\n            _this13._emitLine(\"var \" + id + \" = \" + importedId + \".\" + name + \";\");\n\n            _this13._emitLine('} else {');\n\n            _this13._emitLine(\"cb(new Error(\\\"cannot import '\" + name + \"'\\\")); return;\");\n\n            _this13._emitLine('}');\n\n            frame.set(alias, id);\n\n            if (frame.parent) {\n              _this13._emitLine(\"frame.set(\\\"\" + alias + \"\\\", \" + id + \");\");\n            } else {\n              _this13._emitLine(\"context.setVariable(\\\"\" + alias + \"\\\", \" + id + \");\");\n            }\n          });\n        };\n\n        _proto.compileBlock = function compileBlock(node) {\n          var id = this._tmpid(); // If we are executing outside a block (creating a top-level\n          // block), we really don't want to execute its code because it\n          // will execute twice: once when the child template runs and\n          // again when the parent template runs. Note that blocks\n          // within blocks will *always* execute immediately *and*\n          // wherever else they are invoked (like used in a parent\n          // template). This may have behavioral differences from jinja\n          // because blocks can have side effects, but it seems like a\n          // waste of performance to always execute huge top-level\n          // blocks twice\n\n\n          if (!this.inBlock) {\n            this._emit('(parentTemplate ? function(e, c, f, r, cb) { cb(\"\"); } : ');\n          }\n\n          this._emit(\"context.getBlock(\\\"\" + node.name.value + \"\\\")\");\n\n          if (!this.inBlock) {\n            this._emit(')');\n          }\n\n          this._emitLine('(env, context, frame, runtime, ' + this._makeCallback(id));\n\n          this._emitLine(this.buffer + \" += \" + id + \";\");\n\n          this._addScopeLevel();\n        };\n\n        _proto.compileSuper = function compileSuper(node, frame) {\n          var name = node.blockName.value;\n          var id = node.symbol.value;\n\n          var cb = this._makeCallback(id);\n\n          this._emitLine(\"context.getSuper(env, \\\"\" + name + \"\\\", b_\" + name + \", frame, runtime, \" + cb);\n\n          this._emitLine(id + \" = runtime.markSafe(\" + id + \");\");\n\n          this._addScopeLevel();\n\n          frame.set(id, id);\n        };\n\n        _proto.compileExtends = function compileExtends(node, frame) {\n          var k = this._tmpid();\n\n          var parentTemplateId = this._compileGetTemplate(node, frame, true, false); // extends is a dynamic tag and can occur within a block like\n          // `if`, so if this happens we need to capture the parent\n          // template in the top-level scope\n\n\n          this._emitLine(\"parentTemplate = \" + parentTemplateId);\n\n          this._emitLine(\"for(var \" + k + \" in parentTemplate.blocks) {\");\n\n          this._emitLine(\"context.addBlock(\" + k + \", parentTemplate.blocks[\" + k + \"]);\");\n\n          this._emitLine('}');\n\n          this._addScopeLevel();\n        };\n\n        _proto.compileInclude = function compileInclude(node, frame) {\n          this._emitLine('var tasks = [];');\n\n          this._emitLine('tasks.push(');\n\n          this._emitLine('function(callback) {');\n\n          var id = this._compileGetTemplate(node, frame, false, node.ignoreMissing);\n\n          this._emitLine(\"callback(null,\" + id + \");});\");\n\n          this._emitLine('});');\n\n          var id2 = this._tmpid();\n\n          this._emitLine('tasks.push(');\n\n          this._emitLine('function(template, callback){');\n\n          this._emitLine('template.render(context.getVariables(), frame, ' + this._makeCallback(id2));\n\n          this._emitLine('callback(null,' + id2 + ');});');\n\n          this._emitLine('});');\n\n          this._emitLine('tasks.push(');\n\n          this._emitLine('function(result, callback){');\n\n          this._emitLine(this.buffer + \" += result;\");\n\n          this._emitLine('callback(null);');\n\n          this._emitLine('});');\n\n          this._emitLine('env.waterfall(tasks, function(){');\n\n          this._addScopeLevel();\n        };\n\n        _proto.compileTemplateData = function compileTemplateData(node, frame) {\n          this.compileLiteral(node, frame);\n        };\n\n        _proto.compileCapture = function compileCapture(node, frame) {\n          var _this14 = this; // we need to temporarily override the current buffer id as 'output'\n          // so the set block writes to the capture output instead of the buffer\n\n\n          var buffer = this.buffer;\n          this.buffer = 'output';\n\n          this._emitLine('(function() {');\n\n          this._emitLine('var output = \"\";');\n\n          this._withScopedSyntax(function () {\n            _this14.compile(node.body, frame);\n          });\n\n          this._emitLine('return output;');\n\n          this._emitLine('})()'); // and of course, revert back to the old buffer id\n\n\n          this.buffer = buffer;\n        };\n\n        _proto.compileOutput = function compileOutput(node, frame) {\n          var _this15 = this;\n\n          var children = node.children;\n          children.forEach(function (child) {\n            // TemplateData is a special case because it is never\n            // autoescaped, so simply output it for optimization\n            if (child instanceof nodes.TemplateData) {\n              if (child.value) {\n                _this15._emit(_this15.buffer + \" += \");\n\n                _this15.compileLiteral(child, frame);\n\n                _this15._emitLine(';');\n              }\n            } else {\n              _this15._emit(_this15.buffer + \" += runtime.suppressValue(\");\n\n              if (_this15.throwOnUndefined) {\n                _this15._emit('runtime.ensureDefined(');\n              }\n\n              _this15.compile(child, frame);\n\n              if (_this15.throwOnUndefined) {\n                _this15._emit(\",\" + node.lineno + \",\" + node.colno + \")\");\n              }\n\n              _this15._emit(', env.opts.autoescape);\\n');\n            }\n          });\n        };\n\n        _proto.compileRoot = function compileRoot(node, frame) {\n          var _this16 = this;\n\n          if (frame) {\n            this.fail('compileRoot: root node can\\'t have frame');\n          }\n\n          frame = new Frame();\n\n          this._emitFuncBegin(node, 'root');\n\n          this._emitLine('var parentTemplate = null;');\n\n          this._compileChildren(node, frame);\n\n          this._emitLine('if(parentTemplate) {');\n\n          this._emitLine('parentTemplate.rootRenderFunc(env, context, frame, runtime, cb);');\n\n          this._emitLine('} else {');\n\n          this._emitLine(\"cb(null, \" + this.buffer + \");\");\n\n          this._emitLine('}');\n\n          this._emitFuncEnd(true);\n\n          this.inBlock = true;\n          var blockNames = [];\n          var blocks = node.findAll(nodes.Block);\n          blocks.forEach(function (block, i) {\n            var name = block.name.value;\n\n            if (blockNames.indexOf(name) !== -1) {\n              throw new Error(\"Block \\\"\" + name + \"\\\" defined more than once.\");\n            }\n\n            blockNames.push(name);\n\n            _this16._emitFuncBegin(block, \"b_\" + name);\n\n            var tmpFrame = new Frame();\n\n            _this16._emitLine('var frame = frame.push(true);');\n\n            _this16.compile(block.body, tmpFrame);\n\n            _this16._emitFuncEnd();\n          });\n\n          this._emitLine('return {');\n\n          blocks.forEach(function (block, i) {\n            var blockName = \"b_\" + block.name.value;\n\n            _this16._emitLine(blockName + \": \" + blockName + \",\");\n          });\n\n          this._emitLine('root: root\\n};');\n        };\n\n        _proto.compile = function compile(node, frame) {\n          var _compile = this['compile' + node.typename];\n\n          if (_compile) {\n            _compile.call(this, node, frame);\n          } else {\n            this.fail(\"compile: Cannot compile node: \" + node.typename, node.lineno, node.colno);\n          }\n        };\n\n        _proto.getCode = function getCode() {\n          return this.codebuf.join('');\n        };\n\n        return Compiler;\n      }(Obj);\n\n      module.exports = {\n        compile: function compile(src, asyncFilters, extensions, name, opts) {\n          if (opts === void 0) {\n            opts = {};\n          }\n\n          var c = new Compiler(name, opts.throwOnUndefined); // Run the extension preprocessors against the source.\n\n          var preprocessors = (extensions || []).map(function (ext) {\n            return ext.preprocess;\n          }).filter(function (f) {\n            return !!f;\n          });\n          var processedSrc = preprocessors.reduce(function (s, processor) {\n            return processor(s);\n          }, src);\n          c.compile(transformer.transform(parser.parse(processedSrc, extensions, opts), asyncFilters, name));\n          return c.getCode();\n        },\n        Compiler: Compiler\n      };\n      /***/\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var path = __webpack_require__(4);\n\n      var _require = __webpack_require__(1),\n          EmitterObj = _require.EmitterObj;\n\n      module.exports = /*#__PURE__*/function (_EmitterObj) {\n        _inheritsLoose(Loader, _EmitterObj);\n\n        function Loader() {\n          return _EmitterObj.apply(this, arguments) || this;\n        }\n\n        var _proto = Loader.prototype;\n\n        _proto.resolve = function resolve(from, to) {\n          return path.resolve(path.dirname(from), to);\n        };\n\n        _proto.isRelative = function isRelative(filename) {\n          return filename.indexOf('./') === 0 || filename.indexOf('../') === 0;\n        };\n\n        return Loader;\n      }(EmitterObj);\n      /***/\n\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var asap = __webpack_require__(12);\n\n      var _waterfall = __webpack_require__(15);\n\n      var lib = __webpack_require__(0);\n\n      var compiler = __webpack_require__(5);\n\n      var filters = __webpack_require__(18);\n\n      var _require = __webpack_require__(10),\n          FileSystemLoader = _require.FileSystemLoader,\n          WebLoader = _require.WebLoader,\n          PrecompiledLoader = _require.PrecompiledLoader;\n\n      var tests = __webpack_require__(20);\n\n      var globals = __webpack_require__(21);\n\n      var _require2 = __webpack_require__(1),\n          Obj = _require2.Obj,\n          EmitterObj = _require2.EmitterObj;\n\n      var globalRuntime = __webpack_require__(2);\n\n      var handleError = globalRuntime.handleError,\n          Frame = globalRuntime.Frame;\n\n      var expressApp = __webpack_require__(22); // If the user is using the async API, *always* call it\n      // asynchronously even if the template was synchronous.\n\n\n      function callbackAsap(cb, err, res) {\n        asap(function () {\n          cb(err, res);\n        });\n      }\n      /**\n       * A no-op template, for use with {% include ignore missing %}\n       */\n\n\n      var noopTmplSrc = {\n        type: 'code',\n        obj: {\n          root: function root(env, context, frame, runtime, cb) {\n            try {\n              cb(null, '');\n            } catch (e) {\n              cb(handleError(e, null, null));\n            }\n          }\n        }\n      };\n\n      var Environment = /*#__PURE__*/function (_EmitterObj) {\n        _inheritsLoose(Environment, _EmitterObj);\n\n        function Environment() {\n          return _EmitterObj.apply(this, arguments) || this;\n        }\n\n        var _proto = Environment.prototype;\n\n        _proto.init = function init(loaders, opts) {\n          var _this = this; // The dev flag determines the trace that'll be shown on errors.\n          // If set to true, returns the full trace from the error point,\n          // otherwise will return trace starting from Template.render\n          // (the full trace from within nunjucks may confuse developers using\n          //  the library)\n          // defaults to false\n\n\n          opts = this.opts = opts || {};\n          this.opts.dev = !!opts.dev; // The autoescape flag sets global autoescaping. If true,\n          // every string variable will be escaped by default.\n          // If false, strings can be manually escaped using the `escape` filter.\n          // defaults to true\n\n          this.opts.autoescape = opts.autoescape != null ? opts.autoescape : true; // If true, this will make the system throw errors if trying\n          // to output a null or undefined value\n\n          this.opts.throwOnUndefined = !!opts.throwOnUndefined;\n          this.opts.trimBlocks = !!opts.trimBlocks;\n          this.opts.lstripBlocks = !!opts.lstripBlocks;\n          this.loaders = [];\n\n          if (!loaders) {\n            // The filesystem loader is only available server-side\n            if (FileSystemLoader) {\n              this.loaders = [new FileSystemLoader('views')];\n            } else if (WebLoader) {\n              this.loaders = [new WebLoader('/views')];\n            }\n          } else {\n            this.loaders = lib.isArray(loaders) ? loaders : [loaders];\n          } // It's easy to use precompiled templates: just include them\n          // before you configure nunjucks and this will automatically\n          // pick it up and use it\n\n\n          if (typeof window !== 'undefined' && window.nunjucksPrecompiled) {\n            this.loaders.unshift(new PrecompiledLoader(window.nunjucksPrecompiled));\n          }\n\n          this._initLoaders();\n\n          this.globals = globals();\n          this.filters = {};\n          this.tests = {};\n          this.asyncFilters = [];\n          this.extensions = {};\n          this.extensionsList = [];\n\n          lib._entries(filters).forEach(function (_ref) {\n            var name = _ref[0],\n                filter = _ref[1];\n            return _this.addFilter(name, filter);\n          });\n\n          lib._entries(tests).forEach(function (_ref2) {\n            var name = _ref2[0],\n                test = _ref2[1];\n            return _this.addTest(name, test);\n          });\n        };\n\n        _proto._initLoaders = function _initLoaders() {\n          var _this2 = this;\n\n          this.loaders.forEach(function (loader) {\n            // Caching and cache busting\n            loader.cache = {};\n\n            if (typeof loader.on === 'function') {\n              loader.on('update', function (name, fullname) {\n                loader.cache[name] = null;\n\n                _this2.emit('update', name, fullname, loader);\n              });\n              loader.on('load', function (name, source) {\n                _this2.emit('load', name, source, loader);\n              });\n            }\n          });\n        };\n\n        _proto.invalidateCache = function invalidateCache() {\n          this.loaders.forEach(function (loader) {\n            loader.cache = {};\n          });\n        };\n\n        _proto.addExtension = function addExtension(name, extension) {\n          extension.__name = name;\n          this.extensions[name] = extension;\n          this.extensionsList.push(extension);\n          return this;\n        };\n\n        _proto.removeExtension = function removeExtension(name) {\n          var extension = this.getExtension(name);\n\n          if (!extension) {\n            return;\n          }\n\n          this.extensionsList = lib.without(this.extensionsList, extension);\n          delete this.extensions[name];\n        };\n\n        _proto.getExtension = function getExtension(name) {\n          return this.extensions[name];\n        };\n\n        _proto.hasExtension = function hasExtension(name) {\n          return !!this.extensions[name];\n        };\n\n        _proto.addGlobal = function addGlobal(name, value) {\n          this.globals[name] = value;\n          return this;\n        };\n\n        _proto.getGlobal = function getGlobal(name) {\n          if (typeof this.globals[name] === 'undefined') {\n            throw new Error('global not found: ' + name);\n          }\n\n          return this.globals[name];\n        };\n\n        _proto.addFilter = function addFilter(name, func, async) {\n          var wrapped = func;\n\n          if (async) {\n            this.asyncFilters.push(name);\n          }\n\n          this.filters[name] = wrapped;\n          return this;\n        };\n\n        _proto.getFilter = function getFilter(name) {\n          if (!this.filters[name]) {\n            throw new Error('filter not found: ' + name);\n          }\n\n          return this.filters[name];\n        };\n\n        _proto.addTest = function addTest(name, func) {\n          this.tests[name] = func;\n          return this;\n        };\n\n        _proto.getTest = function getTest(name) {\n          if (!this.tests[name]) {\n            throw new Error('test not found: ' + name);\n          }\n\n          return this.tests[name];\n        };\n\n        _proto.resolveTemplate = function resolveTemplate(loader, parentName, filename) {\n          var isRelative = loader.isRelative && parentName ? loader.isRelative(filename) : false;\n          return isRelative && loader.resolve ? loader.resolve(parentName, filename) : filename;\n        };\n\n        _proto.getTemplate = function getTemplate(name, eagerCompile, parentName, ignoreMissing, cb) {\n          var _this3 = this;\n\n          var that = this;\n          var tmpl = null;\n\n          if (name && name.raw) {\n            // this fixes autoescape for templates referenced in symbols\n            name = name.raw;\n          }\n\n          if (lib.isFunction(parentName)) {\n            cb = parentName;\n            parentName = null;\n            eagerCompile = eagerCompile || false;\n          }\n\n          if (lib.isFunction(eagerCompile)) {\n            cb = eagerCompile;\n            eagerCompile = false;\n          }\n\n          if (name instanceof Template) {\n            tmpl = name;\n          } else if (typeof name !== 'string') {\n            throw new Error('template names must be a string: ' + name);\n          } else {\n            for (var i = 0; i < this.loaders.length; i++) {\n              var loader = this.loaders[i];\n              tmpl = loader.cache[this.resolveTemplate(loader, parentName, name)];\n\n              if (tmpl) {\n                break;\n              }\n            }\n          }\n\n          if (tmpl) {\n            if (eagerCompile) {\n              tmpl.compile();\n            }\n\n            if (cb) {\n              cb(null, tmpl);\n              return undefined;\n            } else {\n              return tmpl;\n            }\n          }\n\n          var syncResult;\n\n          var createTemplate = function createTemplate(err, info) {\n            if (!info && !err && !ignoreMissing) {\n              err = new Error('template not found: ' + name);\n            }\n\n            if (err) {\n              if (cb) {\n                cb(err);\n                return;\n              } else {\n                throw err;\n              }\n            }\n\n            var newTmpl;\n\n            if (!info) {\n              newTmpl = new Template(noopTmplSrc, _this3, '', eagerCompile);\n            } else {\n              newTmpl = new Template(info.src, _this3, info.path, eagerCompile);\n\n              if (!info.noCache) {\n                info.loader.cache[name] = newTmpl;\n              }\n            }\n\n            if (cb) {\n              cb(null, newTmpl);\n            } else {\n              syncResult = newTmpl;\n            }\n          };\n\n          lib.asyncIter(this.loaders, function (loader, i, next, done) {\n            function handle(err, src) {\n              if (err) {\n                done(err);\n              } else if (src) {\n                src.loader = loader;\n                done(null, src);\n              } else {\n                next();\n              }\n            } // Resolve name relative to parentName\n\n\n            name = that.resolveTemplate(loader, parentName, name);\n\n            if (loader.async) {\n              loader.getSource(name, handle);\n            } else {\n              handle(null, loader.getSource(name));\n            }\n          }, createTemplate);\n          return syncResult;\n        };\n\n        _proto.express = function express(app) {\n          return expressApp(this, app);\n        };\n\n        _proto.render = function render(name, ctx, cb) {\n          if (lib.isFunction(ctx)) {\n            cb = ctx;\n            ctx = null;\n          } // We support a synchronous API to make it easier to migrate\n          // existing code to async. This works because if you don't do\n          // anything async work, the whole thing is actually run\n          // synchronously.\n\n\n          var syncResult = null;\n          this.getTemplate(name, function (err, tmpl) {\n            if (err && cb) {\n              callbackAsap(cb, err);\n            } else if (err) {\n              throw err;\n            } else {\n              syncResult = tmpl.render(ctx, cb);\n            }\n          });\n          return syncResult;\n        };\n\n        _proto.renderString = function renderString(src, ctx, opts, cb) {\n          if (lib.isFunction(opts)) {\n            cb = opts;\n            opts = {};\n          }\n\n          opts = opts || {};\n          var tmpl = new Template(src, this, opts.path);\n          return tmpl.render(ctx, cb);\n        };\n\n        _proto.waterfall = function waterfall(tasks, callback, forceAsync) {\n          return _waterfall(tasks, callback, forceAsync);\n        };\n\n        return Environment;\n      }(EmitterObj);\n\n      var Context = /*#__PURE__*/function (_Obj) {\n        _inheritsLoose(Context, _Obj);\n\n        function Context() {\n          return _Obj.apply(this, arguments) || this;\n        }\n\n        var _proto2 = Context.prototype;\n\n        _proto2.init = function init(ctx, blocks, env) {\n          var _this4 = this; // Has to be tied to an environment so we can tap into its globals.\n\n\n          this.env = env || new Environment(); // Make a duplicate of ctx\n\n          this.ctx = lib.extend({}, ctx);\n          this.blocks = {};\n          this.exported = [];\n          lib.keys(blocks).forEach(function (name) {\n            _this4.addBlock(name, blocks[name]);\n          });\n        };\n\n        _proto2.lookup = function lookup(name) {\n          // This is one of the most called functions, so optimize for\n          // the typical case where the name isn't in the globals\n          if (name in this.env.globals && !(name in this.ctx)) {\n            return this.env.globals[name];\n          } else {\n            return this.ctx[name];\n          }\n        };\n\n        _proto2.setVariable = function setVariable(name, val) {\n          this.ctx[name] = val;\n        };\n\n        _proto2.getVariables = function getVariables() {\n          return this.ctx;\n        };\n\n        _proto2.addBlock = function addBlock(name, block) {\n          this.blocks[name] = this.blocks[name] || [];\n          this.blocks[name].push(block);\n          return this;\n        };\n\n        _proto2.getBlock = function getBlock(name) {\n          if (!this.blocks[name]) {\n            throw new Error('unknown block \"' + name + '\"');\n          }\n\n          return this.blocks[name][0];\n        };\n\n        _proto2.getSuper = function getSuper(env, name, block, frame, runtime, cb) {\n          var idx = lib.indexOf(this.blocks[name] || [], block);\n          var blk = this.blocks[name][idx + 1];\n          var context = this;\n\n          if (idx === -1 || !blk) {\n            throw new Error('no super block available for \"' + name + '\"');\n          }\n\n          blk(env, context, frame, runtime, cb);\n        };\n\n        _proto2.addExport = function addExport(name) {\n          this.exported.push(name);\n        };\n\n        _proto2.getExported = function getExported() {\n          var _this5 = this;\n\n          var exported = {};\n          this.exported.forEach(function (name) {\n            exported[name] = _this5.ctx[name];\n          });\n          return exported;\n        };\n\n        return Context;\n      }(Obj);\n\n      var Template = /*#__PURE__*/function (_Obj2) {\n        _inheritsLoose(Template, _Obj2);\n\n        function Template() {\n          return _Obj2.apply(this, arguments) || this;\n        }\n\n        var _proto3 = Template.prototype;\n\n        _proto3.init = function init(src, env, path, eagerCompile) {\n          this.env = env || new Environment();\n\n          if (lib.isObject(src)) {\n            switch (src.type) {\n              case 'code':\n                this.tmplProps = src.obj;\n                break;\n\n              case 'string':\n                this.tmplStr = src.obj;\n                break;\n\n              default:\n                throw new Error(\"Unexpected template object type \" + src.type + \"; expected 'code', or 'string'\");\n            }\n          } else if (lib.isString(src)) {\n            this.tmplStr = src;\n          } else {\n            throw new Error('src must be a string or an object describing the source');\n          }\n\n          this.path = path;\n\n          if (eagerCompile) {\n            try {\n              this._compile();\n            } catch (err) {\n              throw lib._prettifyError(this.path, this.env.opts.dev, err);\n            }\n          } else {\n            this.compiled = false;\n          }\n        };\n\n        _proto3.render = function render(ctx, parentFrame, cb) {\n          var _this6 = this;\n\n          if (typeof ctx === 'function') {\n            cb = ctx;\n            ctx = {};\n          } else if (typeof parentFrame === 'function') {\n            cb = parentFrame;\n            parentFrame = null;\n          } // If there is a parent frame, we are being called from internal\n          // code of another template, and the internal system\n          // depends on the sync/async nature of the parent template\n          // to be inherited, so force an async callback\n\n\n          var forceAsync = !parentFrame; // Catch compile errors for async rendering\n\n          try {\n            this.compile();\n          } catch (e) {\n            var err = lib._prettifyError(this.path, this.env.opts.dev, e);\n\n            if (cb) {\n              return callbackAsap(cb, err);\n            } else {\n              throw err;\n            }\n          }\n\n          var context = new Context(ctx || {}, this.blocks, this.env);\n          var frame = parentFrame ? parentFrame.push(true) : new Frame();\n          frame.topLevel = true;\n          var syncResult = null;\n          var didError = false;\n          this.rootRenderFunc(this.env, context, frame, globalRuntime, function (err, res) {\n            // TODO: this is actually a bug in the compiled template (because waterfall\n            // tasks are both not passing errors up the chain of callbacks AND are not\n            // causing a return from the top-most render function). But fixing that\n            // will require a more substantial change to the compiler.\n            if (didError && cb && typeof res !== 'undefined') {\n              // prevent multiple calls to cb\n              return;\n            }\n\n            if (err) {\n              err = lib._prettifyError(_this6.path, _this6.env.opts.dev, err);\n              didError = true;\n            }\n\n            if (cb) {\n              if (forceAsync) {\n                callbackAsap(cb, err, res);\n              } else {\n                cb(err, res);\n              }\n            } else {\n              if (err) {\n                throw err;\n              }\n\n              syncResult = res;\n            }\n          });\n          return syncResult;\n        };\n\n        _proto3.getExported = function getExported(ctx, parentFrame, cb) {\n          // eslint-disable-line consistent-return\n          if (typeof ctx === 'function') {\n            cb = ctx;\n            ctx = {};\n          }\n\n          if (typeof parentFrame === 'function') {\n            cb = parentFrame;\n            parentFrame = null;\n          } // Catch compile errors for async rendering\n\n\n          try {\n            this.compile();\n          } catch (e) {\n            if (cb) {\n              return cb(e);\n            } else {\n              throw e;\n            }\n          }\n\n          var frame = parentFrame ? parentFrame.push() : new Frame();\n          frame.topLevel = true; // Run the rootRenderFunc to populate the context with exported vars\n\n          var context = new Context(ctx || {}, this.blocks, this.env);\n          this.rootRenderFunc(this.env, context, frame, globalRuntime, function (err) {\n            if (err) {\n              cb(err, null);\n            } else {\n              cb(null, context.getExported());\n            }\n          });\n        };\n\n        _proto3.compile = function compile() {\n          if (!this.compiled) {\n            this._compile();\n          }\n        };\n\n        _proto3._compile = function _compile() {\n          var props;\n\n          if (this.tmplProps) {\n            props = this.tmplProps;\n          } else {\n            var source = compiler.compile(this.tmplStr, this.env.asyncFilters, this.env.extensionsList, this.path, this.env.opts);\n            var func = new Function(source); // eslint-disable-line no-new-func\n\n            props = func();\n          }\n\n          this.blocks = this._getBlocks(props);\n          this.rootRenderFunc = props.root;\n          this.compiled = true;\n        };\n\n        _proto3._getBlocks = function _getBlocks(props) {\n          var blocks = {};\n          lib.keys(props).forEach(function (k) {\n            if (k.slice(0, 2) === 'b_') {\n              blocks[k.slice(2)] = props[k];\n            }\n          });\n          return blocks;\n        };\n\n        return Template;\n      }(Obj);\n\n      module.exports = {\n        Environment: Environment,\n        Template: Template\n      };\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var lexer = __webpack_require__(9);\n\n      var nodes = __webpack_require__(3);\n\n      var Obj = __webpack_require__(1).Obj;\n\n      var lib = __webpack_require__(0);\n\n      var Parser = /*#__PURE__*/function (_Obj) {\n        _inheritsLoose(Parser, _Obj);\n\n        function Parser() {\n          return _Obj.apply(this, arguments) || this;\n        }\n\n        var _proto = Parser.prototype;\n\n        _proto.init = function init(tokens) {\n          this.tokens = tokens;\n          this.peeked = null;\n          this.breakOnBlocks = null;\n          this.dropLeadingWhitespace = false;\n          this.extensions = [];\n        };\n\n        _proto.nextToken = function nextToken(withWhitespace) {\n          var tok;\n\n          if (this.peeked) {\n            if (!withWhitespace && this.peeked.type === lexer.TOKEN_WHITESPACE) {\n              this.peeked = null;\n            } else {\n              tok = this.peeked;\n              this.peeked = null;\n              return tok;\n            }\n          }\n\n          tok = this.tokens.nextToken();\n\n          if (!withWhitespace) {\n            while (tok && tok.type === lexer.TOKEN_WHITESPACE) {\n              tok = this.tokens.nextToken();\n            }\n          }\n\n          return tok;\n        };\n\n        _proto.peekToken = function peekToken() {\n          this.peeked = this.peeked || this.nextToken();\n          return this.peeked;\n        };\n\n        _proto.pushToken = function pushToken(tok) {\n          if (this.peeked) {\n            throw new Error('pushToken: can only push one token on between reads');\n          }\n\n          this.peeked = tok;\n        };\n\n        _proto.error = function error(msg, lineno, colno) {\n          if (lineno === undefined || colno === undefined) {\n            var tok = this.peekToken() || {};\n            lineno = tok.lineno;\n            colno = tok.colno;\n          }\n\n          if (lineno !== undefined) {\n            lineno += 1;\n          }\n\n          if (colno !== undefined) {\n            colno += 1;\n          }\n\n          return new lib.TemplateError(msg, lineno, colno);\n        };\n\n        _proto.fail = function fail(msg, lineno, colno) {\n          throw this.error(msg, lineno, colno);\n        };\n\n        _proto.skip = function skip(type) {\n          var tok = this.nextToken();\n\n          if (!tok || tok.type !== type) {\n            this.pushToken(tok);\n            return false;\n          }\n\n          return true;\n        };\n\n        _proto.expect = function expect(type) {\n          var tok = this.nextToken();\n\n          if (tok.type !== type) {\n            this.fail('expected ' + type + ', got ' + tok.type, tok.lineno, tok.colno);\n          }\n\n          return tok;\n        };\n\n        _proto.skipValue = function skipValue(type, val) {\n          var tok = this.nextToken();\n\n          if (!tok || tok.type !== type || tok.value !== val) {\n            this.pushToken(tok);\n            return false;\n          }\n\n          return true;\n        };\n\n        _proto.skipSymbol = function skipSymbol(val) {\n          return this.skipValue(lexer.TOKEN_SYMBOL, val);\n        };\n\n        _proto.advanceAfterBlockEnd = function advanceAfterBlockEnd(name) {\n          var tok;\n\n          if (!name) {\n            tok = this.peekToken();\n\n            if (!tok) {\n              this.fail('unexpected end of file');\n            }\n\n            if (tok.type !== lexer.TOKEN_SYMBOL) {\n              this.fail('advanceAfterBlockEnd: expected symbol token or ' + 'explicit name to be passed');\n            }\n\n            name = this.nextToken().value;\n          }\n\n          tok = this.nextToken();\n\n          if (tok && tok.type === lexer.TOKEN_BLOCK_END) {\n            if (tok.value.charAt(0) === '-') {\n              this.dropLeadingWhitespace = true;\n            }\n          } else {\n            this.fail('expected block end in ' + name + ' statement');\n          }\n\n          return tok;\n        };\n\n        _proto.advanceAfterVariableEnd = function advanceAfterVariableEnd() {\n          var tok = this.nextToken();\n\n          if (tok && tok.type === lexer.TOKEN_VARIABLE_END) {\n            this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.VARIABLE_END.length - 1) === '-';\n          } else {\n            this.pushToken(tok);\n            this.fail('expected variable end');\n          }\n        };\n\n        _proto.parseFor = function parseFor() {\n          var forTok = this.peekToken();\n          var node;\n          var endBlock;\n\n          if (this.skipSymbol('for')) {\n            node = new nodes.For(forTok.lineno, forTok.colno);\n            endBlock = 'endfor';\n          } else if (this.skipSymbol('asyncEach')) {\n            node = new nodes.AsyncEach(forTok.lineno, forTok.colno);\n            endBlock = 'endeach';\n          } else if (this.skipSymbol('asyncAll')) {\n            node = new nodes.AsyncAll(forTok.lineno, forTok.colno);\n            endBlock = 'endall';\n          } else {\n            this.fail('parseFor: expected for{Async}', forTok.lineno, forTok.colno);\n          }\n\n          node.name = this.parsePrimary();\n\n          if (!(node.name instanceof nodes.Symbol)) {\n            this.fail('parseFor: variable name expected for loop');\n          }\n\n          var type = this.peekToken().type;\n\n          if (type === lexer.TOKEN_COMMA) {\n            // key/value iteration\n            var key = node.name;\n            node.name = new nodes.Array(key.lineno, key.colno);\n            node.name.addChild(key);\n\n            while (this.skip(lexer.TOKEN_COMMA)) {\n              var prim = this.parsePrimary();\n              node.name.addChild(prim);\n            }\n          }\n\n          if (!this.skipSymbol('in')) {\n            this.fail('parseFor: expected \"in\" keyword for loop', forTok.lineno, forTok.colno);\n          }\n\n          node.arr = this.parseExpression();\n          this.advanceAfterBlockEnd(forTok.value);\n          node.body = this.parseUntilBlocks(endBlock, 'else');\n\n          if (this.skipSymbol('else')) {\n            this.advanceAfterBlockEnd('else');\n            node.else_ = this.parseUntilBlocks(endBlock);\n          }\n\n          this.advanceAfterBlockEnd();\n          return node;\n        };\n\n        _proto.parseMacro = function parseMacro() {\n          var macroTok = this.peekToken();\n\n          if (!this.skipSymbol('macro')) {\n            this.fail('expected macro');\n          }\n\n          var name = this.parsePrimary(true);\n          var args = this.parseSignature();\n          var node = new nodes.Macro(macroTok.lineno, macroTok.colno, name, args);\n          this.advanceAfterBlockEnd(macroTok.value);\n          node.body = this.parseUntilBlocks('endmacro');\n          this.advanceAfterBlockEnd();\n          return node;\n        };\n\n        _proto.parseCall = function parseCall() {\n          // a call block is parsed as a normal FunCall, but with an added\n          // 'caller' kwarg which is a Caller node.\n          var callTok = this.peekToken();\n\n          if (!this.skipSymbol('call')) {\n            this.fail('expected call');\n          }\n\n          var callerArgs = this.parseSignature(true) || new nodes.NodeList();\n          var macroCall = this.parsePrimary();\n          this.advanceAfterBlockEnd(callTok.value);\n          var body = this.parseUntilBlocks('endcall');\n          this.advanceAfterBlockEnd();\n          var callerName = new nodes.Symbol(callTok.lineno, callTok.colno, 'caller');\n          var callerNode = new nodes.Caller(callTok.lineno, callTok.colno, callerName, callerArgs, body); // add the additional caller kwarg, adding kwargs if necessary\n\n          var args = macroCall.args.children;\n\n          if (!(args[args.length - 1] instanceof nodes.KeywordArgs)) {\n            args.push(new nodes.KeywordArgs());\n          }\n\n          var kwargs = args[args.length - 1];\n          kwargs.addChild(new nodes.Pair(callTok.lineno, callTok.colno, callerName, callerNode));\n          return new nodes.Output(callTok.lineno, callTok.colno, [macroCall]);\n        };\n\n        _proto.parseWithContext = function parseWithContext() {\n          var tok = this.peekToken();\n          var withContext = null;\n\n          if (this.skipSymbol('with')) {\n            withContext = true;\n          } else if (this.skipSymbol('without')) {\n            withContext = false;\n          }\n\n          if (withContext !== null) {\n            if (!this.skipSymbol('context')) {\n              this.fail('parseFrom: expected context after with/without', tok.lineno, tok.colno);\n            }\n          }\n\n          return withContext;\n        };\n\n        _proto.parseImport = function parseImport() {\n          var importTok = this.peekToken();\n\n          if (!this.skipSymbol('import')) {\n            this.fail('parseImport: expected import', importTok.lineno, importTok.colno);\n          }\n\n          var template = this.parseExpression();\n\n          if (!this.skipSymbol('as')) {\n            this.fail('parseImport: expected \"as\" keyword', importTok.lineno, importTok.colno);\n          }\n\n          var target = this.parseExpression();\n          var withContext = this.parseWithContext();\n          var node = new nodes.Import(importTok.lineno, importTok.colno, template, target, withContext);\n          this.advanceAfterBlockEnd(importTok.value);\n          return node;\n        };\n\n        _proto.parseFrom = function parseFrom() {\n          var fromTok = this.peekToken();\n\n          if (!this.skipSymbol('from')) {\n            this.fail('parseFrom: expected from');\n          }\n\n          var template = this.parseExpression();\n\n          if (!this.skipSymbol('import')) {\n            this.fail('parseFrom: expected import', fromTok.lineno, fromTok.colno);\n          }\n\n          var names = new nodes.NodeList();\n          var withContext;\n\n          while (1) {\n            // eslint-disable-line no-constant-condition\n            var nextTok = this.peekToken();\n\n            if (nextTok.type === lexer.TOKEN_BLOCK_END) {\n              if (!names.children.length) {\n                this.fail('parseFrom: Expected at least one import name', fromTok.lineno, fromTok.colno);\n              } // Since we are manually advancing past the block end,\n              // need to keep track of whitespace control (normally\n              // this is done in `advanceAfterBlockEnd`\n\n\n              if (nextTok.value.charAt(0) === '-') {\n                this.dropLeadingWhitespace = true;\n              }\n\n              this.nextToken();\n              break;\n            }\n\n            if (names.children.length > 0 && !this.skip(lexer.TOKEN_COMMA)) {\n              this.fail('parseFrom: expected comma', fromTok.lineno, fromTok.colno);\n            }\n\n            var name = this.parsePrimary();\n\n            if (name.value.charAt(0) === '_') {\n              this.fail('parseFrom: names starting with an underscore cannot be imported', name.lineno, name.colno);\n            }\n\n            if (this.skipSymbol('as')) {\n              var alias = this.parsePrimary();\n              names.addChild(new nodes.Pair(name.lineno, name.colno, name, alias));\n            } else {\n              names.addChild(name);\n            }\n\n            withContext = this.parseWithContext();\n          }\n\n          return new nodes.FromImport(fromTok.lineno, fromTok.colno, template, names, withContext);\n        };\n\n        _proto.parseBlock = function parseBlock() {\n          var tag = this.peekToken();\n\n          if (!this.skipSymbol('block')) {\n            this.fail('parseBlock: expected block', tag.lineno, tag.colno);\n          }\n\n          var node = new nodes.Block(tag.lineno, tag.colno);\n          node.name = this.parsePrimary();\n\n          if (!(node.name instanceof nodes.Symbol)) {\n            this.fail('parseBlock: variable name expected', tag.lineno, tag.colno);\n          }\n\n          this.advanceAfterBlockEnd(tag.value);\n          node.body = this.parseUntilBlocks('endblock');\n          this.skipSymbol('endblock');\n          this.skipSymbol(node.name.value);\n          var tok = this.peekToken();\n\n          if (!tok) {\n            this.fail('parseBlock: expected endblock, got end of file');\n          }\n\n          this.advanceAfterBlockEnd(tok.value);\n          return node;\n        };\n\n        _proto.parseExtends = function parseExtends() {\n          var tagName = 'extends';\n          var tag = this.peekToken();\n\n          if (!this.skipSymbol(tagName)) {\n            this.fail('parseTemplateRef: expected ' + tagName);\n          }\n\n          var node = new nodes.Extends(tag.lineno, tag.colno);\n          node.template = this.parseExpression();\n          this.advanceAfterBlockEnd(tag.value);\n          return node;\n        };\n\n        _proto.parseInclude = function parseInclude() {\n          var tagName = 'include';\n          var tag = this.peekToken();\n\n          if (!this.skipSymbol(tagName)) {\n            this.fail('parseInclude: expected ' + tagName);\n          }\n\n          var node = new nodes.Include(tag.lineno, tag.colno);\n          node.template = this.parseExpression();\n\n          if (this.skipSymbol('ignore') && this.skipSymbol('missing')) {\n            node.ignoreMissing = true;\n          }\n\n          this.advanceAfterBlockEnd(tag.value);\n          return node;\n        };\n\n        _proto.parseIf = function parseIf() {\n          var tag = this.peekToken();\n          var node;\n\n          if (this.skipSymbol('if') || this.skipSymbol('elif') || this.skipSymbol('elseif')) {\n            node = new nodes.If(tag.lineno, tag.colno);\n          } else if (this.skipSymbol('ifAsync')) {\n            node = new nodes.IfAsync(tag.lineno, tag.colno);\n          } else {\n            this.fail('parseIf: expected if, elif, or elseif', tag.lineno, tag.colno);\n          }\n\n          node.cond = this.parseExpression();\n          this.advanceAfterBlockEnd(tag.value);\n          node.body = this.parseUntilBlocks('elif', 'elseif', 'else', 'endif');\n          var tok = this.peekToken();\n\n          switch (tok && tok.value) {\n            case 'elseif':\n            case 'elif':\n              node.else_ = this.parseIf();\n              break;\n\n            case 'else':\n              this.advanceAfterBlockEnd();\n              node.else_ = this.parseUntilBlocks('endif');\n              this.advanceAfterBlockEnd();\n              break;\n\n            case 'endif':\n              node.else_ = null;\n              this.advanceAfterBlockEnd();\n              break;\n\n            default:\n              this.fail('parseIf: expected elif, else, or endif, got end of file');\n          }\n\n          return node;\n        };\n\n        _proto.parseSet = function parseSet() {\n          var tag = this.peekToken();\n\n          if (!this.skipSymbol('set')) {\n            this.fail('parseSet: expected set', tag.lineno, tag.colno);\n          }\n\n          var node = new nodes.Set(tag.lineno, tag.colno, []);\n          var target;\n\n          while (target = this.parsePrimary()) {\n            node.targets.push(target);\n\n            if (!this.skip(lexer.TOKEN_COMMA)) {\n              break;\n            }\n          }\n\n          if (!this.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n            if (!this.skip(lexer.TOKEN_BLOCK_END)) {\n              this.fail('parseSet: expected = or block end in set tag', tag.lineno, tag.colno);\n            } else {\n              node.body = new nodes.Capture(tag.lineno, tag.colno, this.parseUntilBlocks('endset'));\n              node.value = null;\n              this.advanceAfterBlockEnd();\n            }\n          } else {\n            node.value = this.parseExpression();\n            this.advanceAfterBlockEnd(tag.value);\n          }\n\n          return node;\n        };\n\n        _proto.parseSwitch = function parseSwitch() {\n          /*\n           * Store the tag names in variables in case someone ever wants to\n           * customize this.\n           */\n          var switchStart = 'switch';\n          var switchEnd = 'endswitch';\n          var caseStart = 'case';\n          var caseDefault = 'default'; // Get the switch tag.\n\n          var tag = this.peekToken(); // fail early if we get some unexpected tag.\n\n          if (!this.skipSymbol(switchStart) && !this.skipSymbol(caseStart) && !this.skipSymbol(caseDefault)) {\n            this.fail('parseSwitch: expected \"switch,\" \"case\" or \"default\"', tag.lineno, tag.colno);\n          } // parse the switch expression\n\n\n          var expr = this.parseExpression(); // advance until a start of a case, a default case or an endswitch.\n\n          this.advanceAfterBlockEnd(switchStart);\n          this.parseUntilBlocks(caseStart, caseDefault, switchEnd); // this is the first case. it could also be an endswitch, we'll check.\n\n          var tok = this.peekToken(); // create new variables for our cases and default case.\n\n          var cases = [];\n          var defaultCase; // while we're dealing with new cases nodes...\n\n          do {\n            // skip the start symbol and get the case expression\n            this.skipSymbol(caseStart);\n            var cond = this.parseExpression();\n            this.advanceAfterBlockEnd(switchStart); // get the body of the case node and add it to the array of cases.\n\n            var body = this.parseUntilBlocks(caseStart, caseDefault, switchEnd);\n            cases.push(new nodes.Case(tok.line, tok.col, cond, body)); // get our next case\n\n            tok = this.peekToken();\n          } while (tok && tok.value === caseStart); // we either have a default case or a switch end.\n\n\n          switch (tok.value) {\n            case caseDefault:\n              this.advanceAfterBlockEnd();\n              defaultCase = this.parseUntilBlocks(switchEnd);\n              this.advanceAfterBlockEnd();\n              break;\n\n            case switchEnd:\n              this.advanceAfterBlockEnd();\n              break;\n\n            default:\n              // otherwise bail because EOF\n              this.fail('parseSwitch: expected \"case,\" \"default\" or \"endswitch,\" got EOF.');\n          } // and return the switch node.\n\n\n          return new nodes.Switch(tag.lineno, tag.colno, expr, cases, defaultCase);\n        };\n\n        _proto.parseStatement = function parseStatement() {\n          var tok = this.peekToken();\n          var node;\n\n          if (tok.type !== lexer.TOKEN_SYMBOL) {\n            this.fail('tag name expected', tok.lineno, tok.colno);\n          }\n\n          if (this.breakOnBlocks && lib.indexOf(this.breakOnBlocks, tok.value) !== -1) {\n            return null;\n          }\n\n          switch (tok.value) {\n            case 'raw':\n              return this.parseRaw();\n\n            case 'verbatim':\n              return this.parseRaw('verbatim');\n\n            case 'if':\n            case 'ifAsync':\n              return this.parseIf();\n\n            case 'for':\n            case 'asyncEach':\n            case 'asyncAll':\n              return this.parseFor();\n\n            case 'block':\n              return this.parseBlock();\n\n            case 'extends':\n              return this.parseExtends();\n\n            case 'include':\n              return this.parseInclude();\n\n            case 'set':\n              return this.parseSet();\n\n            case 'macro':\n              return this.parseMacro();\n\n            case 'call':\n              return this.parseCall();\n\n            case 'import':\n              return this.parseImport();\n\n            case 'from':\n              return this.parseFrom();\n\n            case 'filter':\n              return this.parseFilterStatement();\n\n            case 'switch':\n              return this.parseSwitch();\n\n            default:\n              if (this.extensions.length) {\n                for (var i = 0; i < this.extensions.length; i++) {\n                  var ext = this.extensions[i];\n\n                  if (lib.indexOf(ext.tags || [], tok.value) !== -1) {\n                    return ext.parse(this, nodes, lexer);\n                  }\n                }\n              }\n\n              this.fail('unknown block tag: ' + tok.value, tok.lineno, tok.colno);\n          }\n\n          return node;\n        };\n\n        _proto.parseRaw = function parseRaw(tagName) {\n          tagName = tagName || 'raw';\n          var endTagName = 'end' + tagName; // Look for upcoming raw blocks (ignore all other kinds of blocks)\n\n          var rawBlockRegex = new RegExp('([\\\\s\\\\S]*?){%\\\\s*(' + tagName + '|' + endTagName + ')\\\\s*(?=%})%}');\n          var rawLevel = 1;\n          var str = '';\n          var matches = null; // Skip opening raw token\n          // Keep this token to track line and column numbers\n\n          var begun = this.advanceAfterBlockEnd(); // Exit when there's nothing to match\n          // or when we've found the matching \"endraw\" block\n\n          while ((matches = this.tokens._extractRegex(rawBlockRegex)) && rawLevel > 0) {\n            var all = matches[0];\n            var pre = matches[1];\n            var blockName = matches[2]; // Adjust rawlevel\n\n            if (blockName === tagName) {\n              rawLevel += 1;\n            } else if (blockName === endTagName) {\n              rawLevel -= 1;\n            } // Add to str\n\n\n            if (rawLevel === 0) {\n              // We want to exclude the last \"endraw\"\n              str += pre; // Move tokenizer to beginning of endraw block\n\n              this.tokens.backN(all.length - pre.length);\n            } else {\n              str += all;\n            }\n          }\n\n          return new nodes.Output(begun.lineno, begun.colno, [new nodes.TemplateData(begun.lineno, begun.colno, str)]);\n        };\n\n        _proto.parsePostfix = function parsePostfix(node) {\n          var lookup;\n          var tok = this.peekToken();\n\n          while (tok) {\n            if (tok.type === lexer.TOKEN_LEFT_PAREN) {\n              // Function call\n              node = new nodes.FunCall(tok.lineno, tok.colno, node, this.parseSignature());\n            } else if (tok.type === lexer.TOKEN_LEFT_BRACKET) {\n              // Reference\n              lookup = this.parseAggregate();\n\n              if (lookup.children.length > 1) {\n                this.fail('invalid index');\n              }\n\n              node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup.children[0]);\n            } else if (tok.type === lexer.TOKEN_OPERATOR && tok.value === '.') {\n              // Reference\n              this.nextToken();\n              var val = this.nextToken();\n\n              if (val.type !== lexer.TOKEN_SYMBOL) {\n                this.fail('expected name as lookup value, got ' + val.value, val.lineno, val.colno);\n              } // Make a literal string because it's not a variable\n              // reference\n\n\n              lookup = new nodes.Literal(val.lineno, val.colno, val.value);\n              node = new nodes.LookupVal(tok.lineno, tok.colno, node, lookup);\n            } else {\n              break;\n            }\n\n            tok = this.peekToken();\n          }\n\n          return node;\n        };\n\n        _proto.parseExpression = function parseExpression() {\n          var node = this.parseInlineIf();\n          return node;\n        };\n\n        _proto.parseInlineIf = function parseInlineIf() {\n          var node = this.parseOr();\n\n          if (this.skipSymbol('if')) {\n            var condNode = this.parseOr();\n            var bodyNode = node;\n            node = new nodes.InlineIf(node.lineno, node.colno);\n            node.body = bodyNode;\n            node.cond = condNode;\n\n            if (this.skipSymbol('else')) {\n              node.else_ = this.parseOr();\n            } else {\n              node.else_ = null;\n            }\n          }\n\n          return node;\n        };\n\n        _proto.parseOr = function parseOr() {\n          var node = this.parseAnd();\n\n          while (this.skipSymbol('or')) {\n            var node2 = this.parseAnd();\n            node = new nodes.Or(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseAnd = function parseAnd() {\n          var node = this.parseNot();\n\n          while (this.skipSymbol('and')) {\n            var node2 = this.parseNot();\n            node = new nodes.And(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseNot = function parseNot() {\n          var tok = this.peekToken();\n\n          if (this.skipSymbol('not')) {\n            return new nodes.Not(tok.lineno, tok.colno, this.parseNot());\n          }\n\n          return this.parseIn();\n        };\n\n        _proto.parseIn = function parseIn() {\n          var node = this.parseIs();\n\n          while (1) {\n            // eslint-disable-line no-constant-condition\n            // check if the next token is 'not'\n            var tok = this.nextToken();\n\n            if (!tok) {\n              break;\n            }\n\n            var invert = tok.type === lexer.TOKEN_SYMBOL && tok.value === 'not'; // if it wasn't 'not', put it back\n\n            if (!invert) {\n              this.pushToken(tok);\n            }\n\n            if (this.skipSymbol('in')) {\n              var node2 = this.parseIs();\n              node = new nodes.In(node.lineno, node.colno, node, node2);\n\n              if (invert) {\n                node = new nodes.Not(node.lineno, node.colno, node);\n              }\n            } else {\n              // if we'd found a 'not' but this wasn't an 'in', put back the 'not'\n              if (invert) {\n                this.pushToken(tok);\n              }\n\n              break;\n            }\n          }\n\n          return node;\n        } // I put this right after \"in\" in the operator precedence stack. That can\n        // obviously be changed to be closer to Jinja.\n        ;\n\n        _proto.parseIs = function parseIs() {\n          var node = this.parseCompare(); // look for an is\n\n          if (this.skipSymbol('is')) {\n            // look for a not\n            var not = this.skipSymbol('not'); // get the next node\n\n            var node2 = this.parseCompare(); // create an Is node using the next node and the info from our Is node.\n\n            node = new nodes.Is(node.lineno, node.colno, node, node2); // if we have a Not, create a Not node from our Is node.\n\n            if (not) {\n              node = new nodes.Not(node.lineno, node.colno, node);\n            }\n          } // return the node.\n\n\n          return node;\n        };\n\n        _proto.parseCompare = function parseCompare() {\n          var compareOps = ['==', '===', '!=', '!==', '<', '>', '<=', '>='];\n          var expr = this.parseConcat();\n          var ops = [];\n\n          while (1) {\n            // eslint-disable-line no-constant-condition\n            var tok = this.nextToken();\n\n            if (!tok) {\n              break;\n            } else if (compareOps.indexOf(tok.value) !== -1) {\n              ops.push(new nodes.CompareOperand(tok.lineno, tok.colno, this.parseConcat(), tok.value));\n            } else {\n              this.pushToken(tok);\n              break;\n            }\n          }\n\n          if (ops.length) {\n            return new nodes.Compare(ops[0].lineno, ops[0].colno, expr, ops);\n          } else {\n            return expr;\n          }\n        } // finds the '~' for string concatenation\n        ;\n\n        _proto.parseConcat = function parseConcat() {\n          var node = this.parseAdd();\n\n          while (this.skipValue(lexer.TOKEN_TILDE, '~')) {\n            var node2 = this.parseAdd();\n            node = new nodes.Concat(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseAdd = function parseAdd() {\n          var node = this.parseSub();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '+')) {\n            var node2 = this.parseSub();\n            node = new nodes.Add(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseSub = function parseSub() {\n          var node = this.parseMul();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '-')) {\n            var node2 = this.parseMul();\n            node = new nodes.Sub(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseMul = function parseMul() {\n          var node = this.parseDiv();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '*')) {\n            var node2 = this.parseDiv();\n            node = new nodes.Mul(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseDiv = function parseDiv() {\n          var node = this.parseFloorDiv();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '/')) {\n            var node2 = this.parseFloorDiv();\n            node = new nodes.Div(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseFloorDiv = function parseFloorDiv() {\n          var node = this.parseMod();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '//')) {\n            var node2 = this.parseMod();\n            node = new nodes.FloorDiv(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseMod = function parseMod() {\n          var node = this.parsePow();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '%')) {\n            var node2 = this.parsePow();\n            node = new nodes.Mod(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parsePow = function parsePow() {\n          var node = this.parseUnary();\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '**')) {\n            var node2 = this.parseUnary();\n            node = new nodes.Pow(node.lineno, node.colno, node, node2);\n          }\n\n          return node;\n        };\n\n        _proto.parseUnary = function parseUnary(noFilters) {\n          var tok = this.peekToken();\n          var node;\n\n          if (this.skipValue(lexer.TOKEN_OPERATOR, '-')) {\n            node = new nodes.Neg(tok.lineno, tok.colno, this.parseUnary(true));\n          } else if (this.skipValue(lexer.TOKEN_OPERATOR, '+')) {\n            node = new nodes.Pos(tok.lineno, tok.colno, this.parseUnary(true));\n          } else {\n            node = this.parsePrimary();\n          }\n\n          if (!noFilters) {\n            node = this.parseFilter(node);\n          }\n\n          return node;\n        };\n\n        _proto.parsePrimary = function parsePrimary(noPostfix) {\n          var tok = this.nextToken();\n          var val;\n          var node = null;\n\n          if (!tok) {\n            this.fail('expected expression, got end of file');\n          } else if (tok.type === lexer.TOKEN_STRING) {\n            val = tok.value;\n          } else if (tok.type === lexer.TOKEN_INT) {\n            val = parseInt(tok.value, 10);\n          } else if (tok.type === lexer.TOKEN_FLOAT) {\n            val = parseFloat(tok.value);\n          } else if (tok.type === lexer.TOKEN_BOOLEAN) {\n            if (tok.value === 'true') {\n              val = true;\n            } else if (tok.value === 'false') {\n              val = false;\n            } else {\n              this.fail('invalid boolean: ' + tok.value, tok.lineno, tok.colno);\n            }\n          } else if (tok.type === lexer.TOKEN_NONE) {\n            val = null;\n          } else if (tok.type === lexer.TOKEN_REGEX) {\n            val = new RegExp(tok.value.body, tok.value.flags);\n          }\n\n          if (val !== undefined) {\n            node = new nodes.Literal(tok.lineno, tok.colno, val);\n          } else if (tok.type === lexer.TOKEN_SYMBOL) {\n            node = new nodes.Symbol(tok.lineno, tok.colno, tok.value);\n          } else {\n            // See if it's an aggregate type, we need to push the\n            // current delimiter token back on\n            this.pushToken(tok);\n            node = this.parseAggregate();\n          }\n\n          if (!noPostfix) {\n            node = this.parsePostfix(node);\n          }\n\n          if (node) {\n            return node;\n          } else {\n            throw this.error(\"unexpected token: \" + tok.value, tok.lineno, tok.colno);\n          }\n        };\n\n        _proto.parseFilterName = function parseFilterName() {\n          var tok = this.expect(lexer.TOKEN_SYMBOL);\n          var name = tok.value;\n\n          while (this.skipValue(lexer.TOKEN_OPERATOR, '.')) {\n            name += '.' + this.expect(lexer.TOKEN_SYMBOL).value;\n          }\n\n          return new nodes.Symbol(tok.lineno, tok.colno, name);\n        };\n\n        _proto.parseFilterArgs = function parseFilterArgs(node) {\n          if (this.peekToken().type === lexer.TOKEN_LEFT_PAREN) {\n            // Get a FunCall node and add the parameters to the\n            // filter\n            var call = this.parsePostfix(node);\n            return call.args.children;\n          }\n\n          return [];\n        };\n\n        _proto.parseFilter = function parseFilter(node) {\n          while (this.skip(lexer.TOKEN_PIPE)) {\n            var name = this.parseFilterName();\n            node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [node].concat(this.parseFilterArgs(node))));\n          }\n\n          return node;\n        };\n\n        _proto.parseFilterStatement = function parseFilterStatement() {\n          var filterTok = this.peekToken();\n\n          if (!this.skipSymbol('filter')) {\n            this.fail('parseFilterStatement: expected filter');\n          }\n\n          var name = this.parseFilterName();\n          var args = this.parseFilterArgs(name);\n          this.advanceAfterBlockEnd(filterTok.value);\n          var body = new nodes.Capture(name.lineno, name.colno, this.parseUntilBlocks('endfilter'));\n          this.advanceAfterBlockEnd();\n          var node = new nodes.Filter(name.lineno, name.colno, name, new nodes.NodeList(name.lineno, name.colno, [body].concat(args)));\n          return new nodes.Output(name.lineno, name.colno, [node]);\n        };\n\n        _proto.parseAggregate = function parseAggregate() {\n          var tok = this.nextToken();\n          var node;\n\n          switch (tok.type) {\n            case lexer.TOKEN_LEFT_PAREN:\n              node = new nodes.Group(tok.lineno, tok.colno);\n              break;\n\n            case lexer.TOKEN_LEFT_BRACKET:\n              node = new nodes.Array(tok.lineno, tok.colno);\n              break;\n\n            case lexer.TOKEN_LEFT_CURLY:\n              node = new nodes.Dict(tok.lineno, tok.colno);\n              break;\n\n            default:\n              return null;\n          }\n\n          while (1) {\n            // eslint-disable-line no-constant-condition\n            var type = this.peekToken().type;\n\n            if (type === lexer.TOKEN_RIGHT_PAREN || type === lexer.TOKEN_RIGHT_BRACKET || type === lexer.TOKEN_RIGHT_CURLY) {\n              this.nextToken();\n              break;\n            }\n\n            if (node.children.length > 0) {\n              if (!this.skip(lexer.TOKEN_COMMA)) {\n                this.fail('parseAggregate: expected comma after expression', tok.lineno, tok.colno);\n              }\n            }\n\n            if (node instanceof nodes.Dict) {\n              // TODO: check for errors\n              var key = this.parsePrimary(); // We expect a key/value pair for dicts, separated by a\n              // colon\n\n              if (!this.skip(lexer.TOKEN_COLON)) {\n                this.fail('parseAggregate: expected colon after dict key', tok.lineno, tok.colno);\n              } // TODO: check for errors\n\n\n              var value = this.parseExpression();\n              node.addChild(new nodes.Pair(key.lineno, key.colno, key, value));\n            } else {\n              // TODO: check for errors\n              var expr = this.parseExpression();\n              node.addChild(expr);\n            }\n          }\n\n          return node;\n        };\n\n        _proto.parseSignature = function parseSignature(tolerant, noParens) {\n          var tok = this.peekToken();\n\n          if (!noParens && tok.type !== lexer.TOKEN_LEFT_PAREN) {\n            if (tolerant) {\n              return null;\n            } else {\n              this.fail('expected arguments', tok.lineno, tok.colno);\n            }\n          }\n\n          if (tok.type === lexer.TOKEN_LEFT_PAREN) {\n            tok = this.nextToken();\n          }\n\n          var args = new nodes.NodeList(tok.lineno, tok.colno);\n          var kwargs = new nodes.KeywordArgs(tok.lineno, tok.colno);\n          var checkComma = false;\n\n          while (1) {\n            // eslint-disable-line no-constant-condition\n            tok = this.peekToken();\n\n            if (!noParens && tok.type === lexer.TOKEN_RIGHT_PAREN) {\n              this.nextToken();\n              break;\n            } else if (noParens && tok.type === lexer.TOKEN_BLOCK_END) {\n              break;\n            }\n\n            if (checkComma && !this.skip(lexer.TOKEN_COMMA)) {\n              this.fail('parseSignature: expected comma after expression', tok.lineno, tok.colno);\n            } else {\n              var arg = this.parseExpression();\n\n              if (this.skipValue(lexer.TOKEN_OPERATOR, '=')) {\n                kwargs.addChild(new nodes.Pair(arg.lineno, arg.colno, arg, this.parseExpression()));\n              } else {\n                args.addChild(arg);\n              }\n            }\n\n            checkComma = true;\n          }\n\n          if (kwargs.children.length) {\n            args.addChild(kwargs);\n          }\n\n          return args;\n        };\n\n        _proto.parseUntilBlocks = function parseUntilBlocks() {\n          var prev = this.breakOnBlocks;\n\n          for (var _len = arguments.length, blockNames = new Array(_len), _key = 0; _key < _len; _key++) {\n            blockNames[_key] = arguments[_key];\n          }\n\n          this.breakOnBlocks = blockNames;\n          var ret = this.parse();\n          this.breakOnBlocks = prev;\n          return ret;\n        };\n\n        _proto.parseNodes = function parseNodes() {\n          var tok;\n          var buf = [];\n\n          while (tok = this.nextToken()) {\n            if (tok.type === lexer.TOKEN_DATA) {\n              var data = tok.value;\n              var nextToken = this.peekToken();\n              var nextVal = nextToken && nextToken.value; // If the last token has \"-\" we need to trim the\n              // leading whitespace of the data. This is marked with\n              // the `dropLeadingWhitespace` variable.\n\n              if (this.dropLeadingWhitespace) {\n                // TODO: this could be optimized (don't use regex)\n                data = data.replace(/^\\s*/, '');\n                this.dropLeadingWhitespace = false;\n              } // Same for the succeeding block start token\n\n\n              if (nextToken && (nextToken.type === lexer.TOKEN_BLOCK_START && nextVal.charAt(nextVal.length - 1) === '-' || nextToken.type === lexer.TOKEN_VARIABLE_START && nextVal.charAt(this.tokens.tags.VARIABLE_START.length) === '-' || nextToken.type === lexer.TOKEN_COMMENT && nextVal.charAt(this.tokens.tags.COMMENT_START.length) === '-')) {\n                // TODO: this could be optimized (don't use regex)\n                data = data.replace(/\\s*$/, '');\n              }\n\n              buf.push(new nodes.Output(tok.lineno, tok.colno, [new nodes.TemplateData(tok.lineno, tok.colno, data)]));\n            } else if (tok.type === lexer.TOKEN_BLOCK_START) {\n              this.dropLeadingWhitespace = false;\n              var n = this.parseStatement();\n\n              if (!n) {\n                break;\n              }\n\n              buf.push(n);\n            } else if (tok.type === lexer.TOKEN_VARIABLE_START) {\n              var e = this.parseExpression();\n              this.dropLeadingWhitespace = false;\n              this.advanceAfterVariableEnd();\n              buf.push(new nodes.Output(tok.lineno, tok.colno, [e]));\n            } else if (tok.type === lexer.TOKEN_COMMENT) {\n              this.dropLeadingWhitespace = tok.value.charAt(tok.value.length - this.tokens.tags.COMMENT_END.length - 1) === '-';\n            } else {\n              // Ignore comments, otherwise this should be an error\n              this.fail('Unexpected token at top-level: ' + tok.type, tok.lineno, tok.colno);\n            }\n          }\n\n          return buf;\n        };\n\n        _proto.parse = function parse() {\n          return new nodes.NodeList(0, 0, this.parseNodes());\n        };\n\n        _proto.parseAsRoot = function parseAsRoot() {\n          return new nodes.Root(0, 0, this.parseNodes());\n        };\n\n        return Parser;\n      }(Obj); // var util = require('util');\n      // var l = lexer.lex('{%- if x -%}\\n hello {% endif %}');\n      // var t;\n      // while((t = l.nextToken())) {\n      //     console.log(util.inspect(t));\n      // }\n      // var p = new Parser(lexer.lex('hello {% filter title %}' +\n      //                              'Hello madam how are you' +\n      //                              '{% endfilter %}'));\n      // var n = p.parseAsRoot();\n      // nodes.printNodes(n);\n\n\n      module.exports = {\n        parse: function parse(src, extensions, opts) {\n          var p = new Parser(lexer.lex(src, opts));\n\n          if (extensions !== undefined) {\n            p.extensions = extensions;\n          }\n\n          return p.parseAsRoot();\n        },\n        Parser: Parser\n      };\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var lib = __webpack_require__(0);\n\n      var whitespaceChars = \" \\n\\t\\r\\xA0\";\n      var delimChars = '()[]{}%*-+~/#,:|.<>=!';\n      var intChars = '0123456789';\n      var BLOCK_START = '{%';\n      var BLOCK_END = '%}';\n      var VARIABLE_START = '{{';\n      var VARIABLE_END = '}}';\n      var COMMENT_START = '{#';\n      var COMMENT_END = '#}';\n      var TOKEN_STRING = 'string';\n      var TOKEN_WHITESPACE = 'whitespace';\n      var TOKEN_DATA = 'data';\n      var TOKEN_BLOCK_START = 'block-start';\n      var TOKEN_BLOCK_END = 'block-end';\n      var TOKEN_VARIABLE_START = 'variable-start';\n      var TOKEN_VARIABLE_END = 'variable-end';\n      var TOKEN_COMMENT = 'comment';\n      var TOKEN_LEFT_PAREN = 'left-paren';\n      var TOKEN_RIGHT_PAREN = 'right-paren';\n      var TOKEN_LEFT_BRACKET = 'left-bracket';\n      var TOKEN_RIGHT_BRACKET = 'right-bracket';\n      var TOKEN_LEFT_CURLY = 'left-curly';\n      var TOKEN_RIGHT_CURLY = 'right-curly';\n      var TOKEN_OPERATOR = 'operator';\n      var TOKEN_COMMA = 'comma';\n      var TOKEN_COLON = 'colon';\n      var TOKEN_TILDE = 'tilde';\n      var TOKEN_PIPE = 'pipe';\n      var TOKEN_INT = 'int';\n      var TOKEN_FLOAT = 'float';\n      var TOKEN_BOOLEAN = 'boolean';\n      var TOKEN_NONE = 'none';\n      var TOKEN_SYMBOL = 'symbol';\n      var TOKEN_SPECIAL = 'special';\n      var TOKEN_REGEX = 'regex';\n\n      function token(type, value, lineno, colno) {\n        return {\n          type: type,\n          value: value,\n          lineno: lineno,\n          colno: colno\n        };\n      }\n\n      var Tokenizer = /*#__PURE__*/function () {\n        function Tokenizer(str, opts) {\n          this.str = str;\n          this.index = 0;\n          this.len = str.length;\n          this.lineno = 0;\n          this.colno = 0;\n          this.in_code = false;\n          opts = opts || {};\n          var tags = opts.tags || {};\n          this.tags = {\n            BLOCK_START: tags.blockStart || BLOCK_START,\n            BLOCK_END: tags.blockEnd || BLOCK_END,\n            VARIABLE_START: tags.variableStart || VARIABLE_START,\n            VARIABLE_END: tags.variableEnd || VARIABLE_END,\n            COMMENT_START: tags.commentStart || COMMENT_START,\n            COMMENT_END: tags.commentEnd || COMMENT_END\n          };\n          this.trimBlocks = !!opts.trimBlocks;\n          this.lstripBlocks = !!opts.lstripBlocks;\n        }\n\n        var _proto = Tokenizer.prototype;\n\n        _proto.nextToken = function nextToken() {\n          var lineno = this.lineno;\n          var colno = this.colno;\n          var tok;\n\n          if (this.in_code) {\n            // Otherwise, if we are in a block parse it as code\n            var cur = this.current();\n\n            if (this.isFinished()) {\n              // We have nothing else to parse\n              return null;\n            } else if (cur === '\"' || cur === '\\'') {\n              // We've hit a string\n              return token(TOKEN_STRING, this._parseString(cur), lineno, colno);\n            } else if (tok = this._extract(whitespaceChars)) {\n              // We hit some whitespace\n              return token(TOKEN_WHITESPACE, tok, lineno, colno);\n            } else if ((tok = this._extractString(this.tags.BLOCK_END)) || (tok = this._extractString('-' + this.tags.BLOCK_END))) {\n              // Special check for the block end tag\n              //\n              // It is a requirement that start and end tags are composed of\n              // delimiter characters (%{}[] etc), and our code always\n              // breaks on delimiters so we can assume the token parsing\n              // doesn't consume these elsewhere\n              this.in_code = false;\n\n              if (this.trimBlocks) {\n                cur = this.current();\n\n                if (cur === '\\n') {\n                  // Skip newline\n                  this.forward();\n                } else if (cur === '\\r') {\n                  // Skip CRLF newline\n                  this.forward();\n                  cur = this.current();\n\n                  if (cur === '\\n') {\n                    this.forward();\n                  } else {\n                    // Was not a CRLF, so go back\n                    this.back();\n                  }\n                }\n              }\n\n              return token(TOKEN_BLOCK_END, tok, lineno, colno);\n            } else if ((tok = this._extractString(this.tags.VARIABLE_END)) || (tok = this._extractString('-' + this.tags.VARIABLE_END))) {\n              // Special check for variable end tag (see above)\n              this.in_code = false;\n              return token(TOKEN_VARIABLE_END, tok, lineno, colno);\n            } else if (cur === 'r' && this.str.charAt(this.index + 1) === '/') {\n              // Skip past 'r/'.\n              this.forwardN(2); // Extract until the end of the regex -- / ends it, \\/ does not.\n\n              var regexBody = '';\n\n              while (!this.isFinished()) {\n                if (this.current() === '/' && this.previous() !== '\\\\') {\n                  this.forward();\n                  break;\n                } else {\n                  regexBody += this.current();\n                  this.forward();\n                }\n              } // Check for flags.\n              // The possible flags are according to https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp)\n\n\n              var POSSIBLE_FLAGS = ['g', 'i', 'm', 'y'];\n              var regexFlags = '';\n\n              while (!this.isFinished()) {\n                var isCurrentAFlag = POSSIBLE_FLAGS.indexOf(this.current()) !== -1;\n\n                if (isCurrentAFlag) {\n                  regexFlags += this.current();\n                  this.forward();\n                } else {\n                  break;\n                }\n              }\n\n              return token(TOKEN_REGEX, {\n                body: regexBody,\n                flags: regexFlags\n              }, lineno, colno);\n            } else if (delimChars.indexOf(cur) !== -1) {\n              // We've hit a delimiter (a special char like a bracket)\n              this.forward();\n              var complexOps = ['==', '===', '!=', '!==', '<=', '>=', '//', '**'];\n              var curComplex = cur + this.current();\n              var type;\n\n              if (lib.indexOf(complexOps, curComplex) !== -1) {\n                this.forward();\n                cur = curComplex; // See if this is a strict equality/inequality comparator\n\n                if (lib.indexOf(complexOps, curComplex + this.current()) !== -1) {\n                  cur = curComplex + this.current();\n                  this.forward();\n                }\n              }\n\n              switch (cur) {\n                case '(':\n                  type = TOKEN_LEFT_PAREN;\n                  break;\n\n                case ')':\n                  type = TOKEN_RIGHT_PAREN;\n                  break;\n\n                case '[':\n                  type = TOKEN_LEFT_BRACKET;\n                  break;\n\n                case ']':\n                  type = TOKEN_RIGHT_BRACKET;\n                  break;\n\n                case '{':\n                  type = TOKEN_LEFT_CURLY;\n                  break;\n\n                case '}':\n                  type = TOKEN_RIGHT_CURLY;\n                  break;\n\n                case ',':\n                  type = TOKEN_COMMA;\n                  break;\n\n                case ':':\n                  type = TOKEN_COLON;\n                  break;\n\n                case '~':\n                  type = TOKEN_TILDE;\n                  break;\n\n                case '|':\n                  type = TOKEN_PIPE;\n                  break;\n\n                default:\n                  type = TOKEN_OPERATOR;\n              }\n\n              return token(type, cur, lineno, colno);\n            } else {\n              // We are not at whitespace or a delimiter, so extract the\n              // text and parse it\n              tok = this._extractUntil(whitespaceChars + delimChars);\n\n              if (tok.match(/^[-+]?[0-9]+$/)) {\n                if (this.current() === '.') {\n                  this.forward();\n\n                  var dec = this._extract(intChars);\n\n                  return token(TOKEN_FLOAT, tok + '.' + dec, lineno, colno);\n                } else {\n                  return token(TOKEN_INT, tok, lineno, colno);\n                }\n              } else if (tok.match(/^(true|false)$/)) {\n                return token(TOKEN_BOOLEAN, tok, lineno, colno);\n              } else if (tok === 'none') {\n                return token(TOKEN_NONE, tok, lineno, colno);\n                /*\n                 * Added to make the test `null is null` evaluate truthily.\n                 * Otherwise, Nunjucks will look up null in the context and\n                 * return `undefined`, which is not what we want. This *may* have\n                 * consequences is someone is using null in their templates as a\n                 * variable.\n                 */\n              } else if (tok === 'null') {\n                return token(TOKEN_NONE, tok, lineno, colno);\n              } else if (tok) {\n                return token(TOKEN_SYMBOL, tok, lineno, colno);\n              } else {\n                throw new Error('Unexpected value while parsing: ' + tok);\n              }\n            }\n          } else {\n            // Parse out the template text, breaking on tag\n            // delimiters because we need to look for block/variable start\n            // tags (don't use the full delimChars for optimization)\n            var beginChars = this.tags.BLOCK_START.charAt(0) + this.tags.VARIABLE_START.charAt(0) + this.tags.COMMENT_START.charAt(0) + this.tags.COMMENT_END.charAt(0);\n\n            if (this.isFinished()) {\n              return null;\n            } else if ((tok = this._extractString(this.tags.BLOCK_START + '-')) || (tok = this._extractString(this.tags.BLOCK_START))) {\n              this.in_code = true;\n              return token(TOKEN_BLOCK_START, tok, lineno, colno);\n            } else if ((tok = this._extractString(this.tags.VARIABLE_START + '-')) || (tok = this._extractString(this.tags.VARIABLE_START))) {\n              this.in_code = true;\n              return token(TOKEN_VARIABLE_START, tok, lineno, colno);\n            } else {\n              tok = '';\n              var data;\n              var inComment = false;\n\n              if (this._matches(this.tags.COMMENT_START)) {\n                inComment = true;\n                tok = this._extractString(this.tags.COMMENT_START);\n              } // Continually consume text, breaking on the tag delimiter\n              // characters and checking to see if it's a start tag.\n              //\n              // We could hit the end of the template in the middle of\n              // our looping, so check for the null return value from\n              // _extractUntil\n\n\n              while ((data = this._extractUntil(beginChars)) !== null) {\n                tok += data;\n\n                if ((this._matches(this.tags.BLOCK_START) || this._matches(this.tags.VARIABLE_START) || this._matches(this.tags.COMMENT_START)) && !inComment) {\n                  if (this.lstripBlocks && this._matches(this.tags.BLOCK_START) && this.colno > 0 && this.colno <= tok.length) {\n                    var lastLine = tok.slice(-this.colno);\n\n                    if (/^\\s+$/.test(lastLine)) {\n                      // Remove block leading whitespace from beginning of the string\n                      tok = tok.slice(0, -this.colno);\n\n                      if (!tok.length) {\n                        // All data removed, collapse to avoid unnecessary nodes\n                        // by returning next token (block start)\n                        return this.nextToken();\n                      }\n                    }\n                  } // If it is a start tag, stop looping\n\n\n                  break;\n                } else if (this._matches(this.tags.COMMENT_END)) {\n                  if (!inComment) {\n                    throw new Error('unexpected end of comment');\n                  }\n\n                  tok += this._extractString(this.tags.COMMENT_END);\n                  break;\n                } else {\n                  // It does not match any tag, so add the character and\n                  // carry on\n                  tok += this.current();\n                  this.forward();\n                }\n              }\n\n              if (data === null && inComment) {\n                throw new Error('expected end of comment, got end of file');\n              }\n\n              return token(inComment ? TOKEN_COMMENT : TOKEN_DATA, tok, lineno, colno);\n            }\n          }\n        };\n\n        _proto._parseString = function _parseString(delimiter) {\n          this.forward();\n          var str = '';\n\n          while (!this.isFinished() && this.current() !== delimiter) {\n            var cur = this.current();\n\n            if (cur === '\\\\') {\n              this.forward();\n\n              switch (this.current()) {\n                case 'n':\n                  str += '\\n';\n                  break;\n\n                case 't':\n                  str += '\\t';\n                  break;\n\n                case 'r':\n                  str += '\\r';\n                  break;\n\n                default:\n                  str += this.current();\n              }\n\n              this.forward();\n            } else {\n              str += cur;\n              this.forward();\n            }\n          }\n\n          this.forward();\n          return str;\n        };\n\n        _proto._matches = function _matches(str) {\n          if (this.index + str.length > this.len) {\n            return null;\n          }\n\n          var m = this.str.slice(this.index, this.index + str.length);\n          return m === str;\n        };\n\n        _proto._extractString = function _extractString(str) {\n          if (this._matches(str)) {\n            this.forwardN(str.length);\n            return str;\n          }\n\n          return null;\n        };\n\n        _proto._extractUntil = function _extractUntil(charString) {\n          // Extract all non-matching chars, with the default matching set\n          // to everything\n          return this._extractMatching(true, charString || '');\n        };\n\n        _proto._extract = function _extract(charString) {\n          // Extract all matching chars (no default, so charString must be\n          // explicit)\n          return this._extractMatching(false, charString);\n        };\n\n        _proto._extractMatching = function _extractMatching(breakOnMatch, charString) {\n          // Pull out characters until a breaking char is hit.\n          // If breakOnMatch is false, a non-matching char stops it.\n          // If breakOnMatch is true, a matching char stops it.\n          if (this.isFinished()) {\n            return null;\n          }\n\n          var first = charString.indexOf(this.current()); // Only proceed if the first character doesn't meet our condition\n\n          if (breakOnMatch && first === -1 || !breakOnMatch && first !== -1) {\n            var t = this.current();\n            this.forward(); // And pull out all the chars one at a time until we hit a\n            // breaking char\n\n            var idx = charString.indexOf(this.current());\n\n            while ((breakOnMatch && idx === -1 || !breakOnMatch && idx !== -1) && !this.isFinished()) {\n              t += this.current();\n              this.forward();\n              idx = charString.indexOf(this.current());\n            }\n\n            return t;\n          }\n\n          return '';\n        };\n\n        _proto._extractRegex = function _extractRegex(regex) {\n          var matches = this.currentStr().match(regex);\n\n          if (!matches) {\n            return null;\n          } // Move forward whatever was matched\n\n\n          this.forwardN(matches[0].length);\n          return matches;\n        };\n\n        _proto.isFinished = function isFinished() {\n          return this.index >= this.len;\n        };\n\n        _proto.forwardN = function forwardN(n) {\n          for (var i = 0; i < n; i++) {\n            this.forward();\n          }\n        };\n\n        _proto.forward = function forward() {\n          this.index++;\n\n          if (this.previous() === '\\n') {\n            this.lineno++;\n            this.colno = 0;\n          } else {\n            this.colno++;\n          }\n        };\n\n        _proto.backN = function backN(n) {\n          for (var i = 0; i < n; i++) {\n            this.back();\n          }\n        };\n\n        _proto.back = function back() {\n          this.index--;\n\n          if (this.current() === '\\n') {\n            this.lineno--;\n            var idx = this.src.lastIndexOf('\\n', this.index - 1);\n\n            if (idx === -1) {\n              this.colno = this.index;\n            } else {\n              this.colno = this.index - idx;\n            }\n          } else {\n            this.colno--;\n          }\n        } // current returns current character\n        ;\n\n        _proto.current = function current() {\n          if (!this.isFinished()) {\n            return this.str.charAt(this.index);\n          }\n\n          return '';\n        } // currentStr returns what's left of the unparsed string\n        ;\n\n        _proto.currentStr = function currentStr() {\n          if (!this.isFinished()) {\n            return this.str.substr(this.index);\n          }\n\n          return '';\n        };\n\n        _proto.previous = function previous() {\n          return this.str.charAt(this.index - 1);\n        };\n\n        return Tokenizer;\n      }();\n\n      module.exports = {\n        lex: function lex(src, opts) {\n          return new Tokenizer(src, opts);\n        },\n        TOKEN_STRING: TOKEN_STRING,\n        TOKEN_WHITESPACE: TOKEN_WHITESPACE,\n        TOKEN_DATA: TOKEN_DATA,\n        TOKEN_BLOCK_START: TOKEN_BLOCK_START,\n        TOKEN_BLOCK_END: TOKEN_BLOCK_END,\n        TOKEN_VARIABLE_START: TOKEN_VARIABLE_START,\n        TOKEN_VARIABLE_END: TOKEN_VARIABLE_END,\n        TOKEN_COMMENT: TOKEN_COMMENT,\n        TOKEN_LEFT_PAREN: TOKEN_LEFT_PAREN,\n        TOKEN_RIGHT_PAREN: TOKEN_RIGHT_PAREN,\n        TOKEN_LEFT_BRACKET: TOKEN_LEFT_BRACKET,\n        TOKEN_RIGHT_BRACKET: TOKEN_RIGHT_BRACKET,\n        TOKEN_LEFT_CURLY: TOKEN_LEFT_CURLY,\n        TOKEN_RIGHT_CURLY: TOKEN_RIGHT_CURLY,\n        TOKEN_OPERATOR: TOKEN_OPERATOR,\n        TOKEN_COMMA: TOKEN_COMMA,\n        TOKEN_COLON: TOKEN_COLON,\n        TOKEN_TILDE: TOKEN_TILDE,\n        TOKEN_PIPE: TOKEN_PIPE,\n        TOKEN_INT: TOKEN_INT,\n        TOKEN_FLOAT: TOKEN_FLOAT,\n        TOKEN_BOOLEAN: TOKEN_BOOLEAN,\n        TOKEN_NONE: TOKEN_NONE,\n        TOKEN_SYMBOL: TOKEN_SYMBOL,\n        TOKEN_SPECIAL: TOKEN_SPECIAL,\n        TOKEN_REGEX: TOKEN_REGEX\n      };\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var Loader = __webpack_require__(6);\n\n      var _require = __webpack_require__(19),\n          PrecompiledLoader = _require.PrecompiledLoader;\n\n      var WebLoader = /*#__PURE__*/function (_Loader) {\n        _inheritsLoose(WebLoader, _Loader);\n\n        function WebLoader(baseURL, opts) {\n          var _this;\n\n          _this = _Loader.call(this) || this;\n          _this.baseURL = baseURL || '.';\n          opts = opts || {}; // By default, the cache is turned off because there's no way\n          // to \"watch\" templates over HTTP, so they are re-downloaded\n          // and compiled each time. (Remember, PRECOMPILE YOUR\n          // TEMPLATES in production!)\n\n          _this.useCache = !!opts.useCache; // We default `async` to false so that the simple synchronous\n          // API can be used when you aren't doing anything async in\n          // your templates (which is most of the time). This performs a\n          // sync ajax request, but that's ok because it should *only*\n          // happen in development. PRECOMPILE YOUR TEMPLATES.\n\n          _this.async = !!opts.async;\n          return _this;\n        }\n\n        var _proto = WebLoader.prototype;\n\n        _proto.resolve = function resolve(from, to) {\n          throw new Error('relative templates not support in the browser yet');\n        };\n\n        _proto.getSource = function getSource(name, cb) {\n          var _this2 = this;\n\n          var useCache = this.useCache;\n          var result;\n          this.fetch(this.baseURL + '/' + name, function (err, src) {\n            if (err) {\n              if (cb) {\n                cb(err.content);\n              } else if (err.status === 404) {\n                result = null;\n              } else {\n                throw err.content;\n              }\n            } else {\n              result = {\n                src: src,\n                path: name,\n                noCache: !useCache\n              };\n\n              _this2.emit('load', name, result);\n\n              if (cb) {\n                cb(null, result);\n              }\n            }\n          }); // if this WebLoader isn't running asynchronously, the\n          // fetch above would actually run sync and we'll have a\n          // result here\n\n          return result;\n        };\n\n        _proto.fetch = function fetch(url, cb) {\n          // Only in the browser please\n          if (typeof window === 'undefined') {\n            throw new Error('WebLoader can only by used in a browser');\n          }\n\n          var ajax = new XMLHttpRequest();\n          var loading = true;\n\n          ajax.onreadystatechange = function () {\n            if (ajax.readyState === 4 && loading) {\n              loading = false;\n\n              if (ajax.status === 0 || ajax.status === 200) {\n                cb(null, ajax.responseText);\n              } else {\n                cb({\n                  status: ajax.status,\n                  content: ajax.responseText\n                });\n              }\n            }\n          };\n\n          url += (url.indexOf('?') === -1 ? '?' : '&') + 's=' + new Date().getTime();\n          ajax.open('GET', url, this.async);\n          ajax.send();\n        };\n\n        return WebLoader;\n      }(Loader);\n\n      module.exports = {\n        WebLoader: WebLoader,\n        PrecompiledLoader: PrecompiledLoader\n      };\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var lib = __webpack_require__(0);\n\n      var _require = __webpack_require__(7),\n          Environment = _require.Environment,\n          Template = _require.Template;\n\n      var Loader = __webpack_require__(6);\n\n      var loaders = __webpack_require__(10);\n\n      var precompile = __webpack_require__(23);\n\n      var compiler = __webpack_require__(5);\n\n      var parser = __webpack_require__(8);\n\n      var lexer = __webpack_require__(9);\n\n      var runtime = __webpack_require__(2);\n\n      var nodes = __webpack_require__(3);\n\n      var installJinjaCompat = __webpack_require__(25); // A single instance of an environment, since this is so commonly used\n\n\n      var e;\n\n      function configure(templatesPath, opts) {\n        opts = opts || {};\n\n        if (lib.isObject(templatesPath)) {\n          opts = templatesPath;\n          templatesPath = null;\n        }\n\n        var TemplateLoader;\n\n        if (loaders.FileSystemLoader) {\n          TemplateLoader = new loaders.FileSystemLoader(templatesPath, {\n            watch: opts.watch,\n            noCache: opts.noCache\n          });\n        } else if (loaders.WebLoader) {\n          TemplateLoader = new loaders.WebLoader(templatesPath, {\n            useCache: opts.web && opts.web.useCache,\n            async: opts.web && opts.web.async\n          });\n        }\n\n        e = new Environment(TemplateLoader, opts);\n\n        if (opts && opts.express) {\n          e.express(opts.express);\n        }\n\n        return e;\n      }\n\n      module.exports = {\n        Environment: Environment,\n        Template: Template,\n        Loader: Loader,\n        FileSystemLoader: loaders.FileSystemLoader,\n        NodeResolveLoader: loaders.NodeResolveLoader,\n        PrecompiledLoader: loaders.PrecompiledLoader,\n        WebLoader: loaders.WebLoader,\n        compiler: compiler,\n        parser: parser,\n        lexer: lexer,\n        runtime: runtime,\n        lib: lib,\n        nodes: nodes,\n        installJinjaCompat: installJinjaCompat,\n        configure: configure,\n        reset: function reset() {\n          e = undefined;\n        },\n        compile: function compile(src, env, path, eagerCompile) {\n          if (!e) {\n            configure();\n          }\n\n          return new Template(src, env, path, eagerCompile);\n        },\n        render: function render(name, ctx, cb) {\n          if (!e) {\n            configure();\n          }\n\n          return e.render(name, ctx, cb);\n        },\n        renderString: function renderString(src, ctx, cb) {\n          if (!e) {\n            configure();\n          }\n\n          return e.renderString(src, ctx, cb);\n        },\n        precompile: precompile ? precompile.precompile : undefined,\n        precompileString: precompile ? precompile.precompileString : undefined\n      };\n      /***/\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\"; // rawAsap provides everything we need except exception management.\n\n      var rawAsap = __webpack_require__(13); // RawTasks are recycled to reduce GC churn.\n\n\n      var freeTasks = []; // We queue errors to ensure they are thrown in right order (FIFO).\n      // Array-as-queue is good enough here, since we are just dealing with exceptions.\n\n      var pendingErrors = [];\n      var requestErrorThrow = rawAsap.makeRequestCallFromTimer(throwFirstError);\n\n      function throwFirstError() {\n        if (pendingErrors.length) {\n          throw pendingErrors.shift();\n        }\n      }\n      /**\n       * Calls a task as soon as possible after returning, in its own event, with priority\n       * over other events like animation, reflow, and repaint. An error thrown from an\n       * event will not interrupt, nor even substantially slow down the processing of\n       * other events, but will be rather postponed to a lower priority event.\n       * @param {{call}} task A callable object, typically a function that takes no\n       * arguments.\n       */\n\n\n      module.exports = asap;\n\n      function asap(task) {\n        var rawTask;\n\n        if (freeTasks.length) {\n          rawTask = freeTasks.pop();\n        } else {\n          rawTask = new RawTask();\n        }\n\n        rawTask.task = task;\n        rawAsap(rawTask);\n      } // We wrap tasks with recyclable task objects.  A task object implements\n      // `call`, just like a function.\n\n\n      function RawTask() {\n        this.task = null;\n      } // The sole purpose of wrapping the task is to catch the exception and recycle\n      // the task object after its single use.\n\n\n      RawTask.prototype.call = function () {\n        try {\n          this.task.call();\n        } catch (error) {\n          if (asap.onerror) {\n            // This hook exists purely for testing purposes.\n            // Its name will be periodically randomized to break any code that\n            // depends on its existence.\n            asap.onerror(error);\n          } else {\n            // In a web browser, exceptions are not fatal. However, to avoid\n            // slowing down the queue of pending tasks, we rethrow the error in a\n            // lower priority turn.\n            pendingErrors.push(error);\n            requestErrorThrow();\n          }\n        } finally {\n          this.task = null;\n          freeTasks[freeTasks.length] = this;\n        }\n      };\n      /***/\n\n    },\n    /* 13 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n      /* WEBPACK VAR INJECTION */\n\n      (function (global) {\n        // Use the fastest means possible to execute a task in its own turn, with\n        // priority over other events including IO, animation, reflow, and redraw\n        // events in browsers.\n        //\n        // An exception thrown by a task will permanently interrupt the processing of\n        // subsequent tasks. The higher level `asap` function ensures that if an\n        // exception is thrown by a task, that the task queue will continue flushing as\n        // soon as possible, but if you use `rawAsap` directly, you are responsible to\n        // either ensure that no exceptions are thrown from your task, or to manually\n        // call `rawAsap.requestFlush` if an exception is thrown.\n        module.exports = rawAsap;\n\n        function rawAsap(task) {\n          if (!queue.length) {\n            requestFlush();\n            flushing = true;\n          } // Equivalent to push, but avoids a function call.\n\n\n          queue[queue.length] = task;\n        }\n\n        var queue = []; // Once a flush has been requested, no further calls to `requestFlush` are\n        // necessary until the next `flush` completes.\n\n        var flushing = false; // `requestFlush` is an implementation-specific method that attempts to kick\n        // off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n        // the event queue before yielding to the browser's own event loop.\n\n        var requestFlush; // The position of the next task to execute in the task queue. This is\n        // preserved between calls to `flush` so that it can be resumed if\n        // a task throws an exception.\n\n        var index = 0; // If a task schedules additional tasks recursively, the task queue can grow\n        // unbounded. To prevent memory exhaustion, the task queue will periodically\n        // truncate already-completed tasks.\n\n        var capacity = 1024; // The flush function processes all tasks that have been scheduled with\n        // `rawAsap` unless and until one of those tasks throws an exception.\n        // If a task throws an exception, `flush` ensures that its state will remain\n        // consistent and will resume where it left off when called again.\n        // However, `flush` does not make any arrangements to be called again if an\n        // exception is thrown.\n\n        function flush() {\n          while (index < queue.length) {\n            var currentIndex = index; // Advance the index before calling the task. This ensures that we will\n            // begin flushing on the next task the task throws an error.\n\n            index = index + 1;\n            queue[currentIndex].call(); // Prevent leaking memory for long chains of recursive calls to `asap`.\n            // If we call `asap` within tasks scheduled by `asap`, the queue will\n            // grow, but to avoid an O(n) walk for every task we execute, we don't\n            // shift tasks off the queue after they have been executed.\n            // Instead, we periodically shift 1024 tasks off the queue.\n\n            if (index > capacity) {\n              // Manually shift all values starting at the index back to the\n              // beginning of the queue.\n              for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {\n                queue[scan] = queue[scan + index];\n              }\n\n              queue.length -= index;\n              index = 0;\n            }\n          }\n\n          queue.length = 0;\n          index = 0;\n          flushing = false;\n        } // `requestFlush` is implemented using a strategy based on data collected from\n        // every available SauceLabs Selenium web driver worker at time of writing.\n        // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n        // Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that\n        // have WebKitMutationObserver but not un-prefixed MutationObserver.\n        // Must use `global` or `self` instead of `window` to work in both frames and web\n        // workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.\n\n        /* globals self */\n\n\n        var scope = typeof global !== \"undefined\" ? global : self;\n        var BrowserMutationObserver = scope.MutationObserver || scope.WebKitMutationObserver; // MutationObservers are desirable because they have high priority and work\n        // reliably everywhere they are implemented.\n        // They are implemented in all modern browsers.\n        //\n        // - Android 4-4.3\n        // - Chrome 26-34\n        // - Firefox 14-29\n        // - Internet Explorer 11\n        // - iPad Safari 6-7.1\n        // - iPhone Safari 7-7.1\n        // - Safari 6-7\n\n        if (typeof BrowserMutationObserver === \"function\") {\n          requestFlush = makeRequestCallFromMutationObserver(flush); // MessageChannels are desirable because they give direct access to the HTML\n          // task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera\n          // 11-12, and in web workers in many engines.\n          // Although message channels yield to any queued rendering and IO tasks, they\n          // would be better than imposing the 4ms delay of timers.\n          // However, they do not work reliably in Internet Explorer or Safari.\n          // Internet Explorer 10 is the only browser that has setImmediate but does\n          // not have MutationObservers.\n          // Although setImmediate yields to the browser's renderer, it would be\n          // preferrable to falling back to setTimeout since it does not have\n          // the minimum 4ms penalty.\n          // Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and\n          // Desktop to a lesser extent) that renders both setImmediate and\n          // MessageChannel useless for the purposes of ASAP.\n          // https://github.com/kriskowal/q/issues/396\n          // Timers are implemented universally.\n          // We fall back to timers in workers in most engines, and in foreground\n          // contexts in the following browsers.\n          // However, note that even this simple case requires nuances to operate in a\n          // broad spectrum of browsers.\n          //\n          // - Firefox 3-13\n          // - Internet Explorer 6-9\n          // - iPad Safari 4.3\n          // - Lynx 2.8.7\n        } else {\n          requestFlush = makeRequestCallFromTimer(flush);\n        } // `requestFlush` requests that the high priority event queue be flushed as\n        // soon as possible.\n        // This is useful to prevent an error thrown in a task from stalling the event\n        // queue if the exception handled by Node.js’s\n        // `process.on(\"uncaughtException\")` or by a domain.\n\n\n        rawAsap.requestFlush = requestFlush; // To request a high priority event, we induce a mutation observer by toggling\n        // the text of a text node between \"1\" and \"-1\".\n\n        function makeRequestCallFromMutationObserver(callback) {\n          var toggle = 1;\n          var observer = new BrowserMutationObserver(callback);\n          var node = document.createTextNode(\"\");\n          observer.observe(node, {\n            characterData: true\n          });\n          return function requestCall() {\n            toggle = -toggle;\n            node.data = toggle;\n          };\n        } // The message channel technique was discovered by Malte Ubl and was the\n        // original foundation for this library.\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        // Safari 6.0.5 (at least) intermittently fails to create message ports on a\n        // page's first load. Thankfully, this version of Safari supports\n        // MutationObservers, so we don't need to fall back in that case.\n        // function makeRequestCallFromMessageChannel(callback) {\n        //     var channel = new MessageChannel();\n        //     channel.port1.onmessage = callback;\n        //     return function requestCall() {\n        //         channel.port2.postMessage(0);\n        //     };\n        // }\n        // For reasons explained above, we are also unable to use `setImmediate`\n        // under any circumstances.\n        // Even if we were, there is another bug in Internet Explorer 10.\n        // It is not sufficient to assign `setImmediate` to `requestFlush` because\n        // `setImmediate` must be called *by name* and therefore must be wrapped in a\n        // closure.\n        // Never forget.\n        // function makeRequestCallFromSetImmediate(callback) {\n        //     return function requestCall() {\n        //         setImmediate(callback);\n        //     };\n        // }\n        // Safari 6.0 has a problem where timers will get lost while the user is\n        // scrolling. This problem does not impact ASAP because Safari 6.0 supports\n        // mutation observers, so that implementation is used instead.\n        // However, if we ever elect to use timers in Safari, the prevalent work-around\n        // is to add a scroll event listener that calls for a flush.\n        // `setTimeout` does not call the passed callback if the delay is less than\n        // approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n        // even then.\n\n\n        function makeRequestCallFromTimer(callback) {\n          return function requestCall() {\n            // We dispatch a timeout with a specified delay of 0 for engines that\n            // can reliably accommodate that request. This will usually be snapped\n            // to a 4 milisecond delay, but once we're flushing, there's no delay\n            // between events.\n            var timeoutHandle = setTimeout(handleTimer, 0); // However, since this timer gets frequently dropped in Firefox\n            // workers, we enlist an interval handle that will try to fire\n            // an event 20 times per second until it succeeds.\n\n            var intervalHandle = setInterval(handleTimer, 50);\n\n            function handleTimer() {\n              // Whichever timer succeeds will cancel both timers and\n              // execute the callback.\n              clearTimeout(timeoutHandle);\n              clearInterval(intervalHandle);\n              callback();\n            }\n          };\n        } // This is for `asap.js` only.\n        // Its name will be periodically randomized to break any code that depends on\n        // its existence.\n\n\n        rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer; // ASAP was originally a nextTick shim included in Q. This was factored out\n        // into this ASAP package. It was later adapted to RSVP which made further\n        // amendments. These decisions, particularly to marginalize MessageChannel and\n        // to capture the MutationObserver implementation in a closure, were integrated\n        // back into ASAP proper.\n        // https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n\n        /* WEBPACK VAR INJECTION */\n      }).call(exports, __webpack_require__(14));\n      /***/\n    },\n    /* 14 */\n\n    /***/\n    function (module, exports) {\n      var g; // This works in non-strict mode\n\n      g = function () {\n        return this;\n      }();\n\n      try {\n        // This works if eval is allowed (see CSP)\n        g = g || Function(\"return this\")() || (1, eval)(\"this\");\n      } catch (e) {\n        // This works if the window reference is available\n        if (typeof window === \"object\") g = window;\n      } // g can still be undefined, but nothing to do about it...\n      // We return undefined, instead of nothing here, so it's\n      // easier to handle this case. if(!global) { ...}\n\n\n      module.exports = g;\n      /***/\n    },\n    /* 15 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__; // MIT license (by Elan Shanker).\n\n\n      (function (globals) {\n        'use strict';\n\n        var executeSync = function executeSync() {\n          var args = Array.prototype.slice.call(arguments);\n\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, args.splice(1));\n          }\n        };\n\n        var executeAsync = function executeAsync(fn) {\n          if (typeof setImmediate === 'function') {\n            setImmediate(fn);\n          } else if (typeof process !== 'undefined' && process.nextTick) {\n            process.nextTick(fn);\n          } else {\n            setTimeout(fn, 0);\n          }\n        };\n\n        var makeIterator = function makeIterator(tasks) {\n          var makeCallback = function makeCallback(index) {\n            var fn = function fn() {\n              if (tasks.length) {\n                tasks[index].apply(null, arguments);\n              }\n\n              return fn.next();\n            };\n\n            fn.next = function () {\n              return index < tasks.length - 1 ? makeCallback(index + 1) : null;\n            };\n\n            return fn;\n          };\n\n          return makeCallback(0);\n        };\n\n        var _isArray = Array.isArray || function (maybeArray) {\n          return Object.prototype.toString.call(maybeArray) === '[object Array]';\n        };\n\n        var waterfall = function waterfall(tasks, callback, forceAsync) {\n          var nextTick = forceAsync ? executeAsync : executeSync;\n\n          callback = callback || function () {};\n\n          if (!_isArray(tasks)) {\n            var err = new Error('First argument to waterfall must be an array of functions');\n            return callback(err);\n          }\n\n          if (!tasks.length) {\n            return callback();\n          }\n\n          var wrapIterator = function wrapIterator(iterator) {\n            return function (err) {\n              if (err) {\n                callback.apply(null, arguments);\n\n                callback = function callback() {};\n              } else {\n                var args = Array.prototype.slice.call(arguments, 1);\n                var next = iterator.next();\n\n                if (next) {\n                  args.push(wrapIterator(next));\n                } else {\n                  args.push(callback);\n                }\n\n                nextTick(function () {\n                  iterator.apply(null, args);\n                });\n              }\n            };\n          };\n\n          wrapIterator(makeIterator(tasks))();\n        };\n\n        if (true) {\n          !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n            return waterfall;\n          }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // RequireJS\n        } else {}\n      })(this);\n      /***/\n\n    },\n    /* 16 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\"; // Copyright Joyent, Inc. and other Node contributors.\n      //\n      // Permission is hereby granted, free of charge, to any person obtaining a\n      // copy of this software and associated documentation files (the\n      // \"Software\"), to deal in the Software without restriction, including\n      // without limitation the rights to use, copy, modify, merge, publish,\n      // distribute, sublicense, and/or sell copies of the Software, and to permit\n      // persons to whom the Software is furnished to do so, subject to the\n      // following conditions:\n      //\n      // The above copyright notice and this permission notice shall be included\n      // in all copies or substantial portions of the Software.\n      //\n      // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n      // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n      // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n      // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n      // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n      // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n      // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n      var R = typeof Reflect === 'object' ? Reflect : null;\n      var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {\n        return Function.prototype.apply.call(target, receiver, args);\n      };\n      var ReflectOwnKeys;\n\n      if (R && typeof R.ownKeys === 'function') {\n        ReflectOwnKeys = R.ownKeys;\n      } else if (Object.getOwnPropertySymbols) {\n        ReflectOwnKeys = function ReflectOwnKeys(target) {\n          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n        };\n      } else {\n        ReflectOwnKeys = function ReflectOwnKeys(target) {\n          return Object.getOwnPropertyNames(target);\n        };\n      }\n\n      function ProcessEmitWarning(warning) {\n        if (console && console.warn) console.warn(warning);\n      }\n\n      var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n        return value !== value;\n      };\n\n      function EventEmitter() {\n        EventEmitter.init.call(this);\n      }\n\n      module.exports = EventEmitter;\n      module.exports.once = once; // Backwards-compat with node 0.10.x\n\n      EventEmitter.EventEmitter = EventEmitter;\n      EventEmitter.prototype._events = undefined;\n      EventEmitter.prototype._eventsCount = 0;\n      EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are\n      // added to it. This is a useful default which helps finding memory leaks.\n\n      var defaultMaxListeners = 10;\n\n      function checkListener(listener) {\n        if (typeof listener !== 'function') {\n          throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n        }\n      }\n\n      Object.defineProperty(EventEmitter, 'defaultMaxListeners', {\n        enumerable: true,\n        get: function get() {\n          return defaultMaxListeners;\n        },\n        set: function set(arg) {\n          if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n            throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n          }\n\n          defaultMaxListeners = arg;\n        }\n      });\n\n      EventEmitter.init = function () {\n        if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        }\n\n        this._maxListeners = this._maxListeners || undefined;\n      }; // Obviously not all Emitters should be limited to 10. This function allows\n      // that to be increased. Set to zero for unlimited.\n\n\n      EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n        if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n          throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n        }\n\n        this._maxListeners = n;\n        return this;\n      };\n\n      function _getMaxListeners(that) {\n        if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n        return that._maxListeners;\n      }\n\n      EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n        return _getMaxListeners(this);\n      };\n\n      EventEmitter.prototype.emit = function emit(type) {\n        var args = [];\n\n        for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n\n        var doError = type === 'error';\n        var events = this._events;\n        if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.\n\n        if (doError) {\n          var er;\n          if (args.length > 0) er = args[0];\n\n          if (er instanceof Error) {\n            // Note: The comments on the `throw` lines are intentional, they show\n            // up in Node's output if this results in an unhandled exception.\n            throw er; // Unhandled 'error' event\n          } // At least give some kind of context to the user\n\n\n          var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n          err.context = er;\n          throw err; // Unhandled 'error' event\n        }\n\n        var handler = events[type];\n        if (handler === undefined) return false;\n\n        if (typeof handler === 'function') {\n          ReflectApply(handler, this, args);\n        } else {\n          var len = handler.length;\n          var listeners = arrayClone(handler, len);\n\n          for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);\n        }\n\n        return true;\n      };\n\n      function _addListener(target, type, listener, prepend) {\n        var m;\n        var events;\n        var existing;\n        checkListener(listener);\n        events = target._events;\n\n        if (events === undefined) {\n          events = target._events = Object.create(null);\n          target._eventsCount = 0;\n        } else {\n          // To avoid recursion in the case that type === \"newListener\"! Before\n          // adding it to the listeners, first emit \"newListener\".\n          if (events.newListener !== undefined) {\n            target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the\n            // this._events to be assigned to a new object\n\n            events = target._events;\n          }\n\n          existing = events[type];\n        }\n\n        if (existing === undefined) {\n          // Optimize the case of one listener. Don't need the extra array object.\n          existing = events[type] = listener;\n          ++target._eventsCount;\n        } else {\n          if (typeof existing === 'function') {\n            // Adding the second element, need to change to array.\n            existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.\n          } else if (prepend) {\n            existing.unshift(listener);\n          } else {\n            existing.push(listener);\n          } // Check for listener leak\n\n\n          m = _getMaxListeners(target);\n\n          if (m > 0 && existing.length > m && !existing.warned) {\n            existing.warned = true; // No error code for this since it is a Warning\n            // eslint-disable-next-line no-restricted-syntax\n\n            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\n            w.name = 'MaxListenersExceededWarning';\n            w.emitter = target;\n            w.type = type;\n            w.count = existing.length;\n            ProcessEmitWarning(w);\n          }\n        }\n\n        return target;\n      }\n\n      EventEmitter.prototype.addListener = function addListener(type, listener) {\n        return _addListener(this, type, listener, false);\n      };\n\n      EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n      EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n        return _addListener(this, type, listener, true);\n      };\n\n      function onceWrapper() {\n        if (!this.fired) {\n          this.target.removeListener(this.type, this.wrapFn);\n          this.fired = true;\n          if (arguments.length === 0) return this.listener.call(this.target);\n          return this.listener.apply(this.target, arguments);\n        }\n      }\n\n      function _onceWrap(target, type, listener) {\n        var state = {\n          fired: false,\n          wrapFn: undefined,\n          target: target,\n          type: type,\n          listener: listener\n        };\n        var wrapped = onceWrapper.bind(state);\n        wrapped.listener = listener;\n        state.wrapFn = wrapped;\n        return wrapped;\n      }\n\n      EventEmitter.prototype.once = function once(type, listener) {\n        checkListener(listener);\n        this.on(type, _onceWrap(this, type, listener));\n        return this;\n      };\n\n      EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n        checkListener(listener);\n        this.prependListener(type, _onceWrap(this, type, listener));\n        return this;\n      }; // Emits a 'removeListener' event if and only if the listener was removed.\n\n\n      EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n        var list, events, position, i, originalListener;\n        checkListener(listener);\n        events = this._events;\n        if (events === undefined) return this;\n        list = events[type];\n        if (list === undefined) return this;\n\n        if (list === listener || list.listener === listener) {\n          if (--this._eventsCount === 0) this._events = Object.create(null);else {\n            delete events[type];\n            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n          }\n        } else if (typeof list !== 'function') {\n          position = -1;\n\n          for (i = list.length - 1; i >= 0; i--) {\n            if (list[i] === listener || list[i].listener === listener) {\n              originalListener = list[i].listener;\n              position = i;\n              break;\n            }\n          }\n\n          if (position < 0) return this;\n          if (position === 0) list.shift();else {\n            spliceOne(list, position);\n          }\n          if (list.length === 1) events[type] = list[0];\n          if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\n        }\n\n        return this;\n      };\n\n      EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\n      EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n        var listeners, events, i;\n        events = this._events;\n        if (events === undefined) return this; // not listening for removeListener, no need to emit\n\n        if (events.removeListener === undefined) {\n          if (arguments.length === 0) {\n            this._events = Object.create(null);\n            this._eventsCount = 0;\n          } else if (events[type] !== undefined) {\n            if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\n          }\n\n          return this;\n        } // emit removeListener for all listeners on all events\n\n\n        if (arguments.length === 0) {\n          var keys = Object.keys(events);\n          var key;\n\n          for (i = 0; i < keys.length; ++i) {\n            key = keys[i];\n            if (key === 'removeListener') continue;\n            this.removeAllListeners(key);\n          }\n\n          this.removeAllListeners('removeListener');\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n          return this;\n        }\n\n        listeners = events[type];\n\n        if (typeof listeners === 'function') {\n          this.removeListener(type, listeners);\n        } else if (listeners !== undefined) {\n          // LIFO order\n          for (i = listeners.length - 1; i >= 0; i--) {\n            this.removeListener(type, listeners[i]);\n          }\n        }\n\n        return this;\n      };\n\n      function _listeners(target, type, unwrap) {\n        var events = target._events;\n        if (events === undefined) return [];\n        var evlistener = events[type];\n        if (evlistener === undefined) return [];\n        if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n      }\n\n      EventEmitter.prototype.listeners = function listeners(type) {\n        return _listeners(this, type, true);\n      };\n\n      EventEmitter.prototype.rawListeners = function rawListeners(type) {\n        return _listeners(this, type, false);\n      };\n\n      EventEmitter.listenerCount = function (emitter, type) {\n        if (typeof emitter.listenerCount === 'function') {\n          return emitter.listenerCount(type);\n        } else {\n          return listenerCount.call(emitter, type);\n        }\n      };\n\n      EventEmitter.prototype.listenerCount = listenerCount;\n\n      function listenerCount(type) {\n        var events = this._events;\n\n        if (events !== undefined) {\n          var evlistener = events[type];\n\n          if (typeof evlistener === 'function') {\n            return 1;\n          } else if (evlistener !== undefined) {\n            return evlistener.length;\n          }\n        }\n\n        return 0;\n      }\n\n      EventEmitter.prototype.eventNames = function eventNames() {\n        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n      };\n\n      function arrayClone(arr, n) {\n        var copy = new Array(n);\n\n        for (var i = 0; i < n; ++i) copy[i] = arr[i];\n\n        return copy;\n      }\n\n      function spliceOne(list, index) {\n        for (; index + 1 < list.length; index++) list[index] = list[index + 1];\n\n        list.pop();\n      }\n\n      function unwrapListeners(arr) {\n        var ret = new Array(arr.length);\n\n        for (var i = 0; i < ret.length; ++i) {\n          ret[i] = arr[i].listener || arr[i];\n        }\n\n        return ret;\n      }\n\n      function once(emitter, name) {\n        return new Promise(function (resolve, reject) {\n          function eventListener() {\n            if (errorListener !== undefined) {\n              emitter.removeListener('error', errorListener);\n            }\n\n            resolve([].slice.call(arguments));\n          }\n\n          ;\n          var errorListener; // Adding an error listener is not optional because\n          // if an error is thrown on an event emitter we cannot\n          // guarantee that the actual event we are waiting will\n          // be fired. The result could be a silent way to create\n          // memory or file descriptor leaks, which is something\n          // we should avoid.\n\n          if (name !== 'error') {\n            errorListener = function errorListener(err) {\n              emitter.removeListener(name, eventListener);\n              reject(err);\n            };\n\n            emitter.once('error', errorListener);\n          }\n\n          emitter.once(name, eventListener);\n        });\n      }\n      /***/\n\n    },\n    /* 17 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var nodes = __webpack_require__(3);\n\n      var lib = __webpack_require__(0);\n\n      var sym = 0;\n\n      function gensym() {\n        return 'hole_' + sym++;\n      } // copy-on-write version of map\n\n\n      function mapCOW(arr, func) {\n        var res = null;\n\n        for (var i = 0; i < arr.length; i++) {\n          var item = func(arr[i]);\n\n          if (item !== arr[i]) {\n            if (!res) {\n              res = arr.slice();\n            }\n\n            res[i] = item;\n          }\n        }\n\n        return res || arr;\n      }\n\n      function walk(ast, func, depthFirst) {\n        if (!(ast instanceof nodes.Node)) {\n          return ast;\n        }\n\n        if (!depthFirst) {\n          var astT = func(ast);\n\n          if (astT && astT !== ast) {\n            return astT;\n          }\n        }\n\n        if (ast instanceof nodes.NodeList) {\n          var children = mapCOW(ast.children, function (node) {\n            return walk(node, func, depthFirst);\n          });\n\n          if (children !== ast.children) {\n            ast = new nodes[ast.typename](ast.lineno, ast.colno, children);\n          }\n        } else if (ast instanceof nodes.CallExtension) {\n          var args = walk(ast.args, func, depthFirst);\n          var contentArgs = mapCOW(ast.contentArgs, function (node) {\n            return walk(node, func, depthFirst);\n          });\n\n          if (args !== ast.args || contentArgs !== ast.contentArgs) {\n            ast = new nodes[ast.typename](ast.extName, ast.prop, args, contentArgs);\n          }\n        } else {\n          var props = ast.fields.map(function (field) {\n            return ast[field];\n          });\n          var propsT = mapCOW(props, function (prop) {\n            return walk(prop, func, depthFirst);\n          });\n\n          if (propsT !== props) {\n            ast = new nodes[ast.typename](ast.lineno, ast.colno);\n            propsT.forEach(function (prop, i) {\n              ast[ast.fields[i]] = prop;\n            });\n          }\n        }\n\n        return depthFirst ? func(ast) || ast : ast;\n      }\n\n      function depthWalk(ast, func) {\n        return walk(ast, func, true);\n      }\n\n      function _liftFilters(node, asyncFilters, prop) {\n        var children = [];\n        var walked = depthWalk(prop ? node[prop] : node, function (descNode) {\n          var symbol;\n\n          if (descNode instanceof nodes.Block) {\n            return descNode;\n          } else if (descNode instanceof nodes.Filter && lib.indexOf(asyncFilters, descNode.name.value) !== -1 || descNode instanceof nodes.CallExtensionAsync) {\n            symbol = new nodes.Symbol(descNode.lineno, descNode.colno, gensym());\n            children.push(new nodes.FilterAsync(descNode.lineno, descNode.colno, descNode.name, descNode.args, symbol));\n          }\n\n          return symbol;\n        });\n\n        if (prop) {\n          node[prop] = walked;\n        } else {\n          node = walked;\n        }\n\n        if (children.length) {\n          children.push(node);\n          return new nodes.NodeList(node.lineno, node.colno, children);\n        } else {\n          return node;\n        }\n      }\n\n      function liftFilters(ast, asyncFilters) {\n        return depthWalk(ast, function (node) {\n          if (node instanceof nodes.Output) {\n            return _liftFilters(node, asyncFilters);\n          } else if (node instanceof nodes.Set) {\n            return _liftFilters(node, asyncFilters, 'value');\n          } else if (node instanceof nodes.For) {\n            return _liftFilters(node, asyncFilters, 'arr');\n          } else if (node instanceof nodes.If) {\n            return _liftFilters(node, asyncFilters, 'cond');\n          } else if (node instanceof nodes.CallExtension) {\n            return _liftFilters(node, asyncFilters, 'args');\n          } else {\n            return undefined;\n          }\n        });\n      }\n\n      function liftSuper(ast) {\n        return walk(ast, function (blockNode) {\n          if (!(blockNode instanceof nodes.Block)) {\n            return;\n          }\n\n          var hasSuper = false;\n          var symbol = gensym();\n          blockNode.body = walk(blockNode.body, function (node) {\n            // eslint-disable-line consistent-return\n            if (node instanceof nodes.FunCall && node.name.value === 'super') {\n              hasSuper = true;\n              return new nodes.Symbol(node.lineno, node.colno, symbol);\n            }\n          });\n\n          if (hasSuper) {\n            blockNode.body.children.unshift(new nodes.Super(0, 0, blockNode.name, new nodes.Symbol(0, 0, symbol)));\n          }\n        });\n      }\n\n      function convertStatements(ast) {\n        return depthWalk(ast, function (node) {\n          if (!(node instanceof nodes.If) && !(node instanceof nodes.For)) {\n            return undefined;\n          }\n\n          var async = false;\n          walk(node, function (child) {\n            if (child instanceof nodes.FilterAsync || child instanceof nodes.IfAsync || child instanceof nodes.AsyncEach || child instanceof nodes.AsyncAll || child instanceof nodes.CallExtensionAsync) {\n              async = true; // Stop iterating by returning the node\n\n              return child;\n            }\n\n            return undefined;\n          });\n\n          if (async) {\n            if (node instanceof nodes.If) {\n              return new nodes.IfAsync(node.lineno, node.colno, node.cond, node.body, node.else_);\n            } else if (node instanceof nodes.For && !(node instanceof nodes.AsyncAll)) {\n              return new nodes.AsyncEach(node.lineno, node.colno, node.arr, node.name, node.body, node.else_);\n            }\n          }\n\n          return undefined;\n        });\n      }\n\n      function cps(ast, asyncFilters) {\n        return convertStatements(liftSuper(liftFilters(ast, asyncFilters)));\n      }\n\n      function transform(ast, asyncFilters) {\n        return cps(ast, asyncFilters || []);\n      } // var parser = require('./parser');\n      // var src = 'hello {% foo %}{% endfoo %} end';\n      // var ast = transform(parser.parse(src, [new FooExtension()]), ['bar']);\n      // nodes.printNodes(ast);\n\n\n      module.exports = {\n        transform: transform\n      };\n      /***/\n    },\n    /* 18 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var lib = __webpack_require__(0);\n\n      var r = __webpack_require__(2);\n\n      var exports = module.exports = {};\n\n      function normalize(value, defaultValue) {\n        if (value === null || value === undefined || value === false) {\n          return defaultValue;\n        }\n\n        return value;\n      }\n\n      exports.abs = Math.abs;\n\n      function isNaN(num) {\n        return num !== num; // eslint-disable-line no-self-compare\n      }\n\n      function batch(arr, linecount, fillWith) {\n        var i;\n        var res = [];\n        var tmp = [];\n\n        for (i = 0; i < arr.length; i++) {\n          if (i % linecount === 0 && tmp.length) {\n            res.push(tmp);\n            tmp = [];\n          }\n\n          tmp.push(arr[i]);\n        }\n\n        if (tmp.length) {\n          if (fillWith) {\n            for (i = tmp.length; i < linecount; i++) {\n              tmp.push(fillWith);\n            }\n          }\n\n          res.push(tmp);\n        }\n\n        return res;\n      }\n\n      exports.batch = batch;\n\n      function capitalize(str) {\n        str = normalize(str, '');\n        var ret = str.toLowerCase();\n        return r.copySafeness(str, ret.charAt(0).toUpperCase() + ret.slice(1));\n      }\n\n      exports.capitalize = capitalize;\n\n      function center(str, width) {\n        str = normalize(str, '');\n        width = width || 80;\n\n        if (str.length >= width) {\n          return str;\n        }\n\n        var spaces = width - str.length;\n        var pre = lib.repeat(' ', spaces / 2 - spaces % 2);\n        var post = lib.repeat(' ', spaces / 2);\n        return r.copySafeness(str, pre + str + post);\n      }\n\n      exports.center = center;\n\n      function default_(val, def, bool) {\n        if (bool) {\n          return val || def;\n        } else {\n          return val !== undefined ? val : def;\n        }\n      } // TODO: it is confusing to export something called 'default'\n\n\n      exports['default'] = default_; // eslint-disable-line dot-notation\n\n      function dictsort(val, caseSensitive, by) {\n        if (!lib.isObject(val)) {\n          throw new lib.TemplateError('dictsort filter: val must be an object');\n        }\n\n        var array = []; // deliberately include properties from the object's prototype\n\n        for (var k in val) {\n          // eslint-disable-line guard-for-in, no-restricted-syntax\n          array.push([k, val[k]]);\n        }\n\n        var si;\n\n        if (by === undefined || by === 'key') {\n          si = 0;\n        } else if (by === 'value') {\n          si = 1;\n        } else {\n          throw new lib.TemplateError('dictsort filter: You can only sort by either key or value');\n        }\n\n        array.sort(function (t1, t2) {\n          var a = t1[si];\n          var b = t2[si];\n\n          if (!caseSensitive) {\n            if (lib.isString(a)) {\n              a = a.toUpperCase();\n            }\n\n            if (lib.isString(b)) {\n              b = b.toUpperCase();\n            }\n          }\n\n          return a > b ? 1 : a === b ? 0 : -1; // eslint-disable-line no-nested-ternary\n        });\n        return array;\n      }\n\n      exports.dictsort = dictsort;\n\n      function dump(obj, spaces) {\n        return JSON.stringify(obj, null, spaces);\n      }\n\n      exports.dump = dump;\n\n      function escape(str) {\n        if (str instanceof r.SafeString) {\n          return str;\n        }\n\n        str = str === null || str === undefined ? '' : str;\n        return r.markSafe(lib.escape(str.toString()));\n      }\n\n      exports.escape = escape;\n\n      function safe(str) {\n        if (str instanceof r.SafeString) {\n          return str;\n        }\n\n        str = str === null || str === undefined ? '' : str;\n        return r.markSafe(str.toString());\n      }\n\n      exports.safe = safe;\n\n      function first(arr) {\n        return arr[0];\n      }\n\n      exports.first = first;\n\n      function forceescape(str) {\n        str = str === null || str === undefined ? '' : str;\n        return r.markSafe(lib.escape(str.toString()));\n      }\n\n      exports.forceescape = forceescape;\n\n      function groupby(arr, attr) {\n        return lib.groupBy(arr, attr, this.env.opts.throwOnUndefined);\n      }\n\n      exports.groupby = groupby;\n\n      function indent(str, width, indentfirst) {\n        str = normalize(str, '');\n\n        if (str === '') {\n          return '';\n        }\n\n        width = width || 4; // let res = '';\n\n        var lines = str.split('\\n');\n        var sp = lib.repeat(' ', width);\n        var res = lines.map(function (l, i) {\n          return i === 0 && !indentfirst ? l : \"\" + sp + l;\n        }).join('\\n');\n        return r.copySafeness(str, res);\n      }\n\n      exports.indent = indent;\n\n      function join(arr, del, attr) {\n        del = del || '';\n\n        if (attr) {\n          arr = lib.map(arr, function (v) {\n            return v[attr];\n          });\n        }\n\n        return arr.join(del);\n      }\n\n      exports.join = join;\n\n      function last(arr) {\n        return arr[arr.length - 1];\n      }\n\n      exports.last = last;\n\n      function lengthFilter(val) {\n        var value = normalize(val, '');\n\n        if (value !== undefined) {\n          if (typeof Map === 'function' && value instanceof Map || typeof Set === 'function' && value instanceof Set) {\n            // ECMAScript 2015 Maps and Sets\n            return value.size;\n          }\n\n          if (lib.isObject(value) && !(value instanceof r.SafeString)) {\n            // Objects (besides SafeStrings), non-primative Arrays\n            return lib.keys(value).length;\n          }\n\n          return value.length;\n        }\n\n        return 0;\n      }\n\n      exports.length = lengthFilter;\n\n      function list(val) {\n        if (lib.isString(val)) {\n          return val.split('');\n        } else if (lib.isObject(val)) {\n          return lib._entries(val || {}).map(function (_ref) {\n            var key = _ref[0],\n                value = _ref[1];\n            return {\n              key: key,\n              value: value\n            };\n          });\n        } else if (lib.isArray(val)) {\n          return val;\n        } else {\n          throw new lib.TemplateError('list filter: type not iterable');\n        }\n      }\n\n      exports.list = list;\n\n      function lower(str) {\n        str = normalize(str, '');\n        return str.toLowerCase();\n      }\n\n      exports.lower = lower;\n\n      function nl2br(str) {\n        if (str === null || str === undefined) {\n          return '';\n        }\n\n        return r.copySafeness(str, str.replace(/\\r\\n|\\n/g, '<br />\\n'));\n      }\n\n      exports.nl2br = nl2br;\n\n      function random(arr) {\n        return arr[Math.floor(Math.random() * arr.length)];\n      }\n\n      exports.random = random;\n      /**\n       * Construct select or reject filter\n       *\n       * @param {boolean} expectedTestResult\n       * @returns {function(array, string, *): array}\n       */\n\n      function getSelectOrReject(expectedTestResult) {\n        function filter(arr, testName, secondArg) {\n          if (testName === void 0) {\n            testName = 'truthy';\n          }\n\n          var context = this;\n          var test = context.env.getTest(testName);\n          return lib.toArray(arr).filter(function examineTestResult(item) {\n            return test.call(context, item, secondArg) === expectedTestResult;\n          });\n        }\n\n        return filter;\n      }\n\n      exports.reject = getSelectOrReject(false);\n\n      function rejectattr(arr, attr) {\n        return arr.filter(function (item) {\n          return !item[attr];\n        });\n      }\n\n      exports.rejectattr = rejectattr;\n      exports.select = getSelectOrReject(true);\n\n      function selectattr(arr, attr) {\n        return arr.filter(function (item) {\n          return !!item[attr];\n        });\n      }\n\n      exports.selectattr = selectattr;\n\n      function replace(str, old, new_, maxCount) {\n        var originalStr = str;\n\n        if (old instanceof RegExp) {\n          return str.replace(old, new_);\n        }\n\n        if (typeof maxCount === 'undefined') {\n          maxCount = -1;\n        }\n\n        var res = ''; // Output\n        // Cast Numbers in the search term to string\n\n        if (typeof old === 'number') {\n          old = '' + old;\n        } else if (typeof old !== 'string') {\n          // If it is something other than number or string,\n          // return the original string\n          return str;\n        } // Cast numbers in the replacement to string\n\n\n        if (typeof str === 'number') {\n          str = '' + str;\n        } // If by now, we don't have a string, throw it back\n\n\n        if (typeof str !== 'string' && !(str instanceof r.SafeString)) {\n          return str;\n        } // ShortCircuits\n\n\n        if (old === '') {\n          // Mimic the python behaviour: empty string is replaced\n          // by replacement e.g. \"abc\"|replace(\"\", \".\") -> .a.b.c.\n          res = new_ + str.split('').join(new_) + new_;\n          return r.copySafeness(str, res);\n        }\n\n        var nextIndex = str.indexOf(old); // if # of replacements to perform is 0, or the string to does\n        // not contain the old value, return the string\n\n        if (maxCount === 0 || nextIndex === -1) {\n          return str;\n        }\n\n        var pos = 0;\n        var count = 0; // # of replacements made\n\n        while (nextIndex > -1 && (maxCount === -1 || count < maxCount)) {\n          // Grab the next chunk of src string and add it with the\n          // replacement, to the result\n          res += str.substring(pos, nextIndex) + new_; // Increment our pointer in the src string\n\n          pos = nextIndex + old.length;\n          count++; // See if there are any more replacements to be made\n\n          nextIndex = str.indexOf(old, pos);\n        } // We've either reached the end, or done the max # of\n        // replacements, tack on any remaining string\n\n\n        if (pos < str.length) {\n          res += str.substring(pos);\n        }\n\n        return r.copySafeness(originalStr, res);\n      }\n\n      exports.replace = replace;\n\n      function reverse(val) {\n        var arr;\n\n        if (lib.isString(val)) {\n          arr = list(val);\n        } else {\n          // Copy it\n          arr = lib.map(val, function (v) {\n            return v;\n          });\n        }\n\n        arr.reverse();\n\n        if (lib.isString(val)) {\n          return r.copySafeness(val, arr.join(''));\n        }\n\n        return arr;\n      }\n\n      exports.reverse = reverse;\n\n      function round(val, precision, method) {\n        precision = precision || 0;\n        var factor = Math.pow(10, precision);\n        var rounder;\n\n        if (method === 'ceil') {\n          rounder = Math.ceil;\n        } else if (method === 'floor') {\n          rounder = Math.floor;\n        } else {\n          rounder = Math.round;\n        }\n\n        return rounder(val * factor) / factor;\n      }\n\n      exports.round = round;\n\n      function slice(arr, slices, fillWith) {\n        var sliceLength = Math.floor(arr.length / slices);\n        var extra = arr.length % slices;\n        var res = [];\n        var offset = 0;\n\n        for (var i = 0; i < slices; i++) {\n          var start = offset + i * sliceLength;\n\n          if (i < extra) {\n            offset++;\n          }\n\n          var end = offset + (i + 1) * sliceLength;\n          var currSlice = arr.slice(start, end);\n\n          if (fillWith && i >= extra) {\n            currSlice.push(fillWith);\n          }\n\n          res.push(currSlice);\n        }\n\n        return res;\n      }\n\n      exports.slice = slice;\n\n      function sum(arr, attr, start) {\n        if (start === void 0) {\n          start = 0;\n        }\n\n        if (attr) {\n          arr = lib.map(arr, function (v) {\n            return v[attr];\n          });\n        }\n\n        return start + arr.reduce(function (a, b) {\n          return a + b;\n        }, 0);\n      }\n\n      exports.sum = sum;\n      exports.sort = r.makeMacro(['value', 'reverse', 'case_sensitive', 'attribute'], [], function sortFilter(arr, reversed, caseSens, attr) {\n        var _this = this; // Copy it\n\n\n        var array = lib.map(arr, function (v) {\n          return v;\n        });\n        var getAttribute = lib.getAttrGetter(attr);\n        array.sort(function (a, b) {\n          var x = attr ? getAttribute(a) : a;\n          var y = attr ? getAttribute(b) : b;\n\n          if (_this.env.opts.throwOnUndefined && attr && (x === undefined || y === undefined)) {\n            throw new TypeError(\"sort: attribute \\\"\" + attr + \"\\\" resolved to undefined\");\n          }\n\n          if (!caseSens && lib.isString(x) && lib.isString(y)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n          }\n\n          if (x < y) {\n            return reversed ? 1 : -1;\n          } else if (x > y) {\n            return reversed ? -1 : 1;\n          } else {\n            return 0;\n          }\n        });\n        return array;\n      });\n\n      function string(obj) {\n        return r.copySafeness(obj, obj);\n      }\n\n      exports.string = string;\n\n      function striptags(input, preserveLinebreaks) {\n        input = normalize(input, '');\n        var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>|<!--[\\s\\S]*?-->/gi;\n        var trimmedInput = trim(input.replace(tags, ''));\n        var res = '';\n\n        if (preserveLinebreaks) {\n          res = trimmedInput.replace(/^ +| +$/gm, '') // remove leading and trailing spaces\n          .replace(/ +/g, ' ') // squash adjacent spaces\n          .replace(/(\\r\\n)/g, '\\n') // normalize linebreaks (CRLF -> LF)\n          .replace(/\\n\\n\\n+/g, '\\n\\n'); // squash abnormal adjacent linebreaks\n        } else {\n          res = trimmedInput.replace(/\\s+/gi, ' ');\n        }\n\n        return r.copySafeness(input, res);\n      }\n\n      exports.striptags = striptags;\n\n      function title(str) {\n        str = normalize(str, '');\n        var words = str.split(' ').map(function (word) {\n          return capitalize(word);\n        });\n        return r.copySafeness(str, words.join(' '));\n      }\n\n      exports.title = title;\n\n      function trim(str) {\n        return r.copySafeness(str, str.replace(/^\\s*|\\s*$/g, ''));\n      }\n\n      exports.trim = trim;\n\n      function truncate(input, length, killwords, end) {\n        var orig = input;\n        input = normalize(input, '');\n        length = length || 255;\n\n        if (input.length <= length) {\n          return input;\n        }\n\n        if (killwords) {\n          input = input.substring(0, length);\n        } else {\n          var idx = input.lastIndexOf(' ', length);\n\n          if (idx === -1) {\n            idx = length;\n          }\n\n          input = input.substring(0, idx);\n        }\n\n        input += end !== undefined && end !== null ? end : '...';\n        return r.copySafeness(orig, input);\n      }\n\n      exports.truncate = truncate;\n\n      function upper(str) {\n        str = normalize(str, '');\n        return str.toUpperCase();\n      }\n\n      exports.upper = upper;\n\n      function urlencode(obj) {\n        var enc = encodeURIComponent;\n\n        if (lib.isString(obj)) {\n          return enc(obj);\n        } else {\n          var keyvals = lib.isArray(obj) ? obj : lib._entries(obj);\n          return keyvals.map(function (_ref2) {\n            var k = _ref2[0],\n                v = _ref2[1];\n            return enc(k) + \"=\" + enc(v);\n          }).join('&');\n        }\n      }\n\n      exports.urlencode = urlencode; // For the jinja regexp, see\n      // https://github.com/mitsuhiko/jinja2/blob/f15b814dcba6aa12bc74d1f7d0c881d55f7126be/jinja2/utils.py#L20-L23\n\n      var puncRe = /^(?:\\(|<|&lt;)?(.*?)(?:\\.|,|\\)|\\n|&gt;)?$/; // from http://blog.gerv.net/2011/05/html5_email_address_regexp/\n\n      var emailRe = /^[\\w.!#$%&'*+\\-\\/=?\\^`{|}~]+@[a-z\\d\\-]+(\\.[a-z\\d\\-]+)+$/i;\n      var httpHttpsRe = /^https?:\\/\\/.*$/;\n      var wwwRe = /^www\\./;\n      var tldRe = /\\.(?:org|net|com)(?:\\:|\\/|$)/;\n\n      function urlize(str, length, nofollow) {\n        if (isNaN(length)) {\n          length = Infinity;\n        }\n\n        var noFollowAttr = nofollow === true ? ' rel=\"nofollow\"' : '';\n        var words = str.split(/(\\s+)/).filter(function (word) {\n          // If the word has no length, bail. This can happen for str with\n          // trailing whitespace.\n          return word && word.length;\n        }).map(function (word) {\n          var matches = word.match(puncRe);\n          var possibleUrl = matches ? matches[1] : word;\n          var shortUrl = possibleUrl.substr(0, length); // url that starts with http or https\n\n          if (httpHttpsRe.test(possibleUrl)) {\n            return \"<a href=\\\"\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n          } // url that starts with www.\n\n\n          if (wwwRe.test(possibleUrl)) {\n            return \"<a href=\\\"http://\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n          } // an email address of the form username@domain.tld\n\n\n          if (emailRe.test(possibleUrl)) {\n            return \"<a href=\\\"mailto:\" + possibleUrl + \"\\\">\" + possibleUrl + \"</a>\";\n          } // url that ends in .com, .org or .net that is not an email address\n\n\n          if (tldRe.test(possibleUrl)) {\n            return \"<a href=\\\"http://\" + possibleUrl + \"\\\"\" + noFollowAttr + \">\" + shortUrl + \"</a>\";\n          }\n\n          return word;\n        });\n        return words.join('');\n      }\n\n      exports.urlize = urlize;\n\n      function wordcount(str) {\n        str = normalize(str, '');\n        var words = str ? str.match(/\\w+/g) : null;\n        return words ? words.length : null;\n      }\n\n      exports.wordcount = wordcount;\n\n      function float(val, def) {\n        var res = parseFloat(val);\n        return isNaN(res) ? def : res;\n      }\n\n      exports.float = float;\n      var intFilter = r.makeMacro(['value', 'default', 'base'], [], function doInt(value, defaultValue, base) {\n        if (base === void 0) {\n          base = 10;\n        }\n\n        var res = parseInt(value, base);\n        return isNaN(res) ? defaultValue : res;\n      });\n      exports.int = intFilter; // Aliases\n\n      exports.d = exports.default;\n      exports.e = exports.escape;\n      /***/\n    },\n    /* 19 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _inheritsLoose(subClass, superClass) {\n        subClass.prototype = Object.create(superClass.prototype);\n        subClass.prototype.constructor = subClass;\n\n        _setPrototypeOf(subClass, superClass);\n      }\n\n      function _setPrototypeOf(o, p) {\n        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n          o.__proto__ = p;\n          return o;\n        };\n\n        return _setPrototypeOf(o, p);\n      }\n\n      var Loader = __webpack_require__(6);\n\n      var PrecompiledLoader = /*#__PURE__*/function (_Loader) {\n        _inheritsLoose(PrecompiledLoader, _Loader);\n\n        function PrecompiledLoader(compiledTemplates) {\n          var _this;\n\n          _this = _Loader.call(this) || this;\n          _this.precompiled = compiledTemplates || {};\n          return _this;\n        }\n\n        var _proto = PrecompiledLoader.prototype;\n\n        _proto.getSource = function getSource(name) {\n          if (this.precompiled[name]) {\n            return {\n              src: {\n                type: 'code',\n                obj: this.precompiled[name]\n              },\n              path: name\n            };\n          }\n\n          return null;\n        };\n\n        return PrecompiledLoader;\n      }(Loader);\n\n      module.exports = {\n        PrecompiledLoader: PrecompiledLoader\n      };\n      /***/\n    },\n    /* 20 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var SafeString = __webpack_require__(2).SafeString;\n      /**\n       * Returns `true` if the object is a function, otherwise `false`.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n\n      function callable(value) {\n        return typeof value === 'function';\n      }\n\n      exports.callable = callable;\n      /**\n       * Returns `true` if the object is strictly not `undefined`.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function defined(value) {\n        return value !== undefined;\n      }\n\n      exports.defined = defined;\n      /**\n       * Returns `true` if the operand (one) is divisble by the test's argument\n       * (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function divisibleby(one, two) {\n        return one % two === 0;\n      }\n\n      exports.divisibleby = divisibleby;\n      /**\n       * Returns true if the string has been escaped (i.e., is a SafeString).\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function escaped(value) {\n        return value instanceof SafeString;\n      }\n\n      exports.escaped = escaped;\n      /**\n       * Returns `true` if the arguments are strictly equal.\n       * @param { any } one\n       * @param { any } two\n       */\n\n      function equalto(one, two) {\n        return one === two;\n      }\n\n      exports.equalto = equalto; // Aliases\n\n      exports.eq = exports.equalto;\n      exports.sameas = exports.equalto;\n      /**\n       * Returns `true` if the value is evenly divisible by 2.\n       * @param { number } value\n       * @returns { boolean }\n       */\n\n      function even(value) {\n        return value % 2 === 0;\n      }\n\n      exports.even = even;\n      /**\n       * Returns `true` if the value is falsy - if I recall correctly, '', 0, false,\n       * undefined, NaN or null. I don't know if we should stick to the default JS\n       * behavior or attempt to replicate what Python believes should be falsy (i.e.,\n       * empty arrays, empty dicts, not 0...).\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function falsy(value) {\n        return !value;\n      }\n\n      exports.falsy = falsy;\n      /**\n       * Returns `true` if the operand (one) is greater or equal to the test's\n       * argument (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function ge(one, two) {\n        return one >= two;\n      }\n\n      exports.ge = ge;\n      /**\n       * Returns `true` if the operand (one) is greater than the test's argument\n       * (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function greaterthan(one, two) {\n        return one > two;\n      }\n\n      exports.greaterthan = greaterthan; // alias\n\n      exports.gt = exports.greaterthan;\n      /**\n       * Returns `true` if the operand (one) is less than or equal to the test's\n       * argument (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function le(one, two) {\n        return one <= two;\n      }\n\n      exports.le = le;\n      /**\n       * Returns `true` if the operand (one) is less than the test's passed argument\n       * (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function lessthan(one, two) {\n        return one < two;\n      }\n\n      exports.lessthan = lessthan; // alias\n\n      exports.lt = exports.lessthan;\n      /**\n       * Returns `true` if the string is lowercased.\n       * @param { string } value\n       * @returns { boolean }\n       */\n\n      function lower(value) {\n        return value.toLowerCase() === value;\n      }\n\n      exports.lower = lower;\n      /**\n       * Returns `true` if the operand (one) is less than or equal to the test's\n       * argument (two).\n       * @param { number } one\n       * @param { number } two\n       * @returns { boolean }\n       */\n\n      function ne(one, two) {\n        return one !== two;\n      }\n\n      exports.ne = ne;\n      /**\n       * Returns true if the value is strictly equal to `null`.\n       * @param { any }\n       * @returns { boolean }\n       */\n\n      function nullTest(value) {\n        return value === null;\n      }\n\n      exports.null = nullTest;\n      /**\n       * Returns true if value is a number.\n       * @param { any }\n       * @returns { boolean }\n       */\n\n      function number(value) {\n        return typeof value === 'number';\n      }\n\n      exports.number = number;\n      /**\n       * Returns `true` if the value is *not* evenly divisible by 2.\n       * @param { number } value\n       * @returns { boolean }\n       */\n\n      function odd(value) {\n        return value % 2 === 1;\n      }\n\n      exports.odd = odd;\n      /**\n       * Returns `true` if the value is a string, `false` if not.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function string(value) {\n        return typeof value === 'string';\n      }\n\n      exports.string = string;\n      /**\n       * Returns `true` if the value is not in the list of things considered falsy:\n       * '', null, undefined, 0, NaN and false.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function truthy(value) {\n        return !!value;\n      }\n\n      exports.truthy = truthy;\n      /**\n       * Returns `true` if the value is undefined.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function undefinedTest(value) {\n        return value === undefined;\n      }\n\n      exports.undefined = undefinedTest;\n      /**\n       * Returns `true` if the string is uppercased.\n       * @param { string } value\n       * @returns { boolean }\n       */\n\n      function upper(value) {\n        return value.toUpperCase() === value;\n      }\n\n      exports.upper = upper;\n      /**\n       * If ES6 features are available, returns `true` if the value implements the\n       * `Symbol.iterator` method. If not, it's a string or Array.\n       *\n       * Could potentially cause issues if a browser exists that has Set and Map but\n       * not Symbol.\n       *\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function iterable(value) {\n        if (typeof Symbol !== 'undefined') {\n          return !!value[Symbol.iterator];\n        } else {\n          return Array.isArray(value) || typeof value === 'string';\n        }\n      }\n\n      exports.iterable = iterable;\n      /**\n       * If ES6 features are available, returns `true` if the value is an object hash\n       * or an ES6 Map. Otherwise just return if it's an object hash.\n       * @param { any } value\n       * @returns { boolean }\n       */\n\n      function mapping(value) {\n        // only maps and object hashes\n        var bool = value !== null && value !== undefined && typeof value === 'object' && !Array.isArray(value);\n\n        if (Set) {\n          return bool && !(value instanceof Set);\n        } else {\n          return bool;\n        }\n      }\n\n      exports.mapping = mapping;\n      /***/\n    },\n    /* 21 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function _cycler(items) {\n        var index = -1;\n        return {\n          current: null,\n          reset: function reset() {\n            index = -1;\n            this.current = null;\n          },\n          next: function next() {\n            index++;\n\n            if (index >= items.length) {\n              index = 0;\n            }\n\n            this.current = items[index];\n            return this.current;\n          }\n        };\n      }\n\n      function _joiner(sep) {\n        sep = sep || ',';\n        var first = true;\n        return function () {\n          var val = first ? '' : sep;\n          first = false;\n          return val;\n        };\n      } // Making this a function instead so it returns a new object\n      // each time it's called. That way, if something like an environment\n      // uses it, they will each have their own copy.\n\n\n      function globals() {\n        return {\n          range: function range(start, stop, step) {\n            if (typeof stop === 'undefined') {\n              stop = start;\n              start = 0;\n              step = 1;\n            } else if (!step) {\n              step = 1;\n            }\n\n            var arr = [];\n\n            if (step > 0) {\n              for (var i = start; i < stop; i += step) {\n                arr.push(i);\n              }\n            } else {\n              for (var _i = start; _i > stop; _i += step) {\n                // eslint-disable-line for-direction\n                arr.push(_i);\n              }\n            }\n\n            return arr;\n          },\n          cycler: function cycler() {\n            return _cycler(Array.prototype.slice.call(arguments));\n          },\n          joiner: function joiner(sep) {\n            return _joiner(sep);\n          }\n        };\n      }\n\n      module.exports = globals;\n      /***/\n    },\n    /* 22 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var path = __webpack_require__(4);\n\n      module.exports = function express(env, app) {\n        function NunjucksView(name, opts) {\n          this.name = name;\n          this.path = name;\n          this.defaultEngine = opts.defaultEngine;\n          this.ext = path.extname(name);\n\n          if (!this.ext && !this.defaultEngine) {\n            throw new Error('No default engine was specified and no extension was provided.');\n          }\n\n          if (!this.ext) {\n            this.name += this.ext = (this.defaultEngine[0] !== '.' ? '.' : '') + this.defaultEngine;\n          }\n        }\n\n        NunjucksView.prototype.render = function render(opts, cb) {\n          env.render(this.name, opts, cb);\n        };\n\n        app.set('view', NunjucksView);\n        app.set('nunjucksEnv', env);\n        return env;\n      };\n      /***/\n\n    },\n    /* 23 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      var fs = __webpack_require__(4);\n\n      var path = __webpack_require__(4);\n\n      var _require = __webpack_require__(0),\n          _prettifyError = _require._prettifyError;\n\n      var compiler = __webpack_require__(5);\n\n      var _require2 = __webpack_require__(7),\n          Environment = _require2.Environment;\n\n      var precompileGlobal = __webpack_require__(24);\n\n      function match(filename, patterns) {\n        if (!Array.isArray(patterns)) {\n          return false;\n        }\n\n        return patterns.some(function (pattern) {\n          return filename.match(pattern);\n        });\n      }\n\n      function precompileString(str, opts) {\n        opts = opts || {};\n        opts.isString = true;\n        var env = opts.env || new Environment([]);\n        var wrapper = opts.wrapper || precompileGlobal;\n\n        if (!opts.name) {\n          throw new Error('the \"name\" option is required when compiling a string');\n        }\n\n        return wrapper([_precompile(str, opts.name, env)], opts);\n      }\n\n      function precompile(input, opts) {\n        // The following options are available:\n        //\n        // * name: name of the template (auto-generated when compiling a directory)\n        // * isString: input is a string, not a file path\n        // * asFunction: generate a callable function\n        // * force: keep compiling on error\n        // * env: the Environment to use (gets extensions and async filters from it)\n        // * include: which file/folders to include (folders are auto-included, files are auto-excluded)\n        // * exclude: which file/folders to exclude (folders are auto-included, files are auto-excluded)\n        // * wrapper: function(templates, opts) {...}\n        //       Customize the output format to store the compiled template.\n        //       By default, templates are stored in a global variable used by the runtime.\n        //       A custom loader will be necessary to load your custom wrapper.\n        opts = opts || {};\n        var env = opts.env || new Environment([]);\n        var wrapper = opts.wrapper || precompileGlobal;\n\n        if (opts.isString) {\n          return precompileString(input, opts);\n        }\n\n        var pathStats = fs.existsSync(input) && fs.statSync(input);\n        var precompiled = [];\n        var templates = [];\n\n        function addTemplates(dir) {\n          fs.readdirSync(dir).forEach(function (file) {\n            var filepath = path.join(dir, file);\n            var subpath = filepath.substr(path.join(input, '/').length);\n            var stat = fs.statSync(filepath);\n\n            if (stat && stat.isDirectory()) {\n              subpath += '/';\n\n              if (!match(subpath, opts.exclude)) {\n                addTemplates(filepath);\n              }\n            } else if (match(subpath, opts.include)) {\n              templates.push(filepath);\n            }\n          });\n        }\n\n        if (pathStats.isFile()) {\n          precompiled.push(_precompile(fs.readFileSync(input, 'utf-8'), opts.name || input, env));\n        } else if (pathStats.isDirectory()) {\n          addTemplates(input);\n\n          for (var i = 0; i < templates.length; i++) {\n            var name = templates[i].replace(path.join(input, '/'), '');\n\n            try {\n              precompiled.push(_precompile(fs.readFileSync(templates[i], 'utf-8'), name, env));\n            } catch (e) {\n              if (opts.force) {\n                // Don't stop generating the output if we're\n                // forcing compilation.\n                console.error(e); // eslint-disable-line no-console\n              } else {\n                throw e;\n              }\n            }\n          }\n        }\n\n        return wrapper(precompiled, opts);\n      }\n\n      function _precompile(str, name, env) {\n        env = env || new Environment([]);\n        var asyncFilters = env.asyncFilters;\n        var extensions = env.extensionsList;\n        var template;\n        name = name.replace(/\\\\/g, '/');\n\n        try {\n          template = compiler.compile(str, asyncFilters, extensions, name, env.opts);\n        } catch (err) {\n          throw _prettifyError(name, false, err);\n        }\n\n        return {\n          name: name,\n          template: template\n        };\n      }\n\n      module.exports = {\n        precompile: precompile,\n        precompileString: precompileString\n      };\n      /***/\n    },\n    /* 24 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      \"use strict\";\n\n      function precompileGlobal(templates, opts) {\n        var out = '';\n        opts = opts || {};\n\n        for (var i = 0; i < templates.length; i++) {\n          var name = JSON.stringify(templates[i].name);\n          var template = templates[i].template;\n          out += '(function() {' + '(window.nunjucksPrecompiled = window.nunjucksPrecompiled || {})' + '[' + name + '] = (function() {\\n' + template + '\\n})();\\n';\n\n          if (opts.asFunction) {\n            out += 'return function(ctx, cb) { return nunjucks.render(' + name + ', ctx, cb); }\\n';\n          }\n\n          out += '})();\\n';\n        }\n\n        return out;\n      }\n\n      module.exports = precompileGlobal;\n      /***/\n    },\n    /* 25 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      function installCompat() {\n        'use strict';\n        /* eslint-disable camelcase */\n        // This must be called like `nunjucks.installCompat` so that `this`\n        // references the nunjucks instance\n\n        var runtime = this.runtime;\n        var lib = this.lib; // Handle slim case where these 'modules' are excluded from the built source\n\n        var Compiler = this.compiler.Compiler;\n        var Parser = this.parser.Parser;\n        var nodes = this.nodes;\n        var lexer = this.lexer;\n        var orig_contextOrFrameLookup = runtime.contextOrFrameLookup;\n        var orig_memberLookup = runtime.memberLookup;\n        var orig_Compiler_assertType;\n        var orig_Parser_parseAggregate;\n\n        if (Compiler) {\n          orig_Compiler_assertType = Compiler.prototype.assertType;\n        }\n\n        if (Parser) {\n          orig_Parser_parseAggregate = Parser.prototype.parseAggregate;\n        }\n\n        function uninstall() {\n          runtime.contextOrFrameLookup = orig_contextOrFrameLookup;\n          runtime.memberLookup = orig_memberLookup;\n\n          if (Compiler) {\n            Compiler.prototype.assertType = orig_Compiler_assertType;\n          }\n\n          if (Parser) {\n            Parser.prototype.parseAggregate = orig_Parser_parseAggregate;\n          }\n        }\n\n        runtime.contextOrFrameLookup = function contextOrFrameLookup(context, frame, key) {\n          var val = orig_contextOrFrameLookup.apply(this, arguments);\n\n          if (val !== undefined) {\n            return val;\n          }\n\n          switch (key) {\n            case 'True':\n              return true;\n\n            case 'False':\n              return false;\n\n            case 'None':\n              return null;\n\n            default:\n              return undefined;\n          }\n        };\n\n        function getTokensState(tokens) {\n          return {\n            index: tokens.index,\n            lineno: tokens.lineno,\n            colno: tokens.colno\n          };\n        }\n\n        if ( true && nodes && Compiler && Parser) {\n          // i.e., not slim mode\n          var Slice = nodes.Node.extend('Slice', {\n            fields: ['start', 'stop', 'step'],\n            init: function init(lineno, colno, start, stop, step) {\n              start = start || new nodes.Literal(lineno, colno, null);\n              stop = stop || new nodes.Literal(lineno, colno, null);\n              step = step || new nodes.Literal(lineno, colno, 1);\n              this.parent(lineno, colno, start, stop, step);\n            }\n          });\n\n          Compiler.prototype.assertType = function assertType(node) {\n            if (node instanceof Slice) {\n              return;\n            }\n\n            orig_Compiler_assertType.apply(this, arguments);\n          };\n\n          Compiler.prototype.compileSlice = function compileSlice(node, frame) {\n            this._emit('(');\n\n            this._compileExpression(node.start, frame);\n\n            this._emit('),(');\n\n            this._compileExpression(node.stop, frame);\n\n            this._emit('),(');\n\n            this._compileExpression(node.step, frame);\n\n            this._emit(')');\n          };\n\n          Parser.prototype.parseAggregate = function parseAggregate() {\n            var _this = this;\n\n            var origState = getTokensState(this.tokens); // Set back one accounting for opening bracket/parens\n\n            origState.colno--;\n            origState.index--;\n\n            try {\n              return orig_Parser_parseAggregate.apply(this);\n            } catch (e) {\n              var errState = getTokensState(this.tokens);\n\n              var rethrow = function rethrow() {\n                lib._assign(_this.tokens, errState);\n\n                return e;\n              }; // Reset to state before original parseAggregate called\n\n\n              lib._assign(this.tokens, origState);\n\n              this.peeked = false;\n              var tok = this.peekToken();\n\n              if (tok.type !== lexer.TOKEN_LEFT_BRACKET) {\n                throw rethrow();\n              } else {\n                this.nextToken();\n              }\n\n              var node = new Slice(tok.lineno, tok.colno); // If we don't encounter a colon while parsing, this is not a slice,\n              // so re-raise the original exception.\n\n              var isSlice = false;\n\n              for (var i = 0; i <= node.fields.length; i++) {\n                if (this.skip(lexer.TOKEN_RIGHT_BRACKET)) {\n                  break;\n                }\n\n                if (i === node.fields.length) {\n                  if (isSlice) {\n                    this.fail('parseSlice: too many slice components', tok.lineno, tok.colno);\n                  } else {\n                    break;\n                  }\n                }\n\n                if (this.skip(lexer.TOKEN_COLON)) {\n                  isSlice = true;\n                } else {\n                  var field = node.fields[i];\n                  node[field] = this.parseExpression();\n                  isSlice = this.skip(lexer.TOKEN_COLON) || isSlice;\n                }\n              }\n\n              if (!isSlice) {\n                throw rethrow();\n              }\n\n              return new nodes.Array(tok.lineno, tok.colno, [node]);\n            }\n          };\n        }\n\n        function sliceLookup(obj, start, stop, step) {\n          obj = obj || [];\n\n          if (start === null) {\n            start = step < 0 ? obj.length - 1 : 0;\n          }\n\n          if (stop === null) {\n            stop = step < 0 ? -1 : obj.length;\n          } else if (stop < 0) {\n            stop += obj.length;\n          }\n\n          if (start < 0) {\n            start += obj.length;\n          }\n\n          var results = [];\n\n          for (var i = start;; i += step) {\n            if (i < 0 || i > obj.length) {\n              break;\n            }\n\n            if (step > 0 && i >= stop) {\n              break;\n            }\n\n            if (step < 0 && i <= stop) {\n              break;\n            }\n\n            results.push(runtime.memberLookup(obj, i));\n          }\n\n          return results;\n        }\n\n        function hasOwnProp(obj, key) {\n          return Object.prototype.hasOwnProperty.call(obj, key);\n        }\n\n        var ARRAY_MEMBERS = {\n          pop: function pop(index) {\n            if (index === undefined) {\n              return this.pop();\n            }\n\n            if (index >= this.length || index < 0) {\n              throw new Error('KeyError');\n            }\n\n            return this.splice(index, 1);\n          },\n          append: function append(element) {\n            return this.push(element);\n          },\n          remove: function remove(element) {\n            for (var i = 0; i < this.length; i++) {\n              if (this[i] === element) {\n                return this.splice(i, 1);\n              }\n            }\n\n            throw new Error('ValueError');\n          },\n          count: function count(element) {\n            var count = 0;\n\n            for (var i = 0; i < this.length; i++) {\n              if (this[i] === element) {\n                count++;\n              }\n            }\n\n            return count;\n          },\n          index: function index(element) {\n            var i;\n\n            if ((i = this.indexOf(element)) === -1) {\n              throw new Error('ValueError');\n            }\n\n            return i;\n          },\n          find: function find(element) {\n            return this.indexOf(element);\n          },\n          insert: function insert(index, elem) {\n            return this.splice(index, 0, elem);\n          }\n        };\n        var OBJECT_MEMBERS = {\n          items: function items() {\n            return lib._entries(this);\n          },\n          values: function values() {\n            return lib._values(this);\n          },\n          keys: function keys() {\n            return lib.keys(this);\n          },\n          get: function get(key, def) {\n            var output = this[key];\n\n            if (output === undefined) {\n              output = def;\n            }\n\n            return output;\n          },\n          has_key: function has_key(key) {\n            return hasOwnProp(this, key);\n          },\n          pop: function pop(key, def) {\n            var output = this[key];\n\n            if (output === undefined && def !== undefined) {\n              output = def;\n            } else if (output === undefined) {\n              throw new Error('KeyError');\n            } else {\n              delete this[key];\n            }\n\n            return output;\n          },\n          popitem: function popitem() {\n            var keys = lib.keys(this);\n\n            if (!keys.length) {\n              throw new Error('KeyError');\n            }\n\n            var k = keys[0];\n            var val = this[k];\n            delete this[k];\n            return [k, val];\n          },\n          setdefault: function setdefault(key, def) {\n            if (def === void 0) {\n              def = null;\n            }\n\n            if (!(key in this)) {\n              this[key] = def;\n            }\n\n            return this[key];\n          },\n          update: function update(kwargs) {\n            lib._assign(this, kwargs);\n\n            return null; // Always returns None\n          }\n        };\n        OBJECT_MEMBERS.iteritems = OBJECT_MEMBERS.items;\n        OBJECT_MEMBERS.itervalues = OBJECT_MEMBERS.values;\n        OBJECT_MEMBERS.iterkeys = OBJECT_MEMBERS.keys;\n\n        runtime.memberLookup = function memberLookup(obj, val, autoescape) {\n          if (arguments.length === 4) {\n            return sliceLookup.apply(this, arguments);\n          }\n\n          obj = obj || {}; // If the object is an object, return any of the methods that Python would\n          // otherwise provide.\n\n          if (lib.isArray(obj) && hasOwnProp(ARRAY_MEMBERS, val)) {\n            return ARRAY_MEMBERS[val].bind(obj);\n          }\n\n          if (lib.isObject(obj) && hasOwnProp(OBJECT_MEMBERS, val)) {\n            return OBJECT_MEMBERS[val].bind(obj);\n          }\n\n          return orig_memberLookup.apply(this, arguments);\n        };\n\n        return uninstall;\n      }\n\n      module.exports = installCompat;\n      /***/\n    }\n    /******/\n    ])\n  );\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./node_modules/nunjucks/browser/nunjucks.js?");

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {}; // cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n  throw new Error('setTimeout has not been defined');\n}\n\nfunction defaultClearTimeout() {\n  throw new Error('clearTimeout has not been defined');\n}\n\n(function () {\n  try {\n    if (typeof setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n    } else {\n      cachedSetTimeout = defaultSetTimout;\n    }\n  } catch (e) {\n    cachedSetTimeout = defaultSetTimout;\n  }\n\n  try {\n    if (typeof clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n    } else {\n      cachedClearTimeout = defaultClearTimeout;\n    }\n  } catch (e) {\n    cachedClearTimeout = defaultClearTimeout;\n  }\n})();\n\nfunction runTimeout(fun) {\n  if (cachedSetTimeout === setTimeout) {\n    //normal enviroments in sane situations\n    return setTimeout(fun, 0);\n  } // if setTimeout wasn't available but was latter defined\n\n\n  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n    cachedSetTimeout = setTimeout;\n    return setTimeout(fun, 0);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedSetTimeout(fun, 0);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n      return cachedSetTimeout.call(null, fun, 0);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n      return cachedSetTimeout.call(this, fun, 0);\n    }\n  }\n}\n\nfunction runClearTimeout(marker) {\n  if (cachedClearTimeout === clearTimeout) {\n    //normal enviroments in sane situations\n    return clearTimeout(marker);\n  } // if clearTimeout wasn't available but was latter defined\n\n\n  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n    cachedClearTimeout = clearTimeout;\n    return clearTimeout(marker);\n  }\n\n  try {\n    // when when somebody has screwed with setTimeout but no I.E. maddness\n    return cachedClearTimeout(marker);\n  } catch (e) {\n    try {\n      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n      return cachedClearTimeout.call(null, marker);\n    } catch (e) {\n      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n      // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n      return cachedClearTimeout.call(this, marker);\n    }\n  }\n}\n\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n  if (!draining || !currentQueue) {\n    return;\n  }\n\n  draining = false;\n\n  if (currentQueue.length) {\n    queue = currentQueue.concat(queue);\n  } else {\n    queueIndex = -1;\n  }\n\n  if (queue.length) {\n    drainQueue();\n  }\n}\n\nfunction drainQueue() {\n  if (draining) {\n    return;\n  }\n\n  var timeout = runTimeout(cleanUpNextTick);\n  draining = true;\n  var len = queue.length;\n\n  while (len) {\n    currentQueue = queue;\n    queue = [];\n\n    while (++queueIndex < len) {\n      if (currentQueue) {\n        currentQueue[queueIndex].run();\n      }\n    }\n\n    queueIndex = -1;\n    len = queue.length;\n  }\n\n  currentQueue = null;\n  draining = false;\n  runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n  var args = new Array(arguments.length - 1);\n\n  if (arguments.length > 1) {\n    for (var i = 1; i < arguments.length; i++) {\n      args[i - 1] = arguments[i];\n    }\n  }\n\n  queue.push(new Item(fun, args));\n\n  if (queue.length === 1 && !draining) {\n    runTimeout(drainQueue);\n  }\n}; // v8 likes predictible objects\n\n\nfunction Item(fun, array) {\n  this.fun = fun;\n  this.array = array;\n}\n\nItem.prototype.run = function () {\n  this.fun.apply(null, this.array);\n};\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\n\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) {\n  return [];\n};\n\nprocess.binding = function (name) {\n  throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () {\n  return '/';\n};\n\nprocess.chdir = function (dir) {\n  throw new Error('process.chdir is not supported');\n};\n\nprocess.umask = function () {\n  return 0;\n};\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n  \"use strict\";\n\n  if (global.setImmediate) {\n    return;\n  }\n\n  var nextHandle = 1; // Spec says greater than zero\n\n  var tasksByHandle = {};\n  var currentlyRunningATask = false;\n  var doc = global.document;\n  var registerImmediate;\n\n  function setImmediate(callback) {\n    // Callback can either be a function or a string\n    if (typeof callback !== \"function\") {\n      callback = new Function(\"\" + callback);\n    } // Copy function arguments\n\n\n    var args = new Array(arguments.length - 1);\n\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i + 1];\n    } // Store and register the task\n\n\n    var task = {\n      callback: callback,\n      args: args\n    };\n    tasksByHandle[nextHandle] = task;\n    registerImmediate(nextHandle);\n    return nextHandle++;\n  }\n\n  function clearImmediate(handle) {\n    delete tasksByHandle[handle];\n  }\n\n  function run(task) {\n    var callback = task.callback;\n    var args = task.args;\n\n    switch (args.length) {\n      case 0:\n        callback();\n        break;\n\n      case 1:\n        callback(args[0]);\n        break;\n\n      case 2:\n        callback(args[0], args[1]);\n        break;\n\n      case 3:\n        callback(args[0], args[1], args[2]);\n        break;\n\n      default:\n        callback.apply(undefined, args);\n        break;\n    }\n  }\n\n  function runIfPresent(handle) {\n    // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // \"too much recursion\" error.\n      setTimeout(runIfPresent, 0, handle);\n    } else {\n      var task = tasksByHandle[handle];\n\n      if (task) {\n        currentlyRunningATask = true;\n\n        try {\n          run(task);\n        } finally {\n          clearImmediate(handle);\n          currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  function installNextTickImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      process.nextTick(function () {\n        runIfPresent(handle);\n      });\n    };\n  }\n\n  function canUsePostMessage() {\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `global.postMessage` means something completely different and can't be used for this purpose.\n    if (global.postMessage && !global.importScripts) {\n      var postMessageIsAsynchronous = true;\n      var oldOnMessage = global.onmessage;\n\n      global.onmessage = function () {\n        postMessageIsAsynchronous = false;\n      };\n\n      global.postMessage(\"\", \"*\");\n      global.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n  }\n\n  function installPostMessageImplementation() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n\n    var onGlobalMessage = function onGlobalMessage(event) {\n      if (event.source === global && typeof event.data === \"string\" && event.data.indexOf(messagePrefix) === 0) {\n        runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n\n    if (global.addEventListener) {\n      global.addEventListener(\"message\", onGlobalMessage, false);\n    } else {\n      global.attachEvent(\"onmessage\", onGlobalMessage);\n    }\n\n    registerImmediate = function registerImmediate(handle) {\n      global.postMessage(messagePrefix + handle, \"*\");\n    };\n  }\n\n  function installMessageChannelImplementation() {\n    var channel = new MessageChannel();\n\n    channel.port1.onmessage = function (event) {\n      var handle = event.data;\n      runIfPresent(handle);\n    };\n\n    registerImmediate = function registerImmediate(handle) {\n      channel.port2.postMessage(handle);\n    };\n  }\n\n  function installReadyStateChangeImplementation() {\n    var html = doc.documentElement;\n\n    registerImmediate = function registerImmediate(handle) {\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var script = doc.createElement(\"script\");\n\n      script.onreadystatechange = function () {\n        runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n\n      html.appendChild(script);\n    };\n  }\n\n  function installSetTimeoutImplementation() {\n    registerImmediate = function registerImmediate(handle) {\n      setTimeout(runIfPresent, 0, handle);\n    };\n  } // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n\n\n  var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n  attachTo = attachTo && attachTo.setTimeout ? attachTo : global; // Don't get fooled by e.g. browserify environments.\n\n  if ({}.toString.call(global.process) === \"[object process]\") {\n    // For Node.js before 0.9\n    installNextTickImplementation();\n  } else if (canUsePostMessage()) {\n    // For non-IE10 modern browsers\n    installPostMessageImplementation();\n  } else if (global.MessageChannel) {\n    // For web workers, where supported\n    installMessageChannelImplementation();\n  } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n    // For IE 6–8\n    installReadyStateChangeImplementation();\n  } else {\n    // For older browsers\n    installSetTimeoutImplementation();\n  }\n\n  attachTo.setImmediate = setImmediate;\n  attachTo.clearImmediate = clearImmediate;\n})(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = typeof global !== \"undefined\" && global || typeof self !== \"undefined\" && self || window;\nvar apply = Function.prototype.apply; // DOM APIs, for completeness\n\nexports.setTimeout = function () {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\n\nexports.setInterval = function () {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\n\nexports.clearTimeout = exports.clearInterval = function (timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\n\nTimeout.prototype.unref = Timeout.prototype.ref = function () {};\n\nTimeout.prototype.close = function () {\n  this._clearFn.call(scope, this._id);\n}; // Does not start the time, just sets up the members needed.\n\n\nexports.enroll = function (item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function (item) {\n  clearTimeout(item._idleTimeoutId);\n  var msecs = item._idleTimeout;\n\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout) item._onTimeout();\n    }, msecs);\n  }\n}; // setimmediate attaches itself to the global object\n\n\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\"); // On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\n\n\nexports.setImmediate = typeof self !== \"undefined\" && self.setImmediate || typeof global !== \"undefined\" && global.setImmediate || this && this.setImmediate;\nexports.clearImmediate = typeof self !== \"undefined\" && self.clearImmediate || typeof global !== \"undefined\" && global.clearImmediate || this && this.clearImmediate;\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;\n\n//# sourceURL=webpack://pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad/(webpack)/buildin/global.js?");

/***/ })

/******/ });
if (window.ComponentFramework && window.ComponentFramework.registerControl) {
	ComponentFramework.registerControl('HSL.GovUkDesignSystem.TextInput', pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.TextInput);
} else {
	var HSL = HSL || {};
	HSL.GovUkDesignSystem = HSL.GovUkDesignSystem || {};
	HSL.GovUkDesignSystem.TextInput = pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad.TextInput;
	pcf_tools_652ac3f36e1e4bca82eb3c1dc44e6fad = undefined;
}